'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var eventsourceParser = require('eventsource-parser');
var moment = require('moment-timezone');
var zod = require('zod');
var eventSourcePolyfill = require('event-source-polyfill');

function _OverloadYield(e, d) {
  this.v = e, this.k = d;
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}
function asyncGeneratorStep(n, t, e, r, o, a, c) {
  try {
    var i = n[a](c),
      u = i.value;
  } catch (n) {
    return void e(n);
  }
  i.done ? t(u) : Promise.resolve(u).then(r, o);
}
function _asyncToGenerator(n) {
  return function () {
    var t = this,
      e = arguments;
    return new Promise(function (r, o) {
      var a = n.apply(t, e);
      function _next(n) {
        asyncGeneratorStep(a, r, o, _next, _throw, "next", n);
      }
      function _throw(n) {
        asyncGeneratorStep(a, r, o, _next, _throw, "throw", n);
      }
      _next(void 0);
    });
  };
}
function _awaitAsyncGenerator(e) {
  return new _OverloadYield(e, 0);
}
function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t) return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function () {
      return o >= r.length ? {
        done: !0
      } : {
        done: !1,
        value: r[o++]
      };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function (n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
function _regeneratorRuntime() {
  _regeneratorRuntime = function () {
    return e;
  };
  var t,
    e = {},
    r = Object.prototype,
    n = r.hasOwnProperty,
    o = Object.defineProperty || function (t, e, r) {
      t[e] = r.value;
    },
    i = "function" == typeof Symbol ? Symbol : {},
    a = i.iterator || "@@iterator",
    c = i.asyncIterator || "@@asyncIterator",
    u = i.toStringTag || "@@toStringTag";
  function define(t, e, r) {
    return Object.defineProperty(t, e, {
      value: r,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), t[e];
  }
  try {
    define({}, "");
  } catch (t) {
    define = function (t, e, r) {
      return t[e] = r;
    };
  }
  function wrap(t, e, r, n) {
    var i = e && e.prototype instanceof Generator ? e : Generator,
      a = Object.create(i.prototype),
      c = new Context(n || []);
    return o(a, "_invoke", {
      value: makeInvokeMethod(t, r, c)
    }), a;
  }
  function tryCatch(t, e, r) {
    try {
      return {
        type: "normal",
        arg: t.call(e, r)
      };
    } catch (t) {
      return {
        type: "throw",
        arg: t
      };
    }
  }
  e.wrap = wrap;
  var h = "suspendedStart",
    l = "suspendedYield",
    f = "executing",
    s = "completed",
    y = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var p = {};
  define(p, a, function () {
    return this;
  });
  var d = Object.getPrototypeOf,
    v = d && d(d(values([])));
  v && v !== r && n.call(v, a) && (p = v);
  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
  function defineIteratorMethods(t) {
    ["next", "throw", "return"].forEach(function (e) {
      define(t, e, function (t) {
        return this._invoke(e, t);
      });
    });
  }
  function AsyncIterator(t, e) {
    function invoke(r, o, i, a) {
      var c = tryCatch(t[r], t, o);
      if ("throw" !== c.type) {
        var u = c.arg,
          h = u.value;
        return h && "object" == typeof h && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
          invoke("next", t, i, a);
        }, function (t) {
          invoke("throw", t, i, a);
        }) : e.resolve(h).then(function (t) {
          u.value = t, i(u);
        }, function (t) {
          return invoke("throw", t, i, a);
        });
      }
      a(c.arg);
    }
    var r;
    o(this, "_invoke", {
      value: function (t, n) {
        function callInvokeWithMethodAndArg() {
          return new e(function (e, r) {
            invoke(t, n, e, r);
          });
        }
        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(e, r, n) {
    var o = h;
    return function (i, a) {
      if (o === f) throw Error("Generator is already running");
      if (o === s) {
        if ("throw" === i) throw a;
        return {
          value: t,
          done: !0
        };
      }
      for (n.method = i, n.arg = a;;) {
        var c = n.delegate;
        if (c) {
          var u = maybeInvokeDelegate(c, n);
          if (u) {
            if (u === y) continue;
            return u;
          }
        }
        if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
          if (o === h) throw o = s, n.arg;
          n.dispatchException(n.arg);
        } else "return" === n.method && n.abrupt("return", n.arg);
        o = f;
        var p = tryCatch(e, r, n);
        if ("normal" === p.type) {
          if (o = n.done ? s : l, p.arg === y) continue;
          return {
            value: p.arg,
            done: n.done
          };
        }
        "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
      }
    };
  }
  function maybeInvokeDelegate(e, r) {
    var n = r.method,
      o = e.iterator[n];
    if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
    var i = tryCatch(o, e.iterator, r.arg);
    if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
    var a = i.arg;
    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
  }
  function pushTryEntry(t) {
    var e = {
      tryLoc: t[0]
    };
    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
  }
  function resetTryEntry(t) {
    var e = t.completion || {};
    e.type = "normal", delete e.arg, t.completion = e;
  }
  function Context(t) {
    this.tryEntries = [{
      tryLoc: "root"
    }], t.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(e) {
    if (e || "" === e) {
      var r = e[a];
      if (r) return r.call(e);
      if ("function" == typeof e.next) return e;
      if (!isNaN(e.length)) {
        var o = -1,
          i = function next() {
            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
            return next.value = t, next.done = !0, next;
          };
        return i.next = i;
      }
    }
    throw new TypeError(typeof e + " is not iterable");
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), o(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
    var e = "function" == typeof t && t.constructor;
    return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
  }, e.mark = function (t) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
  }, e.awrap = function (t) {
    return {
      __await: t
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
    return this;
  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
    void 0 === i && (i = Promise);
    var a = new AsyncIterator(wrap(t, r, n, o), i);
    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
      return t.done ? t.value : a.next();
    });
  }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
    return this;
  }), define(g, "toString", function () {
    return "[object Generator]";
  }), e.keys = function (t) {
    var e = Object(t),
      r = [];
    for (var n in e) r.push(n);
    return r.reverse(), function next() {
      for (; r.length;) {
        var t = r.pop();
        if (t in e) return next.value = t, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, e.values = values, Context.prototype = {
    constructor: Context,
    reset: function (e) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
    },
    stop: function () {
      this.done = !0;
      var t = this.tryEntries[0].completion;
      if ("throw" === t.type) throw t.arg;
      return this.rval;
    },
    dispatchException: function (e) {
      if (this.done) throw e;
      var r = this;
      function handle(n, o) {
        return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
      }
      for (var o = this.tryEntries.length - 1; o >= 0; --o) {
        var i = this.tryEntries[o],
          a = i.completion;
        if ("root" === i.tryLoc) return handle("end");
        if (i.tryLoc <= this.prev) {
          var c = n.call(i, "catchLoc"),
            u = n.call(i, "finallyLoc");
          if (c && u) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          } else if (c) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
          } else {
            if (!u) throw Error("try statement without catch or finally");
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          }
        }
      }
    },
    abrupt: function (t, e) {
      for (var r = this.tryEntries.length - 1; r >= 0; --r) {
        var o = this.tryEntries[r];
        if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
          var i = o;
          break;
        }
      }
      i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
      var a = i ? i.completion : {};
      return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
    },
    complete: function (t, e) {
      if ("throw" === t.type) throw t.arg;
      return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
    },
    finish: function (t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
      }
    },
    catch: function (t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.tryLoc === t) {
          var n = r.completion;
          if ("throw" === n.type) {
            var o = n.arg;
            resetTryEntry(r);
          }
          return o;
        }
      }
      throw Error("illegal catch attempt");
    },
    delegateYield: function (e, r, n) {
      return this.delegate = {
        iterator: values(e),
        resultName: r,
        nextLoc: n
      }, "next" === this.method && (this.arg = t), y;
    }
  }, e;
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _wrapAsyncGenerator(e) {
  return function () {
    return new AsyncGenerator(e.apply(this, arguments));
  };
}
function AsyncGenerator(e) {
  var r, t;
  function resume(r, t) {
    try {
      var n = e[r](t),
        o = n.value,
        u = o instanceof _OverloadYield;
      Promise.resolve(u ? o.v : o).then(function (t) {
        if (u) {
          var i = "return" === r ? "return" : "next";
          if (!o.k || t.done) return resume(i, t);
          t = e[i](t).value;
        }
        settle(n.done ? "return" : "normal", t);
      }, function (e) {
        resume("throw", e);
      });
    } catch (e) {
      settle("throw", e);
    }
  }
  function settle(e, n) {
    switch (e) {
      case "return":
        r.resolve({
          value: n,
          done: !0
        });
        break;
      case "throw":
        r.reject(n);
        break;
      default:
        r.resolve({
          value: n,
          done: !1
        });
    }
    (r = r.next) ? resume(r.key, r.arg) : t = null;
  }
  this._invoke = function (e, n) {
    return new Promise(function (o, u) {
      var i = {
        key: e,
        arg: n,
        resolve: o,
        reject: u,
        next: null
      };
      t ? t = t.next = i : (r = t = i, resume(e, n));
    });
  }, "function" != typeof e.return && (this.return = void 0);
}
AsyncGenerator.prototype["function" == typeof Symbol && Symbol.asyncIterator || "@@asyncIterator"] = function () {
  return this;
}, AsyncGenerator.prototype.next = function (e) {
  return this._invoke("next", e);
}, AsyncGenerator.prototype.throw = function (e) {
  return this._invoke("throw", e);
}, AsyncGenerator.prototype.return = function (e) {
  return this._invoke("return", e);
};

var MCPInternalActionIconSchema = /*#__PURE__*/zod.z["enum"](["ActionBrainIcon", "ActionCloudArrowLeftRightIcon", "ActionDocumentTextIcon", "ActionEmotionLaughIcon", "ActionGitBranchIcon", "ActionGlobeAltIcon", "ActionImageIcon", "ActionLightbulbIcon", "ActionLockIcon", "ActionMagnifyingGlassIcon", "ActionRobotIcon", "ActionScanIcon", "ActionTableIcon", "ActionTimeIcon", "CommandLineIcon", "GcalLogo", "GmailLogo", "GithubLogo", "GoogleSpreadsheetLogo", "HubspotLogo", "FreshserviceLogo", "MondayLogo", "OutlookLogo", "JiraLogo", "LinearLogo", "NotionLogo", "SalesforceLogo", "SlackLogo", "StripeLogo"]);
var MCPExternalActionIconSchema = /*#__PURE__*/zod.z["enum"](["ActionArmchairIcon", "ActionArrowDownOnSquareIcon", "ActionArrowUpOnSquareIcon", "ActionAttachmentIcon", "ActionBankIcon", "ActionBarcodeIcon", "ActionBeerIcon", "ActionBookOpenIcon", "ActionBracesIcon", "ActionBrainIcon", "ActionBriefcaseIcon", "ActionBuildingIcon", "ActionCalculatorIcon", "ActionCalendarIcon", "ActionCalendarCheckIcon", "ActionCameraIcon", "ActionCarIcon", "ActionCardIcon", "ActionCheckCircleIcon", "ActionClipboardIcon", "ActionCloudArrowDownIcon", "ActionCloudArrowLeftRightIcon", "ActionCloudArrowUpIcon", "ActionCodeBlockIcon", "ActionCodeBoxIcon", "ActionCommandIcon", "ActionCommand1Icon", "ActionCommunityIcon", "ActionCompanyIcon", "ActionCubeIcon", "ActionCupIcon", "ActionCustomerServiceIcon", "ActionDashboardIcon", "ActionDatabaseIcon", "ActionDocumentIcon", "ActionDocumentPileIcon", "ActionDocumentPlusIcon", "ActionDocumentTextIcon", "ActionDoubleQuotesIcon", "ActionEmotionLaughIcon", "ActionExternalLinkIcon", "ActionEyeIcon", "ActionEyeSlashIcon", "ActionFilmIcon", "ActionFilterIcon", "ActionFingerprintIcon", "ActionFireIcon", "ActionFlagIcon", "ActionFlightLandIcon", "ActionFlightTakeoffIcon", "ActionFolderIcon", "ActionFolderAddIcon", "ActionFolderOpenIcon", "ActionFullscreenIcon", "ActionFullscreenExitIcon", "ActionGamepadIcon", "ActionGitBranchIcon", "ActionGitForkIcon", "ActionGlobeIcon", "ActionGlobeAltIcon", "ActionGraduationCapIcon", "ActionHandHeartIcon", "ActionHandThumbDownIcon", "ActionHandThumbUpIcon", "ActionHeartIcon", "ActionHomeIcon", "ActionHospitalIcon", "ActionImageIcon", "ActionInboxIcon", "ActionIncludeIcon", "ActionLayoutIcon", "ActionLightbulbIcon", "ActionListIcon", "ActionListCheckIcon", "ActionLockIcon", "ActionLogoutIcon", "ActionMagicIcon", "ActionMagnifyingGlassIcon", "ActionMailIcon", "ActionMailAiIcon", "ActionMailCloseIcon", "ActionMapIcon", "ActionMapPinIcon", "ActionMarkPenIcon", "ActionMedalIcon", "ActionMegaphoneIcon", "ActionMenuIcon", "ActionMicIcon", "ActionMoonIcon", "ActionMovieIcon", "ActionNumbersIcon", "ActionPaintIcon", "ActionPencilSquareIcon", "ActionPieChartIcon", "ActionPinDistanceIcon", "ActionPingPongIcon", "ActionPlanetIcon", "ActionPlusIcon", "ActionPlusCircleIcon", "ActionPrinterIcon", "ActionPushpinIcon", "ActionRainbowIcon", "ActionRobotIcon", "ActionRocketIcon", "ActionSafeIcon", "ActionSaveIcon", "ActionScalesIcon", "ActionScanIcon", "ActionSeedlingIcon", "ActionServerIcon", "ActionShakeHandsIcon", "ActionShipIcon", "ActionShirtIcon", "ActionShoppingBasketIcon", "ActionSlideshowIcon", "ActionSparklesIcon", "ActionSquare3Stack3DIcon", "ActionStopSignIcon", "ActionStoreIcon", "ActionSunIcon", "ActionSwordIcon", "ActionTableIcon", "ActionTagIcon", "ActionTestTubeIcon", "ActionTimeIcon", "ActionTrainIcon", "ActionTranslateIcon", "ActionTrashIcon", "ActionTrophyIcon", "ActionTShirtIcon", "ActionUmbrellaIcon", "ActionUserIcon", "ActionUserGroupIcon", "ActionVidiconIcon", "ActionVolumeUpIcon", "ActionXCircleIcon"]);

/**
 * This function generates mime types for a given provider and resource types.
 * The mime types are in the format `application/vnd.dust.PROVIDER.RESOURCE_TYPE`.
 * Notes:
 * - The underscores in the provider name are stripped in the generated mime type.
 * - The underscores in the resource type are replaced with dashes in the generated mime type.
 */
function generateConnectorRelativeMimeTypes(_ref) {
  var provider = _ref.provider,
    resourceTypes = _ref.resourceTypes;
  return resourceTypes.reduce(function (acc, s) {
    var _extends2;
    return _extends({}, acc, (_extends2 = {}, _extends2[s] = "application/vnd.dust." + provider.replace("_", "") + "." + s.replace("_", "-").toLowerCase(), _extends2));
  }, {});
}
// Mime type that represents a datasource.
var DATA_SOURCE_MIME_TYPE = "application/vnd.dust.datasource";
// Mime type that represents a data warehouse, like Snowflake or BigQuery.
var DATA_WAREHOUSE_MIME_TYPE = "application/vnd.dust.data-warehouse";
var DATA_SOURCE_FOLDER_SPREADSHEET_MIME_TYPE = "application/vnd.dust.folder.spreadsheet";
var CONTENT_NODE_MIME_TYPES = {
  GENERIC: {
    DATA_SOURCE: DATA_SOURCE_MIME_TYPE,
    DATA_WAREHOUSE: DATA_WAREHOUSE_MIME_TYPE
  },
  FOLDER: {
    SPREADSHEET: DATA_SOURCE_FOLDER_SPREADSHEET_MIME_TYPE
  },
  CONFLUENCE: /*#__PURE__*/generateConnectorRelativeMimeTypes({
    provider: "confluence",
    resourceTypes: ["FOLDER", "PAGE", "SPACE"]
  }),
  GITHUB: /*#__PURE__*/generateConnectorRelativeMimeTypes({
    provider: "github",
    resourceTypes: ["REPOSITORY", "CODE_ROOT", "CODE_DIRECTORY", "CODE_FILE",
    // ISSUES is the folder containing all issues.
    "ISSUES",
    // ISSUE is a single issue.
    "ISSUE",
    // DISCUSSIONS is the folder containing all discussions.
    "DISCUSSIONS",
    // DISCUSSION is a single discussion.
    "DISCUSSION"]
  }),
  GOOGLE_DRIVE: /*#__PURE__*/generateConnectorRelativeMimeTypes({
    provider: "google_drive",
    // Spreadsheets may contain many sheets, thus resemble folders and are stored as such, but with
    // the special mimeType below.  For files and sheets, we keep Google's mime types.
    resourceTypes: ["SHARED_WITH_ME", "FOLDER", "SPREADSHEET"]
  }),
  INTERCOM: /*#__PURE__*/generateConnectorRelativeMimeTypes({
    provider: "intercom",
    resourceTypes: ["COLLECTION", "TEAMS_FOLDER", "CONVERSATION", "TEAM", "ARTICLE", "HELP_CENTER"]
  }),
  MICROSOFT: /*#__PURE__*/generateConnectorRelativeMimeTypes({
    provider: "microsoft",
    // Spreadsheets may contain many sheets, thus resemble folders and are
    // stored as such, but with the special mimeType below.
    // For files and sheets, we keep Microsoft's mime types.
    resourceTypes: ["FOLDER", "SPREADSHEET"]
  }),
  NOTION: /*#__PURE__*/generateConnectorRelativeMimeTypes({
    provider: "notion",
    resourceTypes: ["UNKNOWN_FOLDER", "SYNCING_FOLDER", "DATABASE", "PAGE"]
  }),
  SLACK: /*#__PURE__*/generateConnectorRelativeMimeTypes({
    provider: "slack",
    resourceTypes: ["CHANNEL", "THREAD", "MESSAGES"]
  }),
  SNOWFLAKE: /*#__PURE__*/generateConnectorRelativeMimeTypes({
    provider: "snowflake",
    resourceTypes: ["DATABASE", "SCHEMA", "TABLE"]
  }),
  WEBCRAWLER: /*#__PURE__*/generateConnectorRelativeMimeTypes({
    provider: "webcrawler",
    resourceTypes: ["FOLDER"] // pages are upserted as text/html, not an internal mime type
  }),
  ZENDESK: /*#__PURE__*/generateConnectorRelativeMimeTypes({
    provider: "zendesk",
    resourceTypes: ["BRAND", "HELP_CENTER", "CATEGORY", "ARTICLE",
    // TICKETS is the folder containing all tickets.
    "TICKETS",
    // TICKET is a single ticket.
    "TICKET"]
  }),
  BIGQUERY: /*#__PURE__*/generateConnectorRelativeMimeTypes({
    provider: "bigquery",
    resourceTypes: ["DATABASE", "SCHEMA", "TABLE"]
  }),
  SALESFORCE: /*#__PURE__*/generateConnectorRelativeMimeTypes({
    provider: "salesforce",
    resourceTypes: ["SYNCED_QUERY_FOLDER"]
  }),
  GONG: /*#__PURE__*/generateConnectorRelativeMimeTypes({
    provider: "gong",
    resourceTypes: ["TRANSCRIPT", "TRANSCRIPT_FOLDER"]
  })
};
var INCLUDABLE_INTERNAL_CONTENT_NODE_MIME_TYPES = {
  CONFLUENCE: [CONTENT_NODE_MIME_TYPES.CONFLUENCE.PAGE],
  GITHUB: [CONTENT_NODE_MIME_TYPES.GITHUB.ISSUE, CONTENT_NODE_MIME_TYPES.GITHUB.DISCUSSION],
  GOOGLE_DRIVE: [],
  INTERCOM: [CONTENT_NODE_MIME_TYPES.INTERCOM.CONVERSATION, CONTENT_NODE_MIME_TYPES.INTERCOM.ARTICLE],
  MICROSOFT: [],
  NOTION: [CONTENT_NODE_MIME_TYPES.NOTION.PAGE],
  SLACK: [CONTENT_NODE_MIME_TYPES.SLACK.THREAD, CONTENT_NODE_MIME_TYPES.SLACK.MESSAGES],
  SNOWFLAKE: [],
  WEBCRAWLER: [],
  ZENDESK: [CONTENT_NODE_MIME_TYPES.ZENDESK.TICKET, CONTENT_NODE_MIME_TYPES.ZENDESK.ARTICLE],
  BIGQUERY: [],
  SALESFORCE: [],
  GONG: []
};
function generateToolMimeTypes(_ref2) {
  var category = _ref2.category,
    resourceTypes = _ref2.resourceTypes;
  return resourceTypes.reduce(function (acc, s) {
    var _extends3;
    return _extends({}, acc, (_extends3 = {}, _extends3[s] = "application/vnd.dust." + category.replace(/_/g, "-").toLowerCase() + "." + s.replace(/_/g, "-").toLowerCase(), _extends3));
  }, {});
}
var TOOL_MIME_TYPES = {
  TOOL_INPUT: /*#__PURE__*/generateToolMimeTypes({
    category: "TOOL_INPUT",
    resourceTypes: ["DATA_SOURCE", "DATA_WAREHOUSE", "TABLE", "AGENT", "STRING", "NUMBER", "BOOLEAN", "ENUM", "LIST", "REASONING_MODEL", "DUST_APP", "NULLABLE_TIME_FRAME", "JSON_SCHEMA"]
  }),
  TOOL_OUTPUT: /*#__PURE__*/generateToolMimeTypes({
    category: "TOOL_OUTPUT",
    resourceTypes: ["BROWSE_RESULT", "DATA_SOURCE_SEARCH_QUERY", "DATA_SOURCE_SEARCH_RESULT", "FILESYSTEM_PATH", "DATA_SOURCE_NODE_LIST", "DATA_SOURCE_NODE_CONTENT", "DATA_SOURCE_INCLUDE_QUERY", "DATA_SOURCE_INCLUDE_RESULT", "EXTRACT_QUERY", "EXTRACT_RESULT",
    // File generated by the tool.
    "FILE",
    // Final output of the reasoning when successful with the non-CoT tokens.
    "REASONING_SUCCESS",
    // Content of a SQL query formulated by the model.
    "SQL_QUERY",
    // Error when executing a query.
    "EXECUTE_TABLES_QUERY_ERROR",
    // Generic thinking tokens.
    "THINKING", "DATABASE_SCHEMA", "QUERY_WRITING_INSTRUCTIONS", "EXAMPLE_ROWS", "TOOL_MARKER", "WEBSEARCH_QUERY", "WEBSEARCH_RESULT", "RUN_AGENT_RESULT", "RUN_AGENT_QUERY", "WARNING", "AGENT_CREATION_RESULT", "TOOLSET_LIST_RESULT", "TOOLSET_DESCRIBE_RESULT",
    // Legacy, kept for backwards compatibility.
    "GET_DATABASE_SCHEMA_MARKER", "EXECUTE_TABLES_QUERY_MARKER"]
  })
};
var INTERNAL_MIME_TYPES = /*#__PURE__*/_extends({}, CONTENT_NODE_MIME_TYPES, TOOL_MIME_TYPES);
var INTERNAL_MIME_TYPES_VALUES = /*#__PURE__*/Object.values(CONTENT_NODE_MIME_TYPES).flatMap(function (value) {
  return Object.values(value).map(function (v) {
    return v;
  });
});
var INCLUDABLE_INTERNAL_MIME_TYPES_VALUES = /*#__PURE__*/Object.values(INCLUDABLE_INTERNAL_CONTENT_NODE_MIME_TYPES).flatMap(function (value) {
  return Object.values(value).map(function (v) {
    return v;
  });
});
function isDustMimeType(mimeType) {
  return INTERNAL_MIME_TYPES_VALUES.includes(mimeType);
}
function isIncludableInternalMimeType(mimeType) {
  return INCLUDABLE_INTERNAL_MIME_TYPES_VALUES.includes(mimeType);
}

var BaseNotificationParamsSchema = /*#__PURE__*/zod.z.object({
  /**
   * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)
   * for notes on _meta usage.
   */
  _meta: zod.z.optional(zod.z.object({}).passthrough())
}).passthrough();
var NotificationSchema = /*#__PURE__*/zod.z.object({
  method: /*#__PURE__*/zod.z.string(),
  params: /*#__PURE__*/zod.z.optional(BaseNotificationParamsSchema)
});
var ResultSchema = /*#__PURE__*/zod.z.object({
  /**
   * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)
   * for notes on _meta usage.
   */
  _meta: zod.z.optional(zod.z.object({}).passthrough())
}).passthrough();
/**
 * Error codes defined by the JSON-RPC specification.
 */
var ErrorCode;
(function (ErrorCode) {
  // SDK error codes
  ErrorCode[ErrorCode["ConnectionClosed"] = -32000] = "ConnectionClosed";
  ErrorCode[ErrorCode["RequestTimeout"] = -32001] = "RequestTimeout";
  // Standard JSON-RPC error codes
  ErrorCode[ErrorCode["ParseError"] = -32700] = "ParseError";
  ErrorCode[ErrorCode["InvalidRequest"] = -32600] = "InvalidRequest";
  ErrorCode[ErrorCode["MethodNotFound"] = -32601] = "MethodNotFound";
  ErrorCode[ErrorCode["InvalidParams"] = -32602] = "InvalidParams";
  ErrorCode[ErrorCode["InternalError"] = -32603] = "InternalError";
})(ErrorCode || (ErrorCode = {}));
/* Base Metadata */
/**
 * Base metadata interface for common properties across resources, tools, prompts, and implementations.
 */
var BaseMetadataSchema = /*#__PURE__*/zod.z.object({
  /** Intended for programmatic or logical use, but used as a display name in past specs or fallback */
  name: zod.z.string(),
  /**
   * Intended for UI and end-user contexts — optimized to be human-readable and easily understood,
   * even by those unfamiliar with domain-specific terminology.
   *
   * If not provided, the name should be used for display (except for Tool,
   * where `annotations.title` should be given precedence over using `name`,
   * if present).
   */
  title: zod.z.optional(zod.z.string())
}).passthrough();
/* Resources */
/**
 * The contents of a specific resource or sub-resource.
 */
var ResourceContentsSchema = /*#__PURE__*/zod.z.object({
  /**
   * The URI of this resource.
   */
  uri: zod.z.string(),
  /**
   * The MIME type of this resource, if known.
   */
  mimeType: zod.z.optional(zod.z.string()),
  /**
   * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)
   * for notes on _meta usage.
   */
  _meta: zod.z.optional(zod.z.object({}).passthrough())
}).passthrough();
var TextResourceContentsSchema = /*#__PURE__*/ResourceContentsSchema.extend({
  /**
   * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
   */
  text: /*#__PURE__*/zod.z.string()
});
/**
 * A Zod schema for validating Base64 strings that is more performant and
 * robust for very large inputs than the default regex-based check. It avoids
 * stack overflows by using the native `atob` function for validation.
 */
var Base64Schema = /*#__PURE__*/zod.z.string().refine(function (val) {
  try {
    // atob throws a DOMException if the string contains characters
    // that are not part of the Base64 character set.
    atob(val);
    return true;
  } catch (_unused) {
    return false;
  }
}, {
  message: "Invalid Base64 string"
});
var BlobResourceContentsSchema = /*#__PURE__*/ResourceContentsSchema.extend({
  /**
   * A base64-encoded string representing the binary data of the item.
   */
  blob: Base64Schema
});
/**
 * A known resource that the server is capable of reading.
 */
var ResourceSchema = /*#__PURE__*/BaseMetadataSchema.extend({
  /**
   * The URI of this resource.
   */
  uri: /*#__PURE__*/zod.z.string(),
  /**
   * A description of what this resource represents.
   *
   * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
   */
  description: /*#__PURE__*/zod.z.optional(/*#__PURE__*/zod.z.string()),
  /**
   * The MIME type of this resource, if known.
   */
  mimeType: /*#__PURE__*/zod.z.optional(/*#__PURE__*/zod.z.string()),
  /**
   * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)
   * for notes on _meta usage.
   */
  _meta: /*#__PURE__*/zod.z.optional(/*#__PURE__*/zod.z.object({}).passthrough())
});
/**
 * Text provided to or from an LLM.
 */
var TextContentSchema = /*#__PURE__*/zod.z.object({
  type: zod.z.literal("text"),
  /**
   * The text content of the message.
   */
  text: zod.z.string(),
  /**
   * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)
   * for notes on _meta usage.
   */
  _meta: zod.z.optional(zod.z.object({}).passthrough())
}).passthrough();
/**
 * An image provided to or from an LLM.
 */
var ImageContentSchema = /*#__PURE__*/zod.z.object({
  type: zod.z.literal("image"),
  /**
   * The base64-encoded image data.
   */
  data: Base64Schema,
  /**
   * The MIME type of the image. Different providers may support different image types.
   */
  mimeType: zod.z.string(),
  /**
   * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)
   * for notes on _meta usage.
   */
  _meta: zod.z.optional(zod.z.object({}).passthrough())
}).passthrough();
/**
 * An Audio provided to or from an LLM.
 */
var AudioContentSchema = /*#__PURE__*/zod.z.object({
  type: zod.z.literal("audio"),
  /**
   * The base64-encoded audio data.
   */
  data: Base64Schema,
  /**
   * The MIME type of the audio. Different providers may support different audio types.
   */
  mimeType: zod.z.string(),
  /**
   * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)
   * for notes on _meta usage.
   */
  _meta: zod.z.optional(zod.z.object({}).passthrough())
}).passthrough();
/**
 * The contents of a resource, embedded into a prompt or tool call result.
 */
var EmbeddedResourceSchema = /*#__PURE__*/zod.z.object({
  type: zod.z.literal("resource"),
  resource: zod.z.union([TextResourceContentsSchema, BlobResourceContentsSchema]),
  /**
   * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)
   * for notes on _meta usage.
   */
  _meta: zod.z.optional(zod.z.object({}).passthrough())
}).passthrough();
/**
 * A resource that the server is capable of reading, included in a prompt or tool call result.
 *
 * Note: resource links returned by tools are not guaranteed to appear in the results of `resources/list` requests.
 */
var ResourceLinkSchema = /*#__PURE__*/ResourceSchema.extend({
  type: /*#__PURE__*/zod.z.literal("resource_link")
});
/**
 * A content block that can be used in prompts and tool results.
 */
var ContentBlockSchema = /*#__PURE__*/zod.z.union([TextContentSchema, ImageContentSchema, AudioContentSchema, ResourceLinkSchema, EmbeddedResourceSchema]);
/**
 * The server's response to a tool call.
 */
var CallToolResultSchema = /*#__PURE__*/ResultSchema.extend({
  /**
   * A list of content objects that represent the result of the tool call.
   *
   * If the Tool does not define an outputSchema, this field MUST be present in the result.
   * For backwards compatibility, this field is always present, but it may be empty.
   */
  content: /*#__PURE__*/zod.z.array(ContentBlockSchema)["default"]([]),
  /**
   * An object containing structured tool output.
   *
   * If the Tool defines an outputSchema, this field MUST be present in the result, and contain a JSON object that matches the schema.
   */
  structuredContent: /*#__PURE__*/zod.z.object({}).passthrough().optional(),
  /**
   * Whether the tool call ended in an error.
   *
   * If not set, this is assumed to be false (the call was successful).
   *
   * Any errors that originate from the tool SHOULD be reported inside the result
   * object, with `isError` set to true, _not_ as an MCP protocol-level error
   * response. Otherwise, the LLM would not be able to see that an error occurred
   * and self-correct.
   *
   * However, any errors in _finding_ the tool, an error indicating that the
   * server does not support tool calls, or any other exceptional conditions,
   * should be reported as an MCP error response.
   */
  isError: /*#__PURE__*/zod.z.optional(/*#__PURE__*/zod.z["boolean"]())
});

// File generated by the tool during its execution.
var ToolGeneratedFileSchema = /*#__PURE__*/zod.z.object({
  text: /*#__PURE__*/zod.z.string(),
  uri: /*#__PURE__*/zod.z.string(),
  mimeType: /*#__PURE__*/zod.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.FILE),
  fileId: /*#__PURE__*/zod.z.string(),
  title: /*#__PURE__*/zod.z.string(),
  contentType: /*#__PURE__*/zod.z.string(),
  snippet: /*#__PURE__*/zod.z.string().nullable()
});
function isToolGeneratedFile(outputBlock) {
  return outputBlock.type === "resource" && ToolGeneratedFileSchema.safeParse(outputBlock.resource).success;
}
// Thinking tokens generated during the tool execution.
var ThinkingOutputSchema = /*#__PURE__*/zod.z.object({
  mimeType: /*#__PURE__*/zod.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.THINKING),
  text: /*#__PURE__*/zod.z.string(),
  uri: /*#__PURE__*/zod.z.literal("")
});
function isThinkingOutput(outputBlock) {
  return outputBlock.type === "resource" && ThinkingOutputSchema.safeParse(outputBlock.resource).success;
}
// Final output of the reasoning when successful with the non-CoT tokens.
var ReasoningSuccessOutputSchema = /*#__PURE__*/zod.z.object({
  mimeType: /*#__PURE__*/zod.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.REASONING_SUCCESS),
  text: /*#__PURE__*/zod.z.string(),
  uri: /*#__PURE__*/zod.z.literal("")
});
function isReasoningSuccessOutput(outputBlock) {
  return outputBlock.type === "resource" && ReasoningSuccessOutputSchema.safeParse(outputBlock.resource).success;
}
// SQL query generated during the tool execution.
var SqlQueryOutputSchema = /*#__PURE__*/zod.z.object({
  mimeType: /*#__PURE__*/zod.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.SQL_QUERY),
  text: /*#__PURE__*/zod.z.string(),
  uri: /*#__PURE__*/zod.z.literal("")
});
function isSqlQueryOutput(outputBlock) {
  return outputBlock.type === "resource" && SqlQueryOutputSchema.safeParse(outputBlock.resource).success;
}
var isResourceWithName = function isResourceWithName(resource) {
  return "name" in resource && typeof resource.name === "string";
};
var DatabaseSchemaResourceSchema = /*#__PURE__*/zod.z.object({
  mimeType: /*#__PURE__*/zod.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.DATABASE_SCHEMA),
  text: /*#__PURE__*/zod.z.string(),
  uri: /*#__PURE__*/zod.z.string()
});
var isDatabaseSchemaResourceType = function isDatabaseSchemaResourceType(outputBlock) {
  return outputBlock.type === "resource" && DatabaseSchemaResourceSchema.safeParse(outputBlock.resource).success;
};
var QueryWritingInstructionsResourceSchema = /*#__PURE__*/zod.z.object({
  mimeType: /*#__PURE__*/zod.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.QUERY_WRITING_INSTRUCTIONS),
  text: /*#__PURE__*/zod.z.string(),
  uri: /*#__PURE__*/zod.z.string()
});
var isQueryWritingInstructionsResourceType = function isQueryWritingInstructionsResourceType(outputBlock) {
  return outputBlock.type === "resource" && QueryWritingInstructionsResourceSchema.safeParse(outputBlock.resource).success;
};
var ExampleRowsResourceSchema = /*#__PURE__*/zod.z.object({
  mimeType: /*#__PURE__*/zod.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.EXAMPLE_ROWS),
  text: /*#__PURE__*/zod.z.string(),
  uri: /*#__PURE__*/zod.z.string()
});
var isExampleRowsResourceType = function isExampleRowsResourceType(outputBlock) {
  return outputBlock.type === "resource" && ExampleRowsResourceSchema.safeParse(outputBlock.resource).success;
};
// Data source search outputs: query and results.
var SearchQueryResourceSchema = /*#__PURE__*/zod.z.object({
  mimeType: /*#__PURE__*/zod.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.DATA_SOURCE_SEARCH_QUERY),
  text: /*#__PURE__*/zod.z.string(),
  uri: /*#__PURE__*/zod.z.literal("")
});
var isSearchQueryResourceType = function isSearchQueryResourceType(outputBlock) {
  return outputBlock.type === "resource" && SearchQueryResourceSchema.safeParse(outputBlock.resource).success;
};
var SearchResultResourceSchema = /*#__PURE__*/zod.z.object({
  mimeType: /*#__PURE__*/zod.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.DATA_SOURCE_SEARCH_RESULT),
  uri: /*#__PURE__*/zod.z.string(),
  text: /*#__PURE__*/zod.z.string(),
  // Document metadata
  id: /*#__PURE__*/zod.z.string(),
  tags: /*#__PURE__*/zod.z.array(/*#__PURE__*/zod.z.string()),
  ref: /*#__PURE__*/zod.z.string(),
  chunks: /*#__PURE__*/zod.z.array(/*#__PURE__*/zod.z.string()),
  source: /*#__PURE__*/zod.z.object({
    provider: /*#__PURE__*/zod.z.string().optional()
  })
});
var isSearchResultResourceType = function isSearchResultResourceType(outputBlock) {
  return outputBlock.type === "resource" && SearchResultResourceSchema.safeParse(outputBlock.resource).success;
};
// Data source inclusion outputs, query and results
var IncludeQueryResourceSchema = /*#__PURE__*/zod.z.object({
  mimeType: /*#__PURE__*/zod.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.DATA_SOURCE_INCLUDE_QUERY),
  text: /*#__PURE__*/zod.z.string(),
  uri: /*#__PURE__*/zod.z.literal("")
});
var isIncludeQueryResourceType = function isIncludeQueryResourceType(outputBlock) {
  return outputBlock.type === "resource" && IncludeQueryResourceSchema.safeParse(outputBlock.resource).success;
};
var WarningResourceSchema = /*#__PURE__*/zod.z.object({
  mimeType: /*#__PURE__*/zod.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.WARNING),
  warningTitle: /*#__PURE__*/zod.z.string(),
  text: /*#__PURE__*/zod.z.string(),
  warningData: /*#__PURE__*/zod.z.record(zod.z.string(), zod.z.unknown()).optional(),
  uri: /*#__PURE__*/zod.z.literal("")
});
var isWarningResourceType = function isWarningResourceType(outputBlock) {
  return outputBlock.type === "resource" && WarningResourceSchema.safeParse(outputBlock.resource).success;
};
var IncludeResultResourceSchema = /*#__PURE__*/zod.z.object({
  mimeType: /*#__PURE__*/zod.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.DATA_SOURCE_INCLUDE_RESULT),
  uri: /*#__PURE__*/zod.z.string(),
  text: /*#__PURE__*/zod.z.string(),
  // Document metadata
  id: /*#__PURE__*/zod.z.string(),
  tags: /*#__PURE__*/zod.z.array(/*#__PURE__*/zod.z.string()),
  ref: /*#__PURE__*/zod.z.string(),
  chunks: /*#__PURE__*/zod.z.array(/*#__PURE__*/zod.z.string()),
  source: /*#__PURE__*/zod.z.object({
    name: /*#__PURE__*/zod.z.string(),
    provider: /*#__PURE__*/zod.z.string().optional()
  })
});
var isIncludeResultResourceType = function isIncludeResultResourceType(outputBlock) {
  return outputBlock.type === "resource" && IncludeResultResourceSchema.safeParse(outputBlock.resource).success;
};
// Websearch results.
var WebsearchQueryResourceSchema = /*#__PURE__*/zod.z.object({
  mimeType: /*#__PURE__*/zod.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.WEBSEARCH_QUERY),
  text: /*#__PURE__*/zod.z.string(),
  uri: /*#__PURE__*/zod.z.literal("")
});
var isWebsearchQueryResourceType = function isWebsearchQueryResourceType(outputBlock) {
  return outputBlock.type === "resource" && WebsearchQueryResourceSchema.safeParse(outputBlock.resource).success;
};
var WebsearchResultResourceSchema = /*#__PURE__*/zod.z.object({
  mimeType: /*#__PURE__*/zod.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.WEBSEARCH_RESULT),
  title: /*#__PURE__*/zod.z.string(),
  text: /*#__PURE__*/zod.z.string(),
  uri: /*#__PURE__*/zod.z.string(),
  reference: /*#__PURE__*/zod.z.string()
});
var isWebsearchResultResourceType = function isWebsearchResultResourceType(outputBlock) {
  return outputBlock.type === "resource" && WebsearchResultResourceSchema.safeParse(outputBlock.resource).success;
};
// Browse results.
var BrowseResultResourceSchema = /*#__PURE__*/zod.z.object({
  mimeType: /*#__PURE__*/zod.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.BROWSE_RESULT),
  requestedUrl: /*#__PURE__*/zod.z.string(),
  uri: /*#__PURE__*/zod.z.string(),
  // Browsed url, might differ from the requested url
  text: /*#__PURE__*/zod.z.string(),
  title: /*#__PURE__*/zod.z.string().optional(),
  description: /*#__PURE__*/zod.z.string().optional(),
  responseCode: /*#__PURE__*/zod.z.string(),
  errorMessage: /*#__PURE__*/zod.z.string().optional()
});
var isBrowseResultResourceType = function isBrowseResultResourceType(outputBlock) {
  return outputBlock.type === "resource" && BrowseResultResourceSchema.safeParse(outputBlock.resource).success;
};
// RunAgent results.
var RunAgentQueryResourceSchema = /*#__PURE__*/zod.z.object({
  mimeType: /*#__PURE__*/zod.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.RUN_AGENT_QUERY),
  text: /*#__PURE__*/zod.z.string(),
  childAgentId: /*#__PURE__*/zod.z.string(),
  uri: /*#__PURE__*/zod.z.literal("")
});
var isRunAgentQueryResourceType = function isRunAgentQueryResourceType(outputBlock) {
  return outputBlock.type === "resource" && RunAgentQueryResourceSchema.safeParse(outputBlock.resource).success;
};
var RunAgentResultResourceSchema = /*#__PURE__*/zod.z.object({
  mimeType: /*#__PURE__*/zod.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.RUN_AGENT_RESULT),
  conversationId: /*#__PURE__*/zod.z.string(),
  text: /*#__PURE__*/zod.z.string(),
  uri: /*#__PURE__*/zod.z.string(),
  refs: /*#__PURE__*/zod.z.record(zod.z.string(), zod.z.object({
    description: zod.z.string().optional(),
    href: zod.z.string().optional(),
    title: zod.z.string(),
    provider: zod.z.string()
  })).optional()
});
var isRunAgentResultResourceType = function isRunAgentResultResourceType(outputBlock) {
  return outputBlock.type === "resource" && RunAgentResultResourceSchema.safeParse(outputBlock.resource).success;
};
// Toolsets results.
var ToolsetsResultResourceSchema = /*#__PURE__*/zod.z.object({
  mimeType: /*#__PURE__*/zod.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.TOOLSET_LIST_RESULT),
  text: /*#__PURE__*/zod.z.string(),
  uri: /*#__PURE__*/zod.z.literal(""),
  id: /*#__PURE__*/zod.z.string(),
  description: /*#__PURE__*/zod.z.string()
});
var isToolsetsResultResourceType = function isToolsetsResultResourceType(outputBlock) {
  return outputBlock.type === "resource" && ToolsetsResultResourceSchema.safeParse(outputBlock.resource).success;
};
// Extract data outputs: query and results.
var ExtractQueryResourceSchema = /*#__PURE__*/zod.z.object({
  mimeType: /*#__PURE__*/zod.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.EXTRACT_QUERY),
  text: /*#__PURE__*/zod.z.string(),
  uri: /*#__PURE__*/zod.z.literal("")
});
var isExtractQueryResourceType = function isExtractQueryResourceType(outputBlock) {
  return outputBlock.type === "resource" && ExtractQueryResourceSchema.safeParse(outputBlock.resource).success;
};
var ExtractResultResourceSchema = /*#__PURE__*/zod.z.object({
  mimeType: /*#__PURE__*/zod.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.EXTRACT_RESULT),
  uri: /*#__PURE__*/zod.z.string(),
  text: /*#__PURE__*/zod.z.string(),
  // File metadata
  fileId: /*#__PURE__*/zod.z.string(),
  title: /*#__PURE__*/zod.z.string(),
  contentType: /*#__PURE__*/zod.z.string(),
  snippet: /*#__PURE__*/zod.z.string().nullable()
});
var isExtractResultResourceType = function isExtractResultResourceType(outputBlock) {
  return outputBlock.type === "resource" && ExtractResultResourceSchema.safeParse(outputBlock.resource).success;
};
/**
 * Notification output types.
 */
// Image.
var NotificationImageContentSchema = /*#__PURE__*/zod.z.object({
  type: /*#__PURE__*/zod.z.literal("image"),
  mimeType: /*#__PURE__*/zod.z.string()
});
function isImageProgressOutput(output) {
  return output !== undefined && output.type === "image";
}
// Canvas file.
var NotificationCanvasFileContentSchema = /*#__PURE__*/zod.z.object({
  type: /*#__PURE__*/zod.z.literal("canvas_file"),
  fileId: /*#__PURE__*/zod.z.string(),
  mimeType: /*#__PURE__*/zod.z.string(),
  title: /*#__PURE__*/zod.z.string(),
  updatedAt: /*#__PURE__*/zod.z.string()
});
function isCanvasFileContentOutput(output) {
  return output !== undefined && output.type === "canvas_file";
}
var NotificationTextContentSchema = /*#__PURE__*/zod.z.object({
  type: /*#__PURE__*/zod.z.literal("text"),
  text: /*#__PURE__*/zod.z.string()
});
var NotificationRunAgentContentSchema = /*#__PURE__*/zod.z.object({
  type: /*#__PURE__*/zod.z.literal("run_agent"),
  childAgentId: /*#__PURE__*/zod.z.string(),
  conversationId: /*#__PURE__*/zod.z.string(),
  query: /*#__PURE__*/zod.z.string()
});
var ProgressNotificationOutputSchema = /*#__PURE__*/zod.z.union([NotificationImageContentSchema, NotificationCanvasFileContentSchema, NotificationRunAgentContentSchema, NotificationTextContentSchema]).optional();
var ProgressNotificationContentSchema = /*#__PURE__*/zod.z.object({
  // Required for the MCP protocol.
  progress: /*#__PURE__*/zod.z.number(),
  total: /*#__PURE__*/zod.z.number(),
  progressToken: /*#__PURE__*/zod.z.union([/*#__PURE__*/zod.z.string(), /*#__PURE__*/zod.z.number()]),
  // Custom data.
  data: /*#__PURE__*/zod.z.object({
    label: /*#__PURE__*/zod.z.string(),
    output: ProgressNotificationOutputSchema
  })
});
var MCPProgressNotificationSchema = /*#__PURE__*/NotificationSchema.extend({
  method: /*#__PURE__*/zod.z.literal("notifications/progress"),
  params: ProgressNotificationContentSchema
});
function isMCPProgressNotificationType(notification) {
  return MCPProgressNotificationSchema.safeParse(notification).success;
}

// Custom schema to get a string literal type and yet allow any string when parsing
var FlexibleEnumSchema = function FlexibleEnumSchema() {
  return zod.z.custom(function (val) {
    return typeof val === "string";
  });
};
var ModelProviderIdSchema = /*#__PURE__*/FlexibleEnumSchema();
var ModelLLMIdSchema = /*#__PURE__*/FlexibleEnumSchema();
var EmbeddingProviderIdSchema = /*#__PURE__*/FlexibleEnumSchema();
var ConnectorsAPIErrorTypeSchema = /*#__PURE__*/FlexibleEnumSchema();
var ConnectorsAPIErrorSchema = /*#__PURE__*/zod.z.object({
  type: ConnectorsAPIErrorTypeSchema,
  message: /*#__PURE__*/zod.z.string()
});
var ModelIdSchema = /*#__PURE__*/zod.z.number();
function isConnectorsAPIError(obj) {
  return typeof obj === "object" && obj !== null && "message" in obj && typeof obj.message === "string" && "type" in obj && typeof obj.type === "string" && ConnectorsAPIErrorSchema.safeParse(obj).success;
}
// Supported content types that are plain text and can be sent as file-less content fragment.
var supportedOtherFileFormats = {
  "application/msword": [".doc", ".docx"],
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document": [".doc", ".docx"],
  "application/vnd.ms-powerpoint": [".ppt", ".pptx"],
  "application/vnd.openxmlformats-officedocument.presentationml.presentation": [".ppt", ".pptx"],
  "application/vnd.google-apps.document": [],
  "application/vnd.google-apps.presentation": [],
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": [".xlsx"],
  "application/vnd.google-apps.spreadsheet": [],
  "application/vnd.ms-excel": [".xls"],
  "application/pdf": [".pdf"],
  "application/vnd.dust.section.json": [".json"],
  "text/comma-separated-values": [".csv"],
  "text/csv": [".csv"],
  "text/markdown": [".md", ".markdown"],
  "text/plain": [".txt", ".log", ".cfg", ".conf"],
  "text/tab-separated-values": [".tsv"],
  "text/tsv": [".tsv"],
  "text/vnd.dust.attachment.slack.thread": [".txt"],
  "text/html": [".html", ".htm", ".xhtml", ".xhtml+xml"],
  "text/xml": [".xml"],
  "text/calendar": [".ics"],
  "text/css": [".css"],
  "text/javascript": [".js", ".mjs", ".jsx"],
  "text/typescript": [".ts", ".tsx"],
  "application/json": [".json"],
  "application/xml": [".xml"],
  "application/x-sh": [".sh"],
  "text/x-sh": [".sh"],
  "text/x-python": [".py"],
  "text/x-python-script": [".py"],
  "application/x-yaml": [".yaml", ".yml"],
  "text/yaml": [".yaml", ".yml"],
  "text/vnd.yaml": [".yaml", ".yml"],
  "text/x-c": [".c", ".cc", ".cpp", ".cxx", ".dic", ".h", ".hh"],
  "text/x-csharp": [".cs"],
  "text/x-java-source": [".java"],
  "text/x-php": [".php"],
  "text/x-ruby": [".rb"],
  "text/x-sql": [".sql"],
  "text/x-swift": [".swift"],
  "text/x-rust": [".rs"],
  "text/x-go": [".go"],
  "text/x-kotlin": [".kt", ".kts"],
  "text/x-scala": [".scala"],
  "text/x-groovy": [".groovy"],
  "text/x-perl": [".pl", ".pm"],
  "text/x-perl-script": [".pl", ".pm"],
  "application/octet-stream": []
};
// Supported content types for images.
var supportedImageFileFormats = {
  "image/jpeg": [".jpg", ".jpeg"],
  "image/png": [".png"],
  "image/gif": [".gif"],
  "image/webp": [".webp"]
};
var supportedOtherContentTypes = /*#__PURE__*/Object.keys(supportedOtherFileFormats);
var supportedImageContentTypes = /*#__PURE__*/Object.keys(supportedImageFileFormats);
var supportedFileExtensions = /*#__PURE__*/[].concat(/*#__PURE__*/Object.keys(supportedOtherFileFormats), /*#__PURE__*/Object.keys(supportedImageFileFormats));
var supportedUploadableContentType = /*#__PURE__*/[].concat(supportedOtherContentTypes, supportedImageContentTypes);
var SupportedContentFragmentTypeSchema = /*#__PURE__*/FlexibleEnumSchema();
var SupportedFileContentFragmentTypeSchema = /*#__PURE__*/FlexibleEnumSchema();
function isSupportedFileContentType(contentType) {
  return supportedUploadableContentType.includes(contentType);
}
function isSupportedPlainTextContentType(contentType) {
  return supportedOtherContentTypes.includes(contentType);
}
function isSupportedImageContentType(contentType) {
  return supportedImageContentTypes.includes(contentType);
}
var UserMessageOriginSchema = /*#__PURE__*/FlexibleEnumSchema().or(zod.z["null"]()).or(/*#__PURE__*/zod.z.undefined());
var VisibilitySchema = /*#__PURE__*/FlexibleEnumSchema();
var Ok = /*#__PURE__*/function () {
  function Ok(value) {
    this.value = void 0;
    this.value = value;
  }
  var _proto = Ok.prototype;
  _proto.isOk = function isOk() {
    return true;
  };
  _proto.isErr = function isErr() {
    return false;
  };
  return Ok;
}();
var Err = /*#__PURE__*/function () {
  function Err(error) {
    this.error = void 0;
    this.error = error;
  }
  var _proto2 = Err.prototype;
  _proto2.isOk = function isOk() {
    return false;
  };
  _proto2.isErr = function isErr() {
    return true;
  };
  return Err;
}();
// Custom codec to validate the timezone
var Timezone = /*#__PURE__*/zod.z.string().refine(function (s) {
  return moment.tz.names().includes(s);
}, {
  message: "Invalid timezone"
});
var ConnectorProvidersSchema = /*#__PURE__*/FlexibleEnumSchema();
var isConnectorProvider = function isConnectorProvider(provider) {
  return ConnectorProvidersSchema.safeParse(provider).success;
};
var EditedByUserSchema = /*#__PURE__*/zod.z.object({
  editedAt: /*#__PURE__*/zod.z.number().nullable(),
  fullName: /*#__PURE__*/zod.z.string().nullable(),
  imageUrl: /*#__PURE__*/zod.z.string().nullable(),
  email: /*#__PURE__*/zod.z.string().nullable(),
  userId: /*#__PURE__*/zod.z.string().nullable()
});
var DataSourceTypeSchema = /*#__PURE__*/zod.z.object({
  id: ModelIdSchema,
  sId: /*#__PURE__*/zod.z.string(),
  createdAt: /*#__PURE__*/zod.z.number(),
  name: /*#__PURE__*/zod.z.string(),
  description: /*#__PURE__*/zod.z.string().nullable(),
  assistantDefaultSelected: /*#__PURE__*/zod.z["boolean"](),
  dustAPIProjectId: /*#__PURE__*/zod.z.string(),
  dustAPIDataSourceId: /*#__PURE__*/zod.z.string(),
  connectorId: /*#__PURE__*/zod.z.string().nullable(),
  connectorProvider: /*#__PURE__*/ConnectorProvidersSchema.nullable(),
  editedByUser: /*#__PURE__*/EditedByUserSchema.nullable().optional()
});
function isFolder(ds) {
  // If there is no connectorProvider, it's a folder.
  return !ds.connectorProvider;
}
function isWebsite(ds) {
  return ds.connectorProvider === "webcrawler";
}
var DataSourceViewCategoriesSchema = /*#__PURE__*/FlexibleEnumSchema();
var BlockTypeSchema = /*#__PURE__*/FlexibleEnumSchema();
var StatusSchema = /*#__PURE__*/zod.z["enum"](["running", "succeeded", "errored"]);
var BlockRunConfigSchema = /*#__PURE__*/zod.z.record(/*#__PURE__*/zod.z.any());
var BlockStatusSchema = /*#__PURE__*/zod.z.object({
  block_type: BlockTypeSchema,
  name: /*#__PURE__*/zod.z.string(),
  status: StatusSchema,
  success_count: /*#__PURE__*/zod.z.number(),
  error_count: /*#__PURE__*/zod.z.number()
});
var RunConfigSchema = /*#__PURE__*/zod.z.object({
  blocks: BlockRunConfigSchema
});
var TraceTypeSchema = /*#__PURE__*/zod.z.object({
  value: /*#__PURE__*/zod.z.unknown().nullable(),
  error: /*#__PURE__*/zod.z.string().nullable(),
  meta: /*#__PURE__*/zod.z.unknown().nullable()
});
var RunStatusSchema = /*#__PURE__*/zod.z.object({
  run: StatusSchema,
  blocks: /*#__PURE__*/zod.z.array(BlockStatusSchema)
});
var RunTypeSchema = /*#__PURE__*/zod.z.object({
  run_id: /*#__PURE__*/zod.z.string(),
  created: /*#__PURE__*/zod.z.number(),
  run_type: /*#__PURE__*/zod.z["enum"](["deploy", "local", "execute"]),
  app_hash: /*#__PURE__*/zod.z.string().nullable().optional(),
  specification_hash: /*#__PURE__*/zod.z.string().nullable().optional(),
  config: RunConfigSchema,
  status: RunStatusSchema,
  traces: /*#__PURE__*/zod.z.array(/*#__PURE__*/zod.z.tuple([/*#__PURE__*/zod.z.tuple([BlockTypeSchema, /*#__PURE__*/zod.z.string()]), /*#__PURE__*/zod.z.array(/*#__PURE__*/zod.z.array(TraceTypeSchema))])),
  results: /*#__PURE__*/zod.z.array(zod.z.array(zod.z.object({
    value: zod.z.unknown().nullable().optional(),
    error: zod.z.string().nullable().optional()
  }))).nullable().optional()
});
var TokensClassificationSchema = /*#__PURE__*/FlexibleEnumSchema();
var GenerationTokensEventSchema = /*#__PURE__*/zod.z.object({
  type: /*#__PURE__*/zod.z.literal("generation_tokens"),
  created: /*#__PURE__*/zod.z.number(),
  configurationId: /*#__PURE__*/zod.z.string(),
  messageId: /*#__PURE__*/zod.z.string(),
  text: /*#__PURE__*/zod.z.string(),
  classification: /*#__PURE__*/zod.z.union([TokensClassificationSchema, /*#__PURE__*/zod.z["enum"](["opening_delimiter", "closing_delimiter"])]),
  delimiterClassification: /*#__PURE__*/TokensClassificationSchema.nullable().optional()
});
var DataSourceViewKindSchema = /*#__PURE__*/FlexibleEnumSchema();
var DataSourceViewSchema = /*#__PURE__*/zod.z.object({
  category: DataSourceViewCategoriesSchema,
  createdAt: /*#__PURE__*/zod.z.number(),
  dataSource: DataSourceTypeSchema,
  editedByUser: /*#__PURE__*/EditedByUserSchema.nullable().optional(),
  id: ModelIdSchema,
  kind: DataSourceViewKindSchema,
  parentsIn: /*#__PURE__*/zod.z.array(zod.z.string()).nullable(),
  sId: /*#__PURE__*/zod.z.string(),
  updatedAt: /*#__PURE__*/zod.z.number(),
  spaceId: /*#__PURE__*/zod.z.string()
});
var RetrievalDocumentChunkTypeSchema = /*#__PURE__*/zod.z.object({
  offset: /*#__PURE__*/zod.z.number(),
  score: /*#__PURE__*/zod.z.number().nullable(),
  text: /*#__PURE__*/zod.z.string()
});
var RetrievalDocumentTypeSchema = /*#__PURE__*/zod.z.object({
  chunks: /*#__PURE__*/zod.z.array(RetrievalDocumentChunkTypeSchema),
  documentId: /*#__PURE__*/zod.z.string(),
  dataSourceView: /*#__PURE__*/DataSourceViewSchema.nullable(),
  id: ModelIdSchema,
  reference: /*#__PURE__*/zod.z.string(),
  score: /*#__PURE__*/zod.z.number().nullable(),
  sourceUrl: /*#__PURE__*/zod.z.string().nullable(),
  tags: /*#__PURE__*/zod.z.array(/*#__PURE__*/zod.z.string()),
  timestamp: /*#__PURE__*/zod.z.number()
});
var WhitelistableFeaturesSchema = /*#__PURE__*/FlexibleEnumSchema();
var WorkspaceSegmentationSchema = /*#__PURE__*/FlexibleEnumSchema().nullable();
var RoleSchema = /*#__PURE__*/zod.z["enum"](["admin", "builder", "user", "none"]);
var LightWorkspaceSchema = /*#__PURE__*/zod.z.object({
  id: ModelIdSchema,
  sId: /*#__PURE__*/zod.z.string(),
  name: /*#__PURE__*/zod.z.string(),
  role: RoleSchema,
  segmentation: WorkspaceSegmentationSchema,
  whiteListedProviders: /*#__PURE__*/ModelProviderIdSchema.array().nullable(),
  defaultEmbeddingProvider: /*#__PURE__*/EmbeddingProviderIdSchema.nullable()
});
var WorkspaceSchema = /*#__PURE__*/LightWorkspaceSchema.extend({
  ssoEnforced: /*#__PURE__*/zod.z["boolean"]().optional()
});
var ExtensionWorkspaceSchema = /*#__PURE__*/WorkspaceSchema.extend({
  blacklistedDomains: /*#__PURE__*/zod.z.array(zod.z.string()).nullable()
});
var UserProviderSchema = /*#__PURE__*/FlexibleEnumSchema().nullable();
var UserSchema = /*#__PURE__*/zod.z.object({
  sId: /*#__PURE__*/zod.z.string(),
  id: ModelIdSchema,
  createdAt: /*#__PURE__*/zod.z.number(),
  provider: UserProviderSchema,
  username: /*#__PURE__*/zod.z.string(),
  email: /*#__PURE__*/zod.z.string(),
  firstName: /*#__PURE__*/zod.z.string(),
  lastName: /*#__PURE__*/zod.z.string().nullable(),
  fullName: /*#__PURE__*/zod.z.string(),
  image: /*#__PURE__*/zod.z.string().nullable()
});
var WebsearchResultSchema = /*#__PURE__*/zod.z.object({
  title: /*#__PURE__*/zod.z.string(),
  snippet: /*#__PURE__*/zod.z.string(),
  link: /*#__PURE__*/zod.z.string(),
  reference: /*#__PURE__*/zod.z.string()
});
var MCPActionTypeSchema = /*#__PURE__*/zod.z.object({
  id: ModelIdSchema,
  mcpServerId: /*#__PURE__*/zod.z.string().nullable(),
  internalMCPServerName: /*#__PURE__*/zod.z.string().nullable(),
  agentMessageId: ModelIdSchema,
  functionCallName: /*#__PURE__*/zod.z.string().nullable(),
  status: /*#__PURE__*/zod.z.string(),
  params: /*#__PURE__*/zod.z.record(/*#__PURE__*/zod.z.any()),
  output: /*#__PURE__*/CallToolResultSchema.shape.content.nullable()
});
var GlobalAgentStatusSchema = /*#__PURE__*/FlexibleEnumSchema();
var AgentStatusSchema = /*#__PURE__*/FlexibleEnumSchema();
var AgentConfigurationStatusSchema = /*#__PURE__*/zod.z.union([AgentStatusSchema, GlobalAgentStatusSchema]);
var AgentConfigurationScopeSchema = /*#__PURE__*/FlexibleEnumSchema();
var AgentConfigurationViewSchema = /*#__PURE__*/FlexibleEnumSchema();
var AgentUsageTypeSchema = /*#__PURE__*/zod.z.object({
  messageCount: /*#__PURE__*/zod.z.number(),
  conversationCount: /*#__PURE__*/zod.z.number(),
  userCount: /*#__PURE__*/zod.z.number(),
  timePeriodSec: /*#__PURE__*/zod.z.number()
});
var AgentRecentAuthorsSchema = /*#__PURE__*/zod.z.array(zod.z.string()).readonly();
var AgentModelConfigurationSchema = /*#__PURE__*/zod.z.object({
  providerId: ModelProviderIdSchema,
  modelId: ModelLLMIdSchema,
  temperature: /*#__PURE__*/zod.z.number()
});
var LightAgentConfigurationSchema = /*#__PURE__*/zod.z.object({
  id: ModelIdSchema,
  versionCreatedAt: /*#__PURE__*/zod.z.string().nullable(),
  sId: /*#__PURE__*/zod.z.string(),
  version: /*#__PURE__*/zod.z.number(),
  versionAuthorId: /*#__PURE__*/ModelIdSchema.nullable(),
  instructions: /*#__PURE__*/zod.z.string().nullable(),
  model: AgentModelConfigurationSchema,
  status: AgentConfigurationStatusSchema,
  scope: AgentConfigurationScopeSchema,
  userFavorite: /*#__PURE__*/zod.z["boolean"](),
  name: /*#__PURE__*/zod.z.string(),
  description: /*#__PURE__*/zod.z.string(),
  pictureUrl: /*#__PURE__*/zod.z.string(),
  lastAuthors: /*#__PURE__*/AgentRecentAuthorsSchema.optional(),
  usage: /*#__PURE__*/AgentUsageTypeSchema.optional(),
  maxStepsPerRun: /*#__PURE__*/zod.z.number(),
  visualizationEnabled: /*#__PURE__*/zod.z["boolean"](),
  templateId: /*#__PURE__*/zod.z.string().nullable(),
  groupIds: /*#__PURE__*/zod.z.array(zod.z.string()).optional(),
  requestedGroupIds: /*#__PURE__*/zod.z.array(/*#__PURE__*/zod.z.array(/*#__PURE__*/zod.z.string()))
});
var ContentFragmentContextSchema = /*#__PURE__*/zod.z.object({
  username: /*#__PURE__*/zod.z.string().optional().nullable(),
  fullName: /*#__PURE__*/zod.z.string().optional().nullable(),
  email: /*#__PURE__*/zod.z.string().optional().nullable(),
  profilePictureUrl: /*#__PURE__*/zod.z.string().optional().nullable()
});
var ContentNodeTypeSchema = /*#__PURE__*/zod.z.union([/*#__PURE__*/zod.z.literal("document"), /*#__PURE__*/zod.z.literal("table"), /*#__PURE__*/zod.z.literal("folder")]);
var ContentNodesViewTypeSchema = /*#__PURE__*/zod.z.union([/*#__PURE__*/zod.z.literal("table"), /*#__PURE__*/zod.z.literal("document"), /*#__PURE__*/zod.z.literal("all")]);
var ContentFragmentNodeData = /*#__PURE__*/zod.z.object({
  nodeId: /*#__PURE__*/zod.z.string(),
  nodeDataSourceViewId: /*#__PURE__*/zod.z.string(),
  nodeType: ContentNodeTypeSchema,
  provider: /*#__PURE__*/ConnectorProvidersSchema.nullable(),
  spaceName: /*#__PURE__*/zod.z.string()
});
var BaseContentFragmentSchema = /*#__PURE__*/zod.z.object({
  type: /*#__PURE__*/zod.z.literal("content_fragment"),
  id: ModelIdSchema,
  sId: /*#__PURE__*/zod.z.string(),
  created: /*#__PURE__*/zod.z.number(),
  visibility: VisibilitySchema,
  version: /*#__PURE__*/zod.z.number(),
  sourceUrl: /*#__PURE__*/zod.z.string().nullable(),
  title: /*#__PURE__*/zod.z.string(),
  contentType: SupportedContentFragmentTypeSchema,
  context: ContentFragmentContextSchema,
  contentFragmentId: /*#__PURE__*/zod.z.string(),
  contentFragmentVersion: /*#__PURE__*/zod.z.union([/*#__PURE__*/zod.z.literal("latest"), /*#__PURE__*/zod.z.literal("superseded")])
});
var FileContentFragmentSchema = /*#__PURE__*/BaseContentFragmentSchema.extend({
  contentFragmentType: /*#__PURE__*/zod.z.literal("file"),
  fileId: /*#__PURE__*/zod.z.string().nullable(),
  snippet: /*#__PURE__*/zod.z.string().nullable(),
  generatedTables: /*#__PURE__*/zod.z.array(/*#__PURE__*/zod.z.string()),
  textUrl: /*#__PURE__*/zod.z.string(),
  textBytes: /*#__PURE__*/zod.z.number().nullable()
});
var ContentNodeContentFragmentSchema = /*#__PURE__*/BaseContentFragmentSchema.extend({
  contentFragmentType: /*#__PURE__*/zod.z.literal("content_node"),
  nodeId: /*#__PURE__*/zod.z.string(),
  nodeDataSourceViewId: /*#__PURE__*/zod.z.string(),
  nodeType: ContentNodeTypeSchema,
  contentNodeData: ContentFragmentNodeData
});
var ContentFragmentSchema = /*#__PURE__*/zod.z.union([FileContentFragmentSchema, ContentNodeContentFragmentSchema]);
var AgentMentionSchema = /*#__PURE__*/zod.z.object({
  configurationId: /*#__PURE__*/zod.z.string()
});
var UserMessageContextSchema = /*#__PURE__*/zod.z.object({
  username: /*#__PURE__*/zod.z.string(),
  timezone: Timezone,
  fullName: /*#__PURE__*/zod.z.string().optional().nullable(),
  email: /*#__PURE__*/zod.z.string().optional().nullable(),
  profilePictureUrl: /*#__PURE__*/zod.z.string().optional().nullable(),
  origin: UserMessageOriginSchema,
  clientSideMCPServerIds: /*#__PURE__*/zod.z.array(zod.z.string()).optional().nullable(),
  selectedMCPServerViewIds: /*#__PURE__*/zod.z.array(zod.z.string()).optional().nullable()
});
var UserMessageSchema = /*#__PURE__*/zod.z.object({
  id: ModelIdSchema,
  created: /*#__PURE__*/zod.z.number(),
  type: /*#__PURE__*/zod.z.literal("user_message"),
  sId: /*#__PURE__*/zod.z.string(),
  visibility: VisibilitySchema,
  version: /*#__PURE__*/zod.z.number(),
  user: /*#__PURE__*/UserSchema.nullable(),
  mentions: /*#__PURE__*/zod.z.array(AgentMentionSchema),
  content: /*#__PURE__*/zod.z.string(),
  context: UserMessageContextSchema
});
var AgentMessageStatusSchema = /*#__PURE__*/FlexibleEnumSchema();
var AgentMessageTypeSchema = /*#__PURE__*/zod.z.object({
  id: ModelIdSchema,
  agentMessageId: ModelIdSchema,
  created: /*#__PURE__*/zod.z.number(),
  type: /*#__PURE__*/zod.z.literal("agent_message"),
  sId: /*#__PURE__*/zod.z.string(),
  visibility: VisibilitySchema,
  version: /*#__PURE__*/zod.z.number(),
  parentMessageId: /*#__PURE__*/zod.z.string().nullable(),
  configuration: LightAgentConfigurationSchema,
  status: AgentMessageStatusSchema,
  actions: /*#__PURE__*/zod.z.array(MCPActionTypeSchema),
  content: /*#__PURE__*/zod.z.string().nullable(),
  chainOfThought: /*#__PURE__*/zod.z.string().nullable(),
  rawContents: /*#__PURE__*/zod.z.array(/*#__PURE__*/zod.z.object({
    step: /*#__PURE__*/zod.z.number(),
    content: /*#__PURE__*/zod.z.string()
  })),
  error: /*#__PURE__*/zod.z.object({
    code: zod.z.string(),
    message: zod.z.string(),
    metadata: zod.z.record(zod.z.any()).nullable()
  }).nullable()
});
var AgentMessageFeedbackSchema = /*#__PURE__*/zod.z.object({
  messageId: /*#__PURE__*/zod.z.string(),
  agentMessageId: /*#__PURE__*/zod.z.number(),
  userId: /*#__PURE__*/zod.z.number(),
  thumbDirection: /*#__PURE__*/zod.z.union([/*#__PURE__*/zod.z.literal("up"), /*#__PURE__*/zod.z.literal("down")]),
  content: /*#__PURE__*/zod.z.string().nullable(),
  createdAt: /*#__PURE__*/zod.z.number(),
  agentConfigurationId: /*#__PURE__*/zod.z.string(),
  agentConfigurationVersion: /*#__PURE__*/zod.z.number(),
  isConversationShared: /*#__PURE__*/zod.z["boolean"]()
});
var ConversationVisibilitySchema = /*#__PURE__*/FlexibleEnumSchema();
var ConversationWithoutContentSchema = /*#__PURE__*/zod.z.object({
  id: ModelIdSchema,
  created: /*#__PURE__*/zod.z.number(),
  updated: /*#__PURE__*/zod.z.number().optional(),
  owner: WorkspaceSchema,
  sId: /*#__PURE__*/zod.z.string(),
  title: /*#__PURE__*/zod.z.string().nullable(),
  visibility: ConversationVisibilitySchema,
  groupIds: /*#__PURE__*/zod.z.array(zod.z.string()).optional(),
  requestedGroupIds: /*#__PURE__*/zod.z.array(/*#__PURE__*/zod.z.array(/*#__PURE__*/zod.z.string()))
});
var ConversationSchema = /*#__PURE__*/ConversationWithoutContentSchema.extend({
  content: /*#__PURE__*/zod.z.array(/*#__PURE__*/zod.z.union([/*#__PURE__*/zod.z.array(UserMessageSchema), /*#__PURE__*/zod.z.array(AgentMessageTypeSchema), /*#__PURE__*/zod.z.array(ContentFragmentSchema)]))
});
var MCPStakeLevelSchema = /*#__PURE__*/zod.z["enum"](["low", "high", "never_ask"]).optional();
var MCPValidationMetadataSchema = /*#__PURE__*/zod.z.object({
  mcpServerName: /*#__PURE__*/zod.z.string(),
  toolName: /*#__PURE__*/zod.z.string(),
  agentName: /*#__PURE__*/zod.z.string(),
  pubsubMessageId: /*#__PURE__*/zod.z.string().optional(),
  icon: /*#__PURE__*/zod.z.union([MCPInternalActionIconSchema, MCPExternalActionIconSchema]).optional()
});
var ToolExecutionBlockedStatusSchema = /*#__PURE__*/zod.z["enum"](["blocked_authentication_required", "blocked_validation_required", "blocked_child_action_input_required"]);
var ToolExecutionMetadataSchema = /*#__PURE__*/zod.z.object({
  actionId: /*#__PURE__*/zod.z.string(),
  inputs: /*#__PURE__*/zod.z.record(/*#__PURE__*/zod.z.any()),
  stake: MCPStakeLevelSchema,
  metadata: MCPValidationMetadataSchema
});
var BlockedActionExecutionSchema = /*#__PURE__*/ToolExecutionMetadataSchema.extend({
  messageId: /*#__PURE__*/zod.z.string(),
  conversationId: /*#__PURE__*/zod.z.string(),
  status: ToolExecutionBlockedStatusSchema
});
function isMCPServerPersonalAuthRequiredError(error) {
  return error.code === "mcp_server_personal_authentication_required" && error.metadata && "mcpServerId" in error.metadata;
}
var CoreAPIErrorSchema = /*#__PURE__*/zod.z.object({
  message: /*#__PURE__*/zod.z.string(),
  code: /*#__PURE__*/zod.z.string()
});
var CoreAPITokenTypeSchema = /*#__PURE__*/zod.z.tuple([/*#__PURE__*/zod.z.number(), /*#__PURE__*/zod.z.string()]);
var APIErrorTypeSchema = /*#__PURE__*/FlexibleEnumSchema();
var APIErrorSchema = /*#__PURE__*/zod.z.object({
  type: APIErrorTypeSchema,
  message: /*#__PURE__*/zod.z.string(),
  data_source_error: /*#__PURE__*/CoreAPIErrorSchema.optional(),
  run_error: /*#__PURE__*/CoreAPIErrorSchema.optional(),
  app_error: /*#__PURE__*/CoreAPIErrorSchema.optional(),
  connectors_error: /*#__PURE__*/ConnectorsAPIErrorSchema.optional()
});
var WorkspaceDomainSchema = /*#__PURE__*/zod.z.object({
  domain: /*#__PURE__*/zod.z.string(),
  domainAutoJoinEnabled: /*#__PURE__*/zod.z["boolean"]()
});
var DustAppTypeSchema = /*#__PURE__*/zod.z.object({
  appHash: /*#__PURE__*/zod.z.string(),
  appId: /*#__PURE__*/zod.z.string(),
  workspaceId: /*#__PURE__*/zod.z.string()
});
var DustAppConfigTypeSchema = /*#__PURE__*/zod.z.record(/*#__PURE__*/zod.z.unknown());
var DustAppRunErroredEventSchema = /*#__PURE__*/zod.z.object({
  type: /*#__PURE__*/zod.z.literal("error"),
  content: /*#__PURE__*/zod.z.object({
    code: /*#__PURE__*/zod.z.string(),
    message: /*#__PURE__*/zod.z.string()
  })
});
var DustAppRunRunStatusEventSchema = /*#__PURE__*/zod.z.object({
  type: /*#__PURE__*/zod.z.literal("run_status"),
  content: /*#__PURE__*/zod.z.object({
    status: /*#__PURE__*/zod.z["enum"](["running", "succeeded", "errored"]),
    run_id: /*#__PURE__*/zod.z.string()
  })
});
var DustAppRunBlockStatusEventSchema = /*#__PURE__*/zod.z.object({
  type: /*#__PURE__*/zod.z.literal("block_status"),
  content: /*#__PURE__*/zod.z.object({
    block_type: BlockTypeSchema,
    name: /*#__PURE__*/zod.z.string(),
    status: StatusSchema,
    success_count: /*#__PURE__*/zod.z.number(),
    error_count: /*#__PURE__*/zod.z.number()
  })
});
var DustAppRunBlockExecutionEventSchema = /*#__PURE__*/zod.z.object({
  type: /*#__PURE__*/zod.z.literal("block_execution"),
  content: /*#__PURE__*/zod.z.object({
    block_type: BlockTypeSchema,
    block_name: /*#__PURE__*/zod.z.string(),
    execution: /*#__PURE__*/zod.z.array(/*#__PURE__*/zod.z.array(/*#__PURE__*/zod.z.object({
      value: /*#__PURE__*/zod.z.unknown().nullable(),
      error: /*#__PURE__*/zod.z.string().nullable(),
      meta: /*#__PURE__*/zod.z.unknown().nullable()
    })))
  })
});
var DustAppRunFinalEventSchema = /*#__PURE__*/zod.z.object({
  type: /*#__PURE__*/zod.z.literal("final")
});
var DustAppRunTokensEventSchema = /*#__PURE__*/zod.z.object({
  type: /*#__PURE__*/zod.z.literal("tokens"),
  content: /*#__PURE__*/zod.z.object({
    block_type: /*#__PURE__*/zod.z.string(),
    block_name: /*#__PURE__*/zod.z.string(),
    input_index: /*#__PURE__*/zod.z.number(),
    map: /*#__PURE__*/zod.z.object({
      name: zod.z.string(),
      iteration: zod.z.number()
    }).nullable(),
    tokens: /*#__PURE__*/zod.z.object({
      text: /*#__PURE__*/zod.z.string(),
      tokens: /*#__PURE__*/zod.z.array(zod.z.string()).optional(),
      logprobs: /*#__PURE__*/zod.z.array(zod.z.number()).optional()
    })
  })
});
var DustAppRunReasoningTokensEventSchema = /*#__PURE__*/zod.z.object({
  type: /*#__PURE__*/zod.z.literal("reasoning_tokens"),
  content: /*#__PURE__*/zod.z.object({
    block_type: /*#__PURE__*/zod.z.string(),
    block_name: /*#__PURE__*/zod.z.string(),
    input_index: /*#__PURE__*/zod.z.number(),
    map: /*#__PURE__*/zod.z.object({
      name: zod.z.string(),
      iteration: zod.z.number()
    }).nullable(),
    tokens: /*#__PURE__*/zod.z.object({
      text: /*#__PURE__*/zod.z.string()
    })
  })
});
var DustAppRunReasoningItemEventSchema = /*#__PURE__*/zod.z.object({
  type: /*#__PURE__*/zod.z.literal("reasoning_item"),
  content: /*#__PURE__*/zod.z.object({
    block_type: /*#__PURE__*/zod.z.string(),
    block_name: /*#__PURE__*/zod.z.string(),
    input_index: /*#__PURE__*/zod.z.number(),
    map: /*#__PURE__*/zod.z.object({
      name: zod.z.string(),
      iteration: zod.z.number()
    }).nullable(),
    item: /*#__PURE__*/zod.z.unknown()
  })
});
var DustAppRunFunctionCallEventSchema = /*#__PURE__*/zod.z.object({
  type: /*#__PURE__*/zod.z.literal("function_call"),
  content: /*#__PURE__*/zod.z.object({
    block_type: /*#__PURE__*/zod.z.string(),
    block_name: /*#__PURE__*/zod.z.string(),
    input_index: /*#__PURE__*/zod.z.number(),
    map: /*#__PURE__*/zod.z.object({
      name: zod.z.string(),
      iteration: zod.z.number()
    }).nullable(),
    function_call: /*#__PURE__*/zod.z.object({
      name: /*#__PURE__*/zod.z.string()
    })
  })
});
var DustAppRunFunctionCallArgumentsTokensEventSchema = /*#__PURE__*/zod.z.object({
  type: /*#__PURE__*/zod.z.literal("function_call_arguments_tokens"),
  content: /*#__PURE__*/zod.z.object({
    block_type: /*#__PURE__*/zod.z.string(),
    block_name: /*#__PURE__*/zod.z.string(),
    input_index: /*#__PURE__*/zod.z.number(),
    map: /*#__PURE__*/zod.z.object({
      name: zod.z.string(),
      iteration: zod.z.number()
    }).nullable(),
    tokens: /*#__PURE__*/zod.z.object({
      text: /*#__PURE__*/zod.z.string()
    })
  })
});
var SpaceKindSchema = /*#__PURE__*/FlexibleEnumSchema();
var SpaceTypeSchema = /*#__PURE__*/zod.z.object({
  createdAt: /*#__PURE__*/zod.z.number(),
  groupIds: /*#__PURE__*/zod.z.array(/*#__PURE__*/zod.z.string()),
  isRestricted: /*#__PURE__*/zod.z["boolean"](),
  kind: SpaceKindSchema,
  name: /*#__PURE__*/zod.z.string(),
  sId: /*#__PURE__*/zod.z.string(),
  updatedAt: /*#__PURE__*/zod.z.number()
});
var DatasetSchemaEntryType = /*#__PURE__*/FlexibleEnumSchema();
var DatasetSchema = /*#__PURE__*/zod.z.object({
  name: /*#__PURE__*/zod.z.string(),
  description: /*#__PURE__*/zod.z.string().nullable(),
  data: /*#__PURE__*/zod.z.array(zod.z.record(zod.z.any())).nullable().optional(),
  schema: /*#__PURE__*/zod.z.array(zod.z.object({
    key: zod.z.string(),
    type: DatasetSchemaEntryType,
    description: zod.z.string().nullable()
  })).nullable().optional()
});
var AppTypeSchema = /*#__PURE__*/zod.z.object({
  id: ModelIdSchema,
  sId: /*#__PURE__*/zod.z.string(),
  name: /*#__PURE__*/zod.z.string(),
  description: /*#__PURE__*/zod.z.string().nullable(),
  savedSpecification: /*#__PURE__*/zod.z.string().nullable(),
  savedConfig: /*#__PURE__*/zod.z.string().nullable(),
  savedRun: /*#__PURE__*/zod.z.string().nullable(),
  dustAPIProjectId: /*#__PURE__*/zod.z.string(),
  space: SpaceTypeSchema,
  datasets: /*#__PURE__*/zod.z.array(DatasetSchema).optional(),
  coreSpecifications: /*#__PURE__*/zod.z.record(zod.z.string()).optional()
});
var AppImportTypeSchema = /*#__PURE__*/zod.z.object({
  id: /*#__PURE__*/ModelIdSchema.optional(),
  sId: /*#__PURE__*/zod.z.string(),
  name: /*#__PURE__*/zod.z.string(),
  description: /*#__PURE__*/zod.z.string().nullable(),
  savedSpecification: /*#__PURE__*/zod.z.string().nullable(),
  savedConfig: /*#__PURE__*/zod.z.string().nullable(),
  savedRun: /*#__PURE__*/zod.z.string().nullable(),
  dustAPIProjectId: /*#__PURE__*/zod.z.string(),
  datasets: /*#__PURE__*/zod.z.array(DatasetSchema).optional(),
  coreSpecifications: /*#__PURE__*/zod.z.record(zod.z.string()).optional()
});
var RunAppResponseSchema = /*#__PURE__*/zod.z.object({
  run: RunTypeSchema
});
var GetDataSourcesResponseSchema = /*#__PURE__*/zod.z.object({
  data_sources: /*#__PURE__*/DataSourceTypeSchema.array()
});
var GetOrPatchAgentConfigurationResponseSchema = /*#__PURE__*/zod.z.object({
  agentConfiguration: LightAgentConfigurationSchema
});
var PatchAgentConfigurationRequestSchema = /*#__PURE__*/zod.z.object({
  userFavorite: /*#__PURE__*/zod.z["boolean"]().optional()
});
var GetAgentConfigurationsResponseSchema = /*#__PURE__*/zod.z.object({
  agentConfigurations: /*#__PURE__*/LightAgentConfigurationSchema.array()
});
var CreateGenericAgentConfigurationRequestSchema = /*#__PURE__*/zod.z.object({
  name: /*#__PURE__*/zod.z.string(),
  description: /*#__PURE__*/zod.z.string(),
  instructions: /*#__PURE__*/zod.z.string(),
  emoji: /*#__PURE__*/zod.z.string().optional(),
  subAgentName: /*#__PURE__*/zod.z.string().optional(),
  subAgentDescription: /*#__PURE__*/zod.z.string().optional(),
  subAgentInstructions: /*#__PURE__*/zod.z.string().optional(),
  subAgentEmoji: /*#__PURE__*/zod.z.string().optional()
});
var CreateGenericAgentConfigurationResponseSchema = /*#__PURE__*/zod.z.object({
  agentConfiguration: LightAgentConfigurationSchema,
  subAgentConfiguration: /*#__PURE__*/LightAgentConfigurationSchema.optional()
});
var PostContentFragmentResponseSchema = /*#__PURE__*/zod.z.object({
  contentFragment: ContentFragmentSchema
});
var CreateConversationResponseSchema = /*#__PURE__*/zod.z.object({
  conversation: ConversationSchema,
  message: /*#__PURE__*/UserMessageSchema.optional()
});
var GetFeedbacksResponseSchema = /*#__PURE__*/zod.z.object({
  feedbacks: /*#__PURE__*/zod.z.array(AgentMessageFeedbackSchema)
});
var PublicPostMessageFeedbackRequestBodySchema = /*#__PURE__*/zod.z.object({
  thumbDirection: /*#__PURE__*/zod.z.string(),
  feedbackContent: /*#__PURE__*/zod.z.string().nullable().optional(),
  isConversationShared: /*#__PURE__*/zod.z["boolean"]().optional()
});
var PostMessageFeedbackResponseSchema = /*#__PURE__*/zod.z.object({
  success: /*#__PURE__*/zod.z.literal(true)
});
var PostUserMessageResponseSchema = /*#__PURE__*/zod.z.object({
  message: UserMessageSchema
});
var RetryMessageResponseSchema = /*#__PURE__*/zod.z.object({
  message: AgentMessageTypeSchema
});
var GetConversationResponseSchema = /*#__PURE__*/zod.z.object({
  conversation: ConversationSchema
});
var TokenizeResponseSchema = /*#__PURE__*/zod.z.object({
  tokens: /*#__PURE__*/CoreAPITokenTypeSchema.array()
});
var GetActiveMemberEmailsInWorkspaceResponseSchema = /*#__PURE__*/zod.z.object({
  emails: /*#__PURE__*/zod.z.array(/*#__PURE__*/zod.z.string())
});
var GetWorkspaceVerifiedDomainsResponseSchema = /*#__PURE__*/zod.z.object({
  verified_domains: /*#__PURE__*/WorkspaceDomainSchema.array()
});
var GetWorkspaceFeatureFlagsResponseSchema = /*#__PURE__*/zod.z.object({
  feature_flags: /*#__PURE__*/WhitelistableFeaturesSchema.array()
});
var PublicPostMessagesRequestBodySchema = /*#__PURE__*/zod.z.intersection(/*#__PURE__*/zod.z.object({
  content: /*#__PURE__*/zod.z.string().min(1),
  mentions: /*#__PURE__*/zod.z.array(/*#__PURE__*/zod.z.object({
    configurationId: /*#__PURE__*/zod.z.string()
  })),
  context: /*#__PURE__*/UserMessageContextSchema.extend({
    clientSideMCPServerIds: /*#__PURE__*/zod.z.array(zod.z.string()).optional().nullable()
  })
}), /*#__PURE__*/zod.z.object({
  blocking: zod.z["boolean"]().optional(),
  skipToolsValidation: zod.z["boolean"]().optional()
}).partial());
var PublicPostEditMessagesRequestBodySchema = /*#__PURE__*/zod.z.object({
  content: /*#__PURE__*/zod.z.string(),
  mentions: /*#__PURE__*/zod.z.array(/*#__PURE__*/zod.z.object({
    configurationId: /*#__PURE__*/zod.z.string()
  })),
  skipToolsValidation: /*#__PURE__*/zod.z["boolean"]().optional()["default"](false)
});
var PublicContentFragmentWithContentSchema = /*#__PURE__*/zod.z.object({
  title: /*#__PURE__*/zod.z.string(),
  url: /*#__PURE__*/zod.z.string().optional().nullable(),
  content: /*#__PURE__*/zod.z.string(),
  contentType: /*#__PURE__*/zod.z.string(),
  fileId: /*#__PURE__*/zod.z.undefined().nullable(),
  nodeId: /*#__PURE__*/zod.z.undefined().nullable(),
  nodeDataSourceViewId: /*#__PURE__*/zod.z.undefined().nullable(),
  context: /*#__PURE__*/ContentFragmentContextSchema.optional().nullable(),
  // Undocumented for now -- allows to supersede an existing content fragment.
  supersededContentFragmentId: /*#__PURE__*/zod.z.string().optional().nullable()
});
var PublicContentFragmentWithFileIdSchema = /*#__PURE__*/zod.z.object({
  title: /*#__PURE__*/zod.z.string(),
  fileId: /*#__PURE__*/zod.z.string(),
  url: /*#__PURE__*/zod.z.string().optional().nullable(),
  content: /*#__PURE__*/zod.z.undefined().nullable(),
  contentType: /*#__PURE__*/zod.z.undefined().nullable(),
  nodeId: /*#__PURE__*/zod.z.undefined().nullable(),
  nodeDataSourceViewId: /*#__PURE__*/zod.z.undefined().nullable(),
  context: /*#__PURE__*/ContentFragmentContextSchema.optional().nullable(),
  // Undocumented for now -- allows to supersede an existing content fragment.
  supersededContentFragmentId: /*#__PURE__*/zod.z.string().optional().nullable()
});
var PublicContentFragmentWithContentNodeSchema = /*#__PURE__*/zod.z.object({
  title: /*#__PURE__*/zod.z.string(),
  nodeId: /*#__PURE__*/zod.z.string(),
  nodeDataSourceViewId: /*#__PURE__*/zod.z.string(),
  url: /*#__PURE__*/zod.z.undefined().nullable(),
  content: /*#__PURE__*/zod.z.undefined().nullable(),
  contentType: /*#__PURE__*/zod.z.undefined().nullable(),
  fileId: /*#__PURE__*/zod.z.undefined().nullable(),
  context: /*#__PURE__*/ContentFragmentContextSchema.optional().nullable(),
  supersededContentFragmentId: /*#__PURE__*/zod.z.string().optional().nullable()
});
var PublicPostContentFragmentRequestBodySchema = /*#__PURE__*/zod.z.union([PublicContentFragmentWithContentSchema, PublicContentFragmentWithFileIdSchema, PublicContentFragmentWithContentNodeSchema]);
var PublicPostConversationsRequestBodySchema = /*#__PURE__*/zod.z.intersection(/*#__PURE__*/zod.z.object({
  title: /*#__PURE__*/zod.z.string().nullable().optional(),
  visibility: /*#__PURE__*/zod.z["enum"](["workspace", "unlisted", "deleted", "test"]).optional()["default"]("unlisted"),
  depth: /*#__PURE__*/zod.z.number().optional(),
  message: /*#__PURE__*/zod.z.union([/*#__PURE__*/zod.z.intersection(/*#__PURE__*/zod.z.object({
    content: /*#__PURE__*/zod.z.string().min(1),
    mentions: /*#__PURE__*/zod.z.array(/*#__PURE__*/zod.z.object({
      configurationId: /*#__PURE__*/zod.z.string()
    })),
    context: UserMessageContextSchema
  }), /*#__PURE__*/zod.z.object({
    blocking: zod.z["boolean"]().optional()
  }).partial()), /*#__PURE__*/zod.z.undefined()]),
  contentFragment: /*#__PURE__*/zod.z.union([PublicContentFragmentWithContentSchema, PublicContentFragmentWithFileIdSchema, PublicContentFragmentWithContentNodeSchema, /*#__PURE__*/zod.z.undefined()]),
  contentFragments: /*#__PURE__*/zod.z.union([/*#__PURE__*/zod.z.union([PublicContentFragmentWithContentSchema, PublicContentFragmentWithFileIdSchema, PublicContentFragmentWithContentNodeSchema]).array(), /*#__PURE__*/zod.z.undefined()])
}), /*#__PURE__*/zod.z.object({
  blocking: zod.z["boolean"]().optional(),
  skipToolsValidation: zod.z["boolean"]().optional()
}).partial());
var PostConversationsResponseSchema = /*#__PURE__*/zod.z.object({
  conversation: ConversationSchema,
  message: /*#__PURE__*/UserMessageSchema.optional(),
  contentFragment: /*#__PURE__*/ContentFragmentSchema.optional()
});
var GetConversationsResponseSchema = /*#__PURE__*/zod.z.object({
  conversations: /*#__PURE__*/ConversationWithoutContentSchema.array()
});
var SearchDataSourceViewsRequestSchema = /*#__PURE__*/zod.z.object({
  dataSourceId: /*#__PURE__*/zod.z.string().optional(),
  kind: /*#__PURE__*/zod.z.string().optional(),
  vaultId: /*#__PURE__*/zod.z.string().optional(),
  vaultKind: /*#__PURE__*/zod.z.string().optional()
});
var SearchDataSourceViewsResponseSchema = /*#__PURE__*/zod.z.object({
  data_source_views: /*#__PURE__*/DataSourceViewSchema.array()
});
var ValidateMemberRequestSchema = /*#__PURE__*/zod.z.object({
  email: /*#__PURE__*/zod.z.string()
});
var GetAppsResponseSchema = /*#__PURE__*/zod.z.object({
  apps: /*#__PURE__*/AppTypeSchema.array()
});
var PostAppsRequestSchema = /*#__PURE__*/zod.z.object({
  apps: /*#__PURE__*/AppImportTypeSchema.array()
});
var ImportAppsResponseSchema = /*#__PURE__*/zod.z.object({
  apps: /*#__PURE__*/zod.z.object({
    sId: zod.z.string(),
    name: zod.z.string(),
    error: zod.z.string().optional()
  }).array()
});
var DataSourceViewResponseSchema = /*#__PURE__*/zod.z.object({
  dataSourceView: DataSourceViewSchema
});
var PatchDataSourceViewRequestSchema = /*#__PURE__*/zod.z.union([/*#__PURE__*/zod.z.object({
  parentsToAdd: zod.z.union([zod.z.array(zod.z.string()), zod.z.undefined()]),
  parentsToRemove: zod.z.array(zod.z.string()).optional()
})
// For the fields to be not optional, see:
// https://stackoverflow.com/questions/71477015/specify-a-zod-schema-with-a-non-optional-but-possibly-undefined-field
.transform(function (o) {
  return {
    parentsToAdd: o.parentsToAdd,
    parentsToRemove: o.parentsToRemove
  };
}), /*#__PURE__*/zod.z.object({
  parentsIn: /*#__PURE__*/zod.z.array(/*#__PURE__*/zod.z.string())
})]);
var DataSourceSearchQuerySchema = /*#__PURE__*/zod.z.object({
  query: /*#__PURE__*/zod.z.string(),
  top_k: /*#__PURE__*/zod.z.coerce.number(),
  full_text: /*#__PURE__*/zod.z.coerce["boolean"](),
  target_document_tokens: /*#__PURE__*/zod.z.coerce.number().optional(),
  timestamp_gt: /*#__PURE__*/zod.z.coerce.number().optional(),
  timestamp_lt: /*#__PURE__*/zod.z.coerce.number().optional(),
  tags_in: /*#__PURE__*/zod.z.array(zod.z.string()).optional(),
  tags_not: /*#__PURE__*/zod.z.array(zod.z.string()).optional(),
  parents_in: /*#__PURE__*/zod.z.array(zod.z.string()).optional(),
  parents_not: /*#__PURE__*/zod.z.array(zod.z.string()).optional()
});
var FrontDataSourceDocumentSectionSchema = /*#__PURE__*/zod.z.lazy(function () {
  return zod.z.object({
    prefix: zod.z.string().nullable(),
    content: zod.z.string().nullable(),
    sections: zod.z.array(FrontDataSourceDocumentSectionSchema)
  });
});
var PostDataSourceDocumentRequestSchema = /*#__PURE__*/zod.z.object({
  timestamp: /*#__PURE__*/zod.z.number().nullable().optional(),
  tags: /*#__PURE__*/zod.z.array(zod.z.string()).nullable().optional(),
  parent_id: /*#__PURE__*/zod.z.string().nullable().optional(),
  parents: /*#__PURE__*/zod.z.array(zod.z.string()).nullable().optional(),
  source_url: /*#__PURE__*/zod.z.string().nullable().optional(),
  upsert_context: /*#__PURE__*/zod.z.object({
    sync_type: zod.z.union([zod.z["enum"](["batch", "incremental"]), zod.z.undefined()])
  })
  // For the fields to be not optional, see:
  // https://stackoverflow.com/questions/71477015/specify-a-zod-schema-with-a-non-optional-but-possibly-undefined-field
  .transform(function (o) {
    return {
      sync_type: o.sync_type
    };
  }).optional(),
  text: /*#__PURE__*/zod.z.string().nullable().optional(),
  section: /*#__PURE__*/FrontDataSourceDocumentSectionSchema.nullable().optional(),
  light_document_output: /*#__PURE__*/zod.z["boolean"]().optional(),
  async: /*#__PURE__*/zod.z["boolean"]().nullable().optional(),
  mime_type: /*#__PURE__*/zod.z.string().nullable().optional(),
  title: /*#__PURE__*/zod.z.string().nullable().optional()
});
var UpsertTableRowsRequestSchema = /*#__PURE__*/zod.z.object({
  rows: /*#__PURE__*/zod.z.array(/*#__PURE__*/zod.z.object({
    row_id: /*#__PURE__*/zod.z.string(),
    value: /*#__PURE__*/zod.z.record(/*#__PURE__*/zod.z.union([zod.z.string(), zod.z.number(), zod.z["boolean"](), zod.z.object({
      type: zod.z.literal("datetime"),
      epoch: zod.z.number()
    })]).nullable())
  })),
  truncate: /*#__PURE__*/zod.z["boolean"]().optional()
});
var PostTableParentsRequestSchema = /*#__PURE__*/zod.z.object({
  parent_id: /*#__PURE__*/zod.z.string().nullable().optional(),
  parents: /*#__PURE__*/zod.z.array(/*#__PURE__*/zod.z.string())
});
var UpsertTableFromCsvRequestSchema = /*#__PURE__*/zod.z.object({
  name: /*#__PURE__*/zod.z.string(),
  description: /*#__PURE__*/zod.z.string(),
  timestamp: /*#__PURE__*/zod.z.number().nullable().optional(),
  tags: /*#__PURE__*/zod.z.array(zod.z.string()).nullable().optional(),
  parentId: /*#__PURE__*/zod.z.string().nullable().optional(),
  parents: /*#__PURE__*/zod.z.array(zod.z.string()).nullable().optional(),
  truncate: /*#__PURE__*/zod.z["boolean"](),
  async: /*#__PURE__*/zod.z["boolean"]().optional(),
  title: /*#__PURE__*/zod.z.string(),
  mimeType: /*#__PURE__*/zod.z.string(),
  sourceUrl: /*#__PURE__*/zod.z.string().nullable().optional(),
  tableId: /*#__PURE__*/zod.z.string(),
  fileId: /*#__PURE__*/zod.z.string(),
  allowEmptySchema: /*#__PURE__*/zod.z["boolean"]().optional()
});
var UpsertDatabaseTableRequestSchema = /*#__PURE__*/zod.z.object({
  table_id: /*#__PURE__*/zod.z.string().optional(),
  name: /*#__PURE__*/zod.z.string(),
  description: /*#__PURE__*/zod.z.string(),
  timestamp: /*#__PURE__*/zod.z.number().nullable().optional(),
  tags: /*#__PURE__*/zod.z.array(zod.z.string()).nullable().optional(),
  parent_id: /*#__PURE__*/zod.z.string().nullable().optional(),
  parents: /*#__PURE__*/zod.z.array(zod.z.string()).nullable().optional(),
  remote_database_table_id: /*#__PURE__*/zod.z.string().nullable().optional(),
  remote_database_secret_id: /*#__PURE__*/zod.z.string().nullable().optional(),
  title: /*#__PURE__*/zod.z.string(),
  mime_type: /*#__PURE__*/zod.z.string().nullable().optional(),
  source_url: /*#__PURE__*/zod.z.string().nullable().optional()
});
var SupportedUsageTablesSchema = /*#__PURE__*/FlexibleEnumSchema();
// Folders
var CoreAPIFolderSchema = /*#__PURE__*/zod.z.object({
  data_source_id: /*#__PURE__*/zod.z.string(),
  folder_id: /*#__PURE__*/zod.z.string(),
  title: /*#__PURE__*/zod.z.string(),
  parents: /*#__PURE__*/zod.z.array(/*#__PURE__*/zod.z.string()),
  timestamp: /*#__PURE__*/zod.z.number()
});
var GetFoldersResponseSchema = /*#__PURE__*/zod.z.object({
  folders: /*#__PURE__*/zod.z.array(CoreAPIFolderSchema),
  total: /*#__PURE__*/zod.z.number()
});
var GetFolderResponseSchema = /*#__PURE__*/zod.z.object({
  folder: CoreAPIFolderSchema
});
var DeleteFolderResponseSchema = /*#__PURE__*/zod.z.object({
  folder: /*#__PURE__*/zod.z.object({
    folder_id: /*#__PURE__*/zod.z.string()
  })
});
var UpsertFolderResponseSchema = /*#__PURE__*/zod.z.object({
  folder: CoreAPIFolderSchema,
  data_source: DataSourceTypeSchema
});
var ProviderVisibilitySchema = /*#__PURE__*/FlexibleEnumSchema();
var UpsertDataSourceFolderRequestSchema = /*#__PURE__*/zod.z.object({
  timestamp: /*#__PURE__*/zod.z.number(),
  parents: /*#__PURE__*/zod.z.array(zod.z.string()).nullable().optional(),
  parent_id: /*#__PURE__*/zod.z.string().nullable().optional(),
  title: /*#__PURE__*/zod.z.string(),
  mime_type: /*#__PURE__*/zod.z.string(),
  source_url: /*#__PURE__*/zod.z.string().nullable().optional(),
  provider_visibility: /*#__PURE__*/ProviderVisibilitySchema.nullable().optional()
});
var DateSchema = /*#__PURE__*/zod.z.string().refine(function (s) {
  return /^\d{4}-(0[1-9]|1[0-2])(-([0-2]\d|3[01]))?$/.test(s);
}, "YYYY-MM or YYYY-MM-DD");
var GetWorkspaceUsageRequestSchema = /*#__PURE__*/zod.z.union([/*#__PURE__*/zod.z.object({
  start: DateSchema,
  end: /*#__PURE__*/zod.z.undefined(),
  mode: /*#__PURE__*/zod.z.literal("month"),
  table: SupportedUsageTablesSchema,
  format: /*#__PURE__*/zod.z["enum"](["csv", "json"]).optional()["default"]("csv")
}), /*#__PURE__*/zod.z.object({
  start: DateSchema,
  end: DateSchema,
  mode: /*#__PURE__*/zod.z.literal("range"),
  table: SupportedUsageTablesSchema,
  format: /*#__PURE__*/zod.z["enum"](["csv", "json"]).optional()["default"]("csv")
})]);
var FileUploadUrlRequestSchema = /*#__PURE__*/zod.z.object({
  contentType: SupportedFileContentFragmentTypeSchema,
  fileName: /*#__PURE__*/zod.z.string().max(4096, "File name must be less than 4096 characters"),
  fileSize: /*#__PURE__*/zod.z.number(),
  useCase: /*#__PURE__*/zod.z.union([/*#__PURE__*/zod.z.literal("conversation"), /*#__PURE__*/zod.z.literal("upsert_table")]),
  useCaseMetadata: /*#__PURE__*/zod.z.object({
    conversationId: zod.z.string()
  }).optional()
});
var FileTypeStatusSchema = /*#__PURE__*/FlexibleEnumSchema();
var FileTypeUseCaseSchema = /*#__PURE__*/FlexibleEnumSchema();
var FileTypeSchema = /*#__PURE__*/zod.z.object({
  // TODO(spolu): move this to ModelIdSchema
  id: /*#__PURE__*/zod.z.string(),
  sId: /*#__PURE__*/zod.z.string(),
  contentType: /*#__PURE__*/zod.z.string(),
  downloadUrl: /*#__PURE__*/zod.z.string().optional(),
  fileName: /*#__PURE__*/zod.z.string(),
  fileSize: /*#__PURE__*/zod.z.number(),
  status: FileTypeStatusSchema,
  uploadUrl: /*#__PURE__*/zod.z.string().optional(),
  publicUrl: /*#__PURE__*/zod.z.string().optional(),
  useCase: FileTypeUseCaseSchema
});
var FileTypeWithUploadUrlSchema = /*#__PURE__*/FileTypeSchema.extend({
  uploadUrl: /*#__PURE__*/zod.z.string()
});
var FileUploadRequestResponseSchema = /*#__PURE__*/zod.z.object({
  file: FileTypeWithUploadUrlSchema
});
var FileUploadedRequestResponseSchema = /*#__PURE__*/zod.z.object({
  file: FileTypeSchema
});
var MeResponseSchema = /*#__PURE__*/zod.z.object({
  user: /*#__PURE__*/UserSchema.and(/*#__PURE__*/zod.z.object({
    workspaces: /*#__PURE__*/WorkspaceSchema.array().or(/*#__PURE__*/ExtensionWorkspaceSchema.array())
  }))
});
var CancelMessageGenerationResponseSchema = /*#__PURE__*/zod.z.object({
  success: /*#__PURE__*/zod.z.literal(true)
});
var CancelMessageGenerationRequestSchema = /*#__PURE__*/zod.z.object({
  messageIds: /*#__PURE__*/zod.z.array(/*#__PURE__*/zod.z.string())
});
// Typeguards.
function isAgentMention(arg) {
  return arg.configurationId !== undefined;
}
function assertNever(x) {
  throw new Error((typeof x === "object" ? JSON.stringify(x) : x) + " is not of type never. This should never happen.");
}
function removeNulls(arr) {
  return arr.filter(function (v) {
    return v !== null && v !== undefined;
  });
}
function getProviderFromRetrievedDocument(document) {
  if (document.dataSourceView) {
    if (document.dataSourceView.dataSource.connectorProvider === "webcrawler") {
      return "document";
    }
    return document.dataSourceView.dataSource.connectorProvider || "document";
  }
  return "document";
}
function getTitleFromRetrievedDocument(document) {
  var provider = getProviderFromRetrievedDocument(document);
  if (provider === "slack") {
    for (var _iterator = _createForOfIteratorHelperLoose(document.tags), _step; !(_step = _iterator()).done;) {
      var t = _step.value;
      if (t.startsWith("channelName:")) {
        return "#" + t.substring(12);
      }
    }
  }
  for (var _iterator2 = _createForOfIteratorHelperLoose(document.tags), _step2; !(_step2 = _iterator2()).done;) {
    var _t = _step2.value;
    if (_t.startsWith("title:")) {
      return _t.substring(6);
    }
  }
  return document.documentId;
}
var AppsCheckRequestSchema = /*#__PURE__*/zod.z.object({
  apps: /*#__PURE__*/zod.z.array(/*#__PURE__*/zod.z.object({
    appId: /*#__PURE__*/zod.z.string(),
    appHash: /*#__PURE__*/zod.z.string()
  }))
});
var AppsCheckResponseSchema = /*#__PURE__*/zod.z.object({
  apps: /*#__PURE__*/zod.z.array(/*#__PURE__*/zod.z.object({
    appId: /*#__PURE__*/zod.z.string(),
    appHash: /*#__PURE__*/zod.z.string(),
    deployed: /*#__PURE__*/zod.z["boolean"]()
  }))
});
var GetSpacesResponseSchema = /*#__PURE__*/zod.z.object({
  spaces: /*#__PURE__*/zod.z.array(SpaceTypeSchema)
});
var OAuthProviderSchema = /*#__PURE__*/FlexibleEnumSchema();
var InternalAllowedIconSchema = /*#__PURE__*/FlexibleEnumSchema();
var CustomServerIconSchema = /*#__PURE__*/FlexibleEnumSchema();
var MCPServerTypeSchema = /*#__PURE__*/zod.z.object({
  sId: /*#__PURE__*/zod.z.string(),
  name: /*#__PURE__*/zod.z.string(),
  version: /*#__PURE__*/zod.z.string(),
  description: /*#__PURE__*/zod.z.string(),
  icon: /*#__PURE__*/zod.z.union([InternalAllowedIconSchema, CustomServerIconSchema]),
  authorization: /*#__PURE__*/zod.z.object({
    provider: OAuthProviderSchema,
    supported_use_cases: zod.z.array(zod.z["enum"](["personal_actions", "platform_actions"])),
    scope: zod.z.string().optional()
  }).nullable(),
  tools: /*#__PURE__*/zod.z.array(/*#__PURE__*/zod.z.object({
    name: /*#__PURE__*/zod.z.string(),
    description: /*#__PURE__*/zod.z.string(),
    inputSchema: /*#__PURE__*/zod.z.any().optional()
  })),
  availability: /*#__PURE__*/zod.z["enum"](["manual", "auto", "auto_hidden_builder"]),
  allowMultipleInstances: /*#__PURE__*/zod.z["boolean"](),
  documentationUrl: /*#__PURE__*/zod.z.string().nullable()
});
var MCPServerViewTypeSchema = /*#__PURE__*/zod.z.object({
  id: /*#__PURE__*/zod.z.number(),
  sId: /*#__PURE__*/zod.z.string(),
  name: /*#__PURE__*/zod.z.string().nullable(),
  description: /*#__PURE__*/zod.z.string().nullable(),
  createdAt: /*#__PURE__*/zod.z.number(),
  updatedAt: /*#__PURE__*/zod.z.number(),
  spaceId: /*#__PURE__*/zod.z.string(),
  serverType: /*#__PURE__*/zod.z["enum"](["remote", "internal"]),
  server: MCPServerTypeSchema,
  oAuthUseCase: /*#__PURE__*/zod.z["enum"](["personal_actions", "platform_actions"]).nullable(),
  editedByUser: /*#__PURE__*/EditedByUserSchema.nullable()
});
var GetMCPServerViewsResponseSchema = /*#__PURE__*/zod.z.object({
  success: /*#__PURE__*/zod.z.literal(true),
  serverViews: /*#__PURE__*/zod.z.array(MCPServerViewTypeSchema)
});
var GetMCPServerViewsQuerySchema = /*#__PURE__*/zod.z.object({
  includeAuto: /*#__PURE__*/zod.z["enum"](["true", "false"]).transform(function (val) {
    return val === "true";
  }).optional()
});
var BaseSearchBodySchema = /*#__PURE__*/zod.z.object({
  viewType: ContentNodesViewTypeSchema,
  spaceIds: /*#__PURE__*/zod.z.array(/*#__PURE__*/zod.z.string()),
  includeDataSources: /*#__PURE__*/zod.z["boolean"](),
  limit: /*#__PURE__*/zod.z.number()
});
var TextSearchBodySchema = /*#__PURE__*/zod.z.intersection(BaseSearchBodySchema, /*#__PURE__*/zod.z.object({
  query: /*#__PURE__*/zod.z.string(),
  nodeIds: /*#__PURE__*/zod.z.undefined().optional(),
  searchSourceUrls: /*#__PURE__*/zod.z["boolean"]().optional()
}));
var NodeIdSearchBodySchema = /*#__PURE__*/zod.z.intersection(BaseSearchBodySchema, /*#__PURE__*/zod.z.object({
  nodeIds: /*#__PURE__*/zod.z.array(/*#__PURE__*/zod.z.string()),
  query: /*#__PURE__*/zod.z.undefined().optional()
}));
var SearchRequestBodySchema = /*#__PURE__*/zod.z.union([TextSearchBodySchema, NodeIdSearchBodySchema]);
var ContentNodeSchema = /*#__PURE__*/zod.z.object({
  expandable: /*#__PURE__*/zod.z["boolean"](),
  internalId: /*#__PURE__*/zod.z.string(),
  lastUpdatedAt: /*#__PURE__*/zod.z.number().nullable(),
  mimeType: /*#__PURE__*/zod.z.string(),
  // The direct parent ID of this content node
  parentInternalId: /*#__PURE__*/zod.z.string().nullable(),
  // permission: ConnectorPermissionSchema,
  preventSelection: /*#__PURE__*/zod.z["boolean"]().optional(),
  providerVisibility: /*#__PURE__*/ProviderVisibilitySchema.nullable().optional(),
  sourceUrl: /*#__PURE__*/zod.z.string().nullable().optional(),
  title: /*#__PURE__*/zod.z.string(),
  type: ContentNodeTypeSchema
});
var ContentNodeWithParentSchema = /*#__PURE__*/zod.z.intersection(ContentNodeSchema, /*#__PURE__*/zod.z.object({
  parentsInternalIds: /*#__PURE__*/zod.z.array(zod.z.string()).optional(),
  parentTitle: /*#__PURE__*/zod.z.string().optional().nullable()
}));
var DataSourceContentNodeSchema = /*#__PURE__*/zod.z.intersection(ContentNodeWithParentSchema, /*#__PURE__*/zod.z.object({
  dataSource: DataSourceTypeSchema,
  dataSourceViews: /*#__PURE__*/DataSourceViewSchema.array()
}));
var DataSourceViewContentNodeSchema = /*#__PURE__*/zod.z.intersection(ContentNodeWithParentSchema, /*#__PURE__*/zod.z.object({
  dataSourceView: DataSourceViewSchema
}));
var SearchWarningCodeSchema = /*#__PURE__*/zod.z.literal("truncated-query-clauses");
var PostWorkspaceSearchResponseBodySchema = /*#__PURE__*/zod.z.object({
  nodes: /*#__PURE__*/DataSourceContentNodeSchema.array(),
  warningCode: /*#__PURE__*/SearchWarningCodeSchema.optional().nullable()
});
var TOOL_RUNNING_LABEL = "Using a tool";
// MCP Related.
var ValidateActionResponseSchema = /*#__PURE__*/zod.z.object({
  success: /*#__PURE__*/zod.z["boolean"]()
});
var ActionApprovalStateSchema = /*#__PURE__*/zod.z["enum"](["approved", "rejected", "always_approved"]);
var ValidateActionRequestBodySchema = /*#__PURE__*/zod.z.object({
  actionId: /*#__PURE__*/zod.z.string(),
  approved: ActionApprovalStateSchema
});
var ClientSideMCPServerNameSchema = /*#__PURE__*/zod.z.string().min(5).max(30);
var PublicRegisterMCPRequestBodySchema = /*#__PURE__*/zod.z.object({
  serverName: ClientSideMCPServerNameSchema
});
var PublicHeartbeatMCPRequestBodySchema = /*#__PURE__*/zod.z.object({
  serverId: /*#__PURE__*/zod.z.string()
});
var RegisterMCPResponseSchema = /*#__PURE__*/zod.z.object({
  expiresAt: /*#__PURE__*/zod.z.string(),
  serverId: /*#__PURE__*/zod.z.string()
});
var HeartbeatMCPResponseSchema = /*#__PURE__*/zod.z.object({
  success: /*#__PURE__*/zod.z["boolean"](),
  expiresAt: /*#__PURE__*/zod.z.string()
});
var PublicPostMCPResultsRequestBodySchema = /*#__PURE__*/zod.z.object({
  result: /*#__PURE__*/zod.z.unknown(),
  serverId: /*#__PURE__*/zod.z.string()
});
var PostMCPRequestsRequestQuerySchema = /*#__PURE__*/zod.z.object({
  serverId: /*#__PURE__*/zod.z.string(),
  lastEventId: /*#__PURE__*/zod.z.string().optional()
});
var PostMCPResultsResponseSchema = /*#__PURE__*/zod.z.object({
  success: /*#__PURE__*/zod.z["boolean"]()
});
var BlockedActionsResponseSchema = /*#__PURE__*/zod.z.object({
  blockedActions: /*#__PURE__*/zod.z.array(BlockedActionExecutionSchema)
});
var MCPViewsRequestAvailabilitySchema = /*#__PURE__*/zod.z["enum"](["manual", "auto"]);
var GetMCPViewsRequestSchema = /*#__PURE__*/zod.z.object({
  spaceIds: /*#__PURE__*/zod.z.array(/*#__PURE__*/zod.z.string()),
  availabilities: /*#__PURE__*/zod.z.array(MCPViewsRequestAvailabilitySchema)
});
var PostSpaceMembersRequestBodySchema = /*#__PURE__*/zod.z.object({
  userIds: /*#__PURE__*/zod.z.array(/*#__PURE__*/zod.z.string())
});

var logger = console;
var HEARTBEAT_INTERVAL_MS = 15 * 60 * 1000; // 15 minutes.
var RECONNECT_DELAY_MS = 5 * 1000; // 5 seconds.
/**
 * Custom transport implementation for MCP
 * - Uses EventSource (SSE) to receive requests from Dust
 * - Uses fetch (HTTP POST) to send results back to Dust
 * - Supports workspace-scoped MCP registration only
 */
var DustMcpServerTransport = /*#__PURE__*/function () {
  function DustMcpServerTransport(dustAPI, onServerIdReceived, serverName, verbose, eventSourceHeartbeat) {
    if (serverName === void 0) {
      serverName = "Dust Extension";
    }
    if (verbose === void 0) {
      verbose = false;
    }
    if (eventSourceHeartbeat === void 0) {
      eventSourceHeartbeat = 45000;
    }
    this.dustAPI = void 0;
    this.onServerIdReceived = void 0;
    this.serverName = void 0;
    this.verbose = void 0;
    this.eventSourceHeartbeat = void 0;
    this.eventSource = null;
    this.lastEventId = null;
    this.heartbeatTimer = null;
    this.serverId = null;
    // Required by Transport interface.
    this.onmessage = void 0;
    this.onclose = void 0;
    this.onerror = void 0;
    this.sessionId = void 0;
    this.dustAPI = dustAPI;
    this.onServerIdReceived = onServerIdReceived;
    this.serverName = serverName;
    this.verbose = verbose;
    this.eventSourceHeartbeat = eventSourceHeartbeat;
  }
  /**
   * Register the MCP server with the Dust backend
   */
  var _proto = DustMcpServerTransport.prototype;
  _proto.registerServer =
  /*#__PURE__*/
  function () {
    var _registerServer = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      var registerRes, serverId;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return this.dustAPI.registerMCPServer({
              serverName: this.serverName
            });
          case 2:
            registerRes = _context.sent;
            if (!registerRes.isErr()) {
              _context.next = 6;
              break;
            }
            this.logError("Failed to register MCP server: " + registerRes.error);
            return _context.abrupt("return", false);
          case 6:
            serverId = registerRes.value.serverId;
            this.serverId = serverId;
            // Notify the parent that the serverId has been updated.
            this.onServerIdReceived(serverId);
            // Setup heartbeat to keep the server registration alive.
            this.setupHeartbeat(serverId);
            return _context.abrupt("return", true);
          case 11:
          case "end":
            return _context.stop();
        }
      }, _callee, this);
    }));
    function registerServer() {
      return _registerServer.apply(this, arguments);
    }
    return registerServer;
  }()
  /**
   * Send periodic heartbeats to keep the server registration alive.
   */
  ;
  _proto.setupHeartbeat = function setupHeartbeat(serverId) {
    var _this = this;
    // Clear any existing heartbeat timer.
    if (this.heartbeatTimer) {
      clearInterval(this.heartbeatTimer);
    }
    // Set up a new heartbeat timer (every HEARTBEAT_INTERVAL_MS).
    this.heartbeatTimer = setInterval(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
      var heartbeatRes, error;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return _this.dustAPI.heartbeatMCPServer({
              serverId: serverId
            });
          case 2:
            heartbeatRes = _context2.sent;
            if (!(heartbeatRes.isErr() || heartbeatRes.value.success === false)) {
              _context2.next = 8;
              break;
            }
            error = heartbeatRes.isErr() ? heartbeatRes.error : new Error("Server not registered");
            _this.logError("Failed to heartbeat MCP server: " + error);
            _context2.next = 8;
            return _this.registerServer();
          case 8:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    })), HEARTBEAT_INTERVAL_MS);
  }
  /**
   * Start the transport and connect to the SSE endpoint
   * This method is required by the Transport interface
   */;
  _proto.start =
  /*#__PURE__*/
  function () {
    var _start = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
      var registered, _this$onerror;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            _context3.prev = 0;
            _context3.next = 3;
            return this.registerServer();
          case 3:
            registered = _context3.sent;
            if (registered) {
              _context3.next = 6;
              break;
            }
            throw new Error("Failed to register MCP server");
          case 6:
            _context3.next = 8;
            return this.connectToRequestsStream();
          case 8:
            this.logInfo("MCP transport started successfully");
            _context3.next = 16;
            break;
          case 11:
            _context3.prev = 11;
            _context3.t0 = _context3["catch"](0);
            this.logError("Failed to start MCP transport:", _context3.t0);
            (_this$onerror = this.onerror) == null || _this$onerror.call(this, _context3.t0 instanceof Error ? _context3.t0 : new Error(String(_context3.t0)));
            throw _context3.t0;
          case 16:
          case "end":
            return _context3.stop();
        }
      }, _callee3, this, [[0, 11]]);
    }));
    function start() {
      return _start.apply(this, arguments);
    }
    return start;
  }()
  /**
   * Connect to the SSE stream for the workspace
   */
  ;
  _proto.connectToRequestsStream =
  /*#__PURE__*/
  function () {
    var _connectToRequestsStream = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
      var _this2 = this;
      var connectionResult, _connectionResult$val, url, headers;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            if (this.serverId) {
              _context4.next = 3;
              break;
            }
            this.logError("Server ID is not set");
            return _context4.abrupt("return");
          case 3:
            // Close any existing connection.
            if (this.eventSource) {
              this.eventSource.close();
              this.eventSource = null;
            }
            _context4.next = 6;
            return this.dustAPI.getMCPRequestsConnectionDetails({
              serverId: this.serverId,
              lastEventId: this.lastEventId
            });
          case 6:
            connectionResult = _context4.sent;
            if (!connectionResult.isErr()) {
              _context4.next = 9;
              break;
            }
            throw new Error("Failed to get connection details: " + connectionResult.error.message);
          case 9:
            _connectionResult$val = connectionResult.value, url = _connectionResult$val.url, headers = _connectionResult$val.headers;
            this.eventSource = new eventSourcePolyfill.EventSourcePolyfill(url, {
              headers: headers,
              heartbeatTimeout: this.eventSourceHeartbeat
            });
            this.eventSource.onmessage = function (event) {
              try {
                if (event.data === "done") {
                  // Ignore this event.
                  return;
                }
                var eventData = JSON.parse(event.data);
                // Save the eventId for reconnection purposes.
                if (eventData.eventId) {
                  _this2.lastEventId = eventData.eventId;
                }
                // The actual request is in the data property.
                var data = eventData.data;
                if (!data) {
                  _this2.logError("No data field found in the event");
                  return;
                }
                // Forward the message to the handler.
                if (_this2.onmessage) {
                  _this2.onmessage(data);
                } else {
                  _this2.logError("ERROR: onmessage handler not set - MCP response won't be sent");
                }
              } catch (error) {
                _this2.logError("Failed to parse MCP request:", error);
                _this2.onerror == null || _this2.onerror(new Error("Failed to parse MCP request: " + error));
              }
            };
            this.eventSource.onerror = function (error) {
              _this2.logError("Error in MCP EventSource connection:", error);
              _this2.onerror == null || _this2.onerror(new Error("SSE connection error: " + error));
              // Attempt to reconnect after a delay.
              setTimeout(function () {
                if (_this2.eventSource) {
                  _this2.logInfo("Attempting to reconnect to SSE...");
                  void _this2.connectToRequestsStream()["catch"](function (reconnectError) {
                    _this2.logError("Failed to reconnect:", reconnectError);
                  });
                }
              }, RECONNECT_DELAY_MS); // Wait before reconnecting.
            };
            this.eventSource.onopen = function () {
              _this2.logInfo("MCP SSE connection established");
            };
            this.eventSource.addEventListener("close", function () {
              _this2.logInfo("MCP SSE connection closed");
              _this2.onclose == null || _this2.onclose();
            });
          case 15:
          case "end":
            return _context4.stop();
        }
      }, _callee4, this);
    }));
    function connectToRequestsStream() {
      return _connectToRequestsStream.apply(this, arguments);
    }
    return connectToRequestsStream;
  }()
  /**
   * Send a message to the server
   * This method is required by the Transport interface
   */
  ;
  _proto.send =
  /*#__PURE__*/
  function () {
    var _send = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(message) {
      var postResultsRes, _this$onerror2;
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            if (this.serverId) {
              _context5.next = 3;
              break;
            }
            this.logError("Server ID is not set");
            return _context5.abrupt("return");
          case 3:
            _context5.next = 5;
            return this.dustAPI.postMCPResults({
              serverId: this.serverId,
              result: message
            });
          case 5:
            postResultsRes = _context5.sent;
            if (postResultsRes.isErr()) {
              this.logError("Failed to send MCP result:", postResultsRes.error);
              (_this$onerror2 = this.onerror) == null || _this$onerror2.call(this, new Error("Failed to send MCP result: " + postResultsRes.error));
            }
          case 7:
          case "end":
            return _context5.stop();
        }
      }, _callee5, this);
    }));
    function send(_x) {
      return _send.apply(this, arguments);
    }
    return send;
  }()
  /**
   * Close the transport and disconnect from the SSE endpoint
   * This method is required by the Transport interface
   */
  ;
  _proto.close =
  /*#__PURE__*/
  function () {
    var _close = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
      var _this$onclose;
      return _regeneratorRuntime().wrap(function _callee6$(_context6) {
        while (1) switch (_context6.prev = _context6.next) {
          case 0:
            // Clear heartbeat timer.
            if (this.heartbeatTimer) {
              clearInterval(this.heartbeatTimer);
              this.heartbeatTimer = null;
            }
            // Close SSE connection.
            if (this.eventSource) {
              this.logInfo("Closing MCP SSE connection");
              this.eventSource.close();
              this.eventSource = null;
            }
            // Trigger onclose callback.
            (_this$onclose = this.onclose) == null || _this$onclose.call(this);
          case 3:
          case "end":
            return _context6.stop();
        }
      }, _callee6, this);
    }));
    function close() {
      return _close.apply(this, arguments);
    }
    return close;
  }();
  _proto.logError = function logError() {
    if (this.verbose) {
      logger.error.apply(logger, arguments);
    }
  };
  _proto.logInfo = function logInfo() {
    if (this.verbose) {
      logger.log.apply(logger, arguments);
    }
  }
  /**
   * Get the current server ID
   */;
  _proto.getServerId = function getServerId() {
    var _this$serverId;
    return (_this$serverId = this.serverId) != null ? _this$serverId : undefined;
  };
  return DustMcpServerTransport;
}();

// Copied from front/hooks/useEventSource.ts
var DEFAULT_MAX_RECONNECT_ATTEMPTS = 10;
var DEFAULT_RECONNECT_DELAY = 5000;
var textFromResponse = /*#__PURE__*/function () {
  var _ref3 = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(response) {
    var reader, decoder, result, done, _yield$reader$read, value, doneReading;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          if (!(typeof response.body === "string")) {
            _context.next = 2;
            break;
          }
          return _context.abrupt("return", response.body);
        case 2:
          // Convert ReadableStream to string
          reader = response.body.getReader();
          decoder = new TextDecoder();
          result = "";
          _context.prev = 5;
          done = false;
        case 7:
          if (done) {
            _context.next = 17;
            break;
          }
          _context.next = 10;
          return reader.read();
        case 10:
          _yield$reader$read = _context.sent;
          value = _yield$reader$read.value;
          doneReading = _yield$reader$read.done;
          done = doneReading;
          if (value) {
            result += decoder.decode(value, {
              stream: true
            });
          }
          _context.next = 7;
          break;
        case 17:
          result += decoder.decode();
        case 18:
          _context.prev = 18;
          reader.releaseLock();
          return _context.finish(18);
        case 21:
          return _context.abrupt("return", result);
        case 22:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[5,, 18, 21]]);
  }));
  return function textFromResponse(_x) {
    return _ref3.apply(this, arguments);
  };
}();
var DustAPI = /*#__PURE__*/function () {
  /**
   * @param credentials DustAPICrededentials
   */
  function DustAPI(config, credentials, logger, urlOverride) {
    this._url = void 0;
    this._credentials = void 0;
    this._logger = void 0;
    this._urlOverride = void 0;
    this._url = config.url;
    this._credentials = credentials;
    this._logger = logger;
    this._urlOverride = urlOverride;
  }
  var _proto = DustAPI.prototype;
  _proto.workspaceId = function workspaceId() {
    return this._credentials.workspaceId;
  };
  _proto.setWorkspaceId = function setWorkspaceId(workspaceId) {
    this._credentials.workspaceId = workspaceId;
  };
  _proto.apiUrl = function apiUrl() {
    return this._urlOverride ? this._urlOverride : this._url;
  };
  _proto.getApiKey = /*#__PURE__*/function () {
    var _getApiKey = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            if (!(typeof this._credentials.apiKey === "function")) {
              _context2.next = 2;
              break;
            }
            return _context2.abrupt("return", this._credentials.apiKey());
          case 2:
            return _context2.abrupt("return", this._credentials.apiKey);
          case 3:
          case "end":
            return _context2.stop();
        }
      }, _callee2, this);
    }));
    function getApiKey() {
      return _getApiKey.apply(this, arguments);
    }
    return getApiKey;
  }();
  _proto.baseHeaders = /*#__PURE__*/function () {
    var _baseHeaders = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
      var headers;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return this.getApiKey();
          case 2:
            _context3.t0 = _context3.sent;
            _context3.t1 = "Bearer " + _context3.t0;
            headers = {
              Authorization: _context3.t1
            };
            if (this._credentials.extraHeaders) {
              Object.assign(headers, this._credentials.extraHeaders);
            }
            return _context3.abrupt("return", headers);
          case 7:
          case "end":
            return _context3.stop();
        }
      }, _callee3, this);
    }));
    function baseHeaders() {
      return _baseHeaders.apply(this, arguments);
    }
    return baseHeaders;
  }()
  /**
   * Fetches the current user's information from the API.
   *
   * This method sends a GET request to the `/api/v1/me` endpoint with the necessary authorization
   * headers. It then processes the response to extract the user information.  Note that this will
   * only work if you are using an OAuth2 token. It will always fail with a workspace API key.
   *
   * @returns {Promise<Result<User, Error>>} A promise that resolves to a Result object containing
   * either the user information or an error.
   */
  ;
  _proto.me =
  /*#__PURE__*/
  function () {
    var _me = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
      var headers, res, r;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return this.getApiKey();
          case 2:
            _context4.t0 = _context4.sent;
            _context4.t1 = "Bearer " + _context4.t0;
            headers = {
              "Content-Type": "application/json",
              Authorization: _context4.t1
            };
            _context4.next = 7;
            return this._fetchWithError(this.apiUrl() + "/api/v1/me", {
              method: "GET",
              headers: headers
            });
          case 7:
            res = _context4.sent;
            _context4.next = 10;
            return this._resultFromResponse(MeResponseSchema, res);
          case 10:
            r = _context4.sent;
            if (!r.isErr()) {
              _context4.next = 13;
              break;
            }
            return _context4.abrupt("return", r);
          case 13:
            return _context4.abrupt("return", new Ok(r.value.user));
          case 14:
          case "end":
            return _context4.stop();
        }
      }, _callee4, this);
    }));
    function me() {
      return _me.apply(this, arguments);
    }
    return me;
  }();
  _proto.request = /*#__PURE__*/function () {
    var _request = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(args) {
      var _args$overrideWorkspa;
      var url, headers, res;
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            // Conveniently clean path from any leading "/" just in case
            args.path = args.path.replace(/^\/+/, "");
            url = this.apiUrl() + "/api/v1/w/" + ((_args$overrideWorkspa = args.overrideWorkspaceId) != null ? _args$overrideWorkspa : this.workspaceId()) + "/" + args.path;
            if (args.query) {
              url += "?" + args.query.toString();
            }
            _context5.t0 = _extends;
            _context5.t1 = {};
            _context5.next = 7;
            return this.baseHeaders();
          case 7:
            _context5.t2 = _context5.sent;
            _context5.t3 = args.headers;
            headers = (0, _context5.t0)(_context5.t1, _context5.t2, _context5.t3);
            headers["Content-Type"] = "application/json";
            if (args.stream) {
              headers["Accept"] = "text/event-stream";
            }
            _context5.next = 14;
            return this._fetchWithError(url, {
              method: args.method,
              headers: headers,
              body: args.body ? JSON.stringify(args.body) : undefined,
              signal: args.signal,
              stream: args.stream
            });
          case 14:
            res = _context5.sent;
            return _context5.abrupt("return", res);
          case 16:
          case "end":
            return _context5.stop();
        }
      }, _callee5, this);
    }));
    function request(_x2) {
      return _request.apply(this, arguments);
    }
    return request;
  }()
  /**
   * This functions talks directly to the Dust production API to create a run.
   *
   * @param app DustAppType the app to run streamed
   * @param config DustAppConfigType the app config
   * @param inputs any[] the app inputs
   */
  ;
  _proto.runApp =
  /*#__PURE__*/
  function () {
    var _runApp = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(_ref4, config, inputs, _temp) {
      var workspaceId, appId, appHash, appSpaceId, _ref5, useWorkspaceCredentials, res, r;
      return _regeneratorRuntime().wrap(function _callee6$(_context6) {
        while (1) switch (_context6.prev = _context6.next) {
          case 0:
            workspaceId = _ref4.workspaceId, appId = _ref4.appId, appHash = _ref4.appHash, appSpaceId = _ref4.appSpaceId;
            _ref5 = _temp === void 0 ? {
              useWorkspaceCredentials: false
            } : _temp, useWorkspaceCredentials = _ref5.useWorkspaceCredentials;
            _context6.next = 4;
            return this.request({
              overrideWorkspaceId: workspaceId,
              path: "spaces/" + appSpaceId + "/apps/" + appId + "/runs",
              query: new URLSearchParams({
                use_workspace_credentials: useWorkspaceCredentials ? "true" : "false"
              }),
              method: "POST",
              body: {
                specification_hash: appHash,
                config: config,
                stream: false,
                blocking: true,
                inputs: inputs
              }
            });
          case 4:
            res = _context6.sent;
            _context6.next = 7;
            return this._resultFromResponse(RunAppResponseSchema, res);
          case 7:
            r = _context6.sent;
            if (!r.isErr()) {
              _context6.next = 10;
              break;
            }
            return _context6.abrupt("return", r);
          case 10:
            return _context6.abrupt("return", new Ok(r.value.run));
          case 11:
          case "end":
            return _context6.stop();
        }
      }, _callee6, this);
    }));
    function runApp(_x3, _x4, _x5, _x6) {
      return _runApp.apply(this, arguments);
    }
    return runApp;
  }()
  /**
   * This functions talks directly to the Dust production API to create a streamed run.
   *
   * @param app DustAppType the app to run streamed
   * @param config DustAppConfigType the app config
   * @param inputs any[] the app inputs
   */
  ;
  _proto.runAppStreamed =
  /*#__PURE__*/
  function () {
    var _runAppStreamed = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9(_ref6, config,
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    inputs, _temp2) {
      var workspaceId, appId, appHash, appSpaceId, _ref7, useWorkspaceCredentials, res, processStreamedRunResponse, _processStreamedRunResponse;
      return _regeneratorRuntime().wrap(function _callee9$(_context9) {
        while (1) switch (_context9.prev = _context9.next) {
          case 0:
            _processStreamedRunResponse = function _processStreamedRunRe2() {
              _processStreamedRunResponse = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8(res, logger) {
                var text, hasRunId, rejectDustRunIdPromise, resolveDustRunIdPromise, dustRunIdPromise, pendingEvents, parser, streamEvents;
                return _regeneratorRuntime().wrap(function _callee8$(_context8) {
                  while (1) switch (_context8.prev = _context8.next) {
                    case 0:
                      if (!(!res.ok || !res.body)) {
                        _context8.next = 5;
                        break;
                      }
                      _context8.next = 3;
                      return textFromResponse(res);
                    case 3:
                      text = _context8.sent;
                      return _context8.abrupt("return", new Err({
                        type: "dust_api_error",
                        message: "Error running streamed app: status_code=" + res.status + " body=" + text
                      }));
                    case 5:
                      hasRunId = false;
                      dustRunIdPromise = new Promise(function (resolve, reject) {
                        rejectDustRunIdPromise = reject;
                        resolveDustRunIdPromise = resolve;
                      });
                      pendingEvents = [];
                      parser = eventsourceParser.createParser(function (event) {
                        if (event.type === "event") {
                          if (event.data) {
                            try {
                              var _data$content;
                              var data = JSON.parse(event.data);
                              switch (data.type) {
                                case "error":
                                  {
                                    pendingEvents.push({
                                      type: "error",
                                      content: {
                                        code: data.content.code,
                                        message: data.content.message
                                      }
                                    });
                                    break;
                                  }
                                case "run_status":
                                  {
                                    pendingEvents.push({
                                      type: data.type,
                                      content: data.content
                                    });
                                    break;
                                  }
                                case "block_status":
                                  {
                                    pendingEvents.push({
                                      type: data.type,
                                      content: data.content
                                    });
                                    break;
                                  }
                                case "block_execution":
                                  {
                                    pendingEvents.push({
                                      type: data.type,
                                      content: data.content
                                    });
                                    break;
                                  }
                                case "tokens":
                                  {
                                    pendingEvents.push({
                                      type: "tokens",
                                      content: data.content
                                    });
                                    break;
                                  }
                                case "reasoning_tokens":
                                  {
                                    pendingEvents.push({
                                      type: "reasoning_tokens",
                                      content: data.content
                                    });
                                    break;
                                  }
                                case "reasoning_item":
                                  {
                                    pendingEvents.push({
                                      type: "reasoning_item",
                                      content: data.content
                                    });
                                    break;
                                  }
                                case "function_call":
                                  {
                                    pendingEvents.push({
                                      type: "function_call",
                                      content: data.content
                                    });
                                    break;
                                  }
                                case "function_call_arguments_tokens":
                                  {
                                    pendingEvents.push({
                                      type: "function_call_arguments_tokens",
                                      content: data.content
                                    });
                                    break;
                                  }
                                case "final":
                                  {
                                    pendingEvents.push({
                                      type: "final"
                                    });
                                    break;
                                  }
                              }
                              if ((_data$content = data.content) != null && _data$content.run_id && !hasRunId) {
                                hasRunId = true;
                                resolveDustRunIdPromise(data.content.run_id);
                              }
                            } catch (err) {
                              logger.error({
                                error: err
                              }, "Failed parsing chunk from Dust API");
                            }
                          }
                        }
                      });
                      streamEvents = /*#__PURE__*/function () {
                        var _ref = _wrapAsyncGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
                          var reader, decoder, _yield$_awaitAsyncGen, value, done, _i, _pendingEvents, event;
                          return _regeneratorRuntime().wrap(function _callee7$(_context7) {
                            while (1) switch (_context7.prev = _context7.next) {
                              case 0:
                                if (!(!res.body || typeof res.body === "string")) {
                                  _context7.next = 2;
                                  break;
                                }
                                throw new Error("Expected a stream response, but got a string or null");
                              case 2:
                                reader = res.body.getReader();
                                decoder = new TextDecoder();
                                _context7.prev = 4;
                              case 5:
                                _context7.next = 7;
                                return _awaitAsyncGenerator(reader.read());
                              case 7:
                                _yield$_awaitAsyncGen = _context7.sent;
                                value = _yield$_awaitAsyncGen.value;
                                done = _yield$_awaitAsyncGen.done;
                                if (!value) {
                                  _context7.next = 21;
                                  break;
                                }
                                parser.feed(decoder.decode(value, {
                                  stream: true
                                }));
                                _i = 0, _pendingEvents = pendingEvents;
                              case 13:
                                if (!(_i < _pendingEvents.length)) {
                                  _context7.next = 20;
                                  break;
                                }
                                event = _pendingEvents[_i];
                                _context7.next = 17;
                                return event;
                              case 17:
                                _i++;
                                _context7.next = 13;
                                break;
                              case 20:
                                pendingEvents = [];
                              case 21:
                                if (!done) {
                                  _context7.next = 23;
                                  break;
                                }
                                return _context7.abrupt("break", 25);
                              case 23:
                                _context7.next = 5;
                                break;
                              case 25:
                                if (!hasRunId) {
                                  // Once the stream is entirely consumed, if we haven't received a run id, reject the
                                  // promise.
                                  setImmediate(function () {
                                    logger.error({}, "No run id received.");
                                    rejectDustRunIdPromise(new Error("No run id received"));
                                  });
                                }
                                _context7.next = 33;
                                break;
                              case 28:
                                _context7.prev = 28;
                                _context7.t0 = _context7["catch"](4);
                                logger.error({
                                  error: _context7.t0,
                                  errorStr: JSON.stringify(_context7.t0),
                                  errorSource: "processStreamedRunResponse"
                                }, "DustAPI error: streaming chunks");
                                _context7.next = 33;
                                return {
                                  type: "error",
                                  content: {
                                    code: "stream_error",
                                    message: "Error streaming chunks"
                                  }
                                };
                              case 33:
                              case "end":
                                return _context7.stop();
                            }
                          }, _callee7, null, [[4, 28]]);
                        }));
                        return function streamEvents() {
                          return _ref.apply(this, arguments);
                        };
                      }();
                      return _context8.abrupt("return", new Ok({
                        eventStream: streamEvents(),
                        dustRunId: dustRunIdPromise
                      }));
                    case 11:
                    case "end":
                      return _context8.stop();
                  }
                }, _callee8);
              }));
              return _processStreamedRunResponse.apply(this, arguments);
            };
            processStreamedRunResponse = function _processStreamedRunRe(_x11, _x12) {
              return _processStreamedRunResponse.apply(this, arguments);
            };
            workspaceId = _ref6.workspaceId, appId = _ref6.appId, appHash = _ref6.appHash, appSpaceId = _ref6.appSpaceId;
            _ref7 = _temp2 === void 0 ? {
              useWorkspaceCredentials: false
            } : _temp2, useWorkspaceCredentials = _ref7.useWorkspaceCredentials;
            _context9.next = 6;
            return this.request({
              overrideWorkspaceId: workspaceId,
              path: "spaces/" + appSpaceId + "/apps/" + appId + "/runs",
              query: new URLSearchParams({
                use_workspace_credentials: useWorkspaceCredentials ? "true" : "false"
              }),
              method: "POST",
              body: {
                specification_hash: appHash,
                config: config,
                stream: true,
                blocking: false,
                inputs: inputs
              },
              stream: true
            });
          case 6:
            res = _context9.sent;
            if (!res.isErr()) {
              _context9.next = 9;
              break;
            }
            return _context9.abrupt("return", res);
          case 9:
            return _context9.abrupt("return", processStreamedRunResponse(res.value.response, this._logger));
          case 10:
          case "end":
            return _context9.stop();
        }
      }, _callee9, this);
    }));
    function runAppStreamed(_x7, _x8, _x9, _x10) {
      return _runAppStreamed.apply(this, arguments);
    }
    return runAppStreamed;
  }()
  /**
   * This actions talks to the Dust production API to retrieve the list of data sources of the
   * current workspace.
   */
  ;
  _proto.getDataSources =
  /*#__PURE__*/
  function () {
    var _getDataSources = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
      var res, r;
      return _regeneratorRuntime().wrap(function _callee10$(_context10) {
        while (1) switch (_context10.prev = _context10.next) {
          case 0:
            _context10.next = 2;
            return this.request({
              method: "GET",
              path: "data_sources"
            });
          case 2:
            res = _context10.sent;
            _context10.next = 5;
            return this._resultFromResponse(GetDataSourcesResponseSchema, res);
          case 5:
            r = _context10.sent;
            if (!r.isErr()) {
              _context10.next = 8;
              break;
            }
            return _context10.abrupt("return", r);
          case 8:
            return _context10.abrupt("return", new Ok(r.value.data_sources));
          case 9:
          case "end":
            return _context10.stop();
        }
      }, _callee10, this);
    }));
    function getDataSources() {
      return _getDataSources.apply(this, arguments);
    }
    return getDataSources;
  }();
  _proto.getAgentConfigurations = /*#__PURE__*/function () {
    var _getAgentConfigurations = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee11(_ref8) {
      var view, _ref8$includes, includes, getQueryString, queryString, path, res, r;
      return _regeneratorRuntime().wrap(function _callee11$(_context11) {
        while (1) switch (_context11.prev = _context11.next) {
          case 0:
            getQueryString = function _getQueryString() {
              var params = new URLSearchParams();
              if (typeof view === "string") {
                params.append("view", view);
              }
              if (includes.includes("authors")) {
                params.append("withAuthors", "true");
              }
              return params.toString();
            };
            view = _ref8.view, _ref8$includes = _ref8.includes, includes = _ref8$includes === void 0 ? [] : _ref8$includes; // Function to generate query parameters.
            queryString = view || includes.length > 0 ? getQueryString() : null;
            path = queryString ? "assistant/agent_configurations?" + queryString : "assistant/agent_configurations";
            _context11.next = 6;
            return this.request({
              path: path,
              method: "GET"
            });
          case 6:
            res = _context11.sent;
            _context11.next = 9;
            return this._resultFromResponse(GetAgentConfigurationsResponseSchema, res);
          case 9:
            r = _context11.sent;
            if (!r.isErr()) {
              _context11.next = 12;
              break;
            }
            return _context11.abrupt("return", r);
          case 12:
            return _context11.abrupt("return", new Ok(r.value.agentConfigurations));
          case 13:
          case "end":
            return _context11.stop();
        }
      }, _callee11, this);
    }));
    function getAgentConfigurations(_x13) {
      return _getAgentConfigurations.apply(this, arguments);
    }
    return getAgentConfigurations;
  }();
  _proto.postContentFragment = /*#__PURE__*/function () {
    var _postContentFragment = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee12(_ref9) {
      var conversationId, contentFragment, res, r;
      return _regeneratorRuntime().wrap(function _callee12$(_context12) {
        while (1) switch (_context12.prev = _context12.next) {
          case 0:
            conversationId = _ref9.conversationId, contentFragment = _ref9.contentFragment;
            _context12.next = 3;
            return this.request({
              method: "POST",
              path: "assistant/conversations/" + conversationId + "/content_fragments",
              body: _extends({}, contentFragment)
            });
          case 3:
            res = _context12.sent;
            _context12.next = 6;
            return this._resultFromResponse(PostContentFragmentResponseSchema, res);
          case 6:
            r = _context12.sent;
            if (!r.isErr()) {
              _context12.next = 9;
              break;
            }
            return _context12.abrupt("return", r);
          case 9:
            return _context12.abrupt("return", new Ok(r.value.contentFragment));
          case 10:
          case "end":
            return _context12.stop();
        }
      }, _callee12, this);
    }));
    function postContentFragment(_x14) {
      return _postContentFragment.apply(this, arguments);
    }
    return postContentFragment;
  }();
  _proto.createGenericAgentConfiguration = /*#__PURE__*/function () {
    var _createGenericAgentConfiguration = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee13(_ref10) {
      var name, description, instructions, emoji, subAgentName, subAgentDescription, subAgentInstructions, subAgentEmoji, res, r;
      return _regeneratorRuntime().wrap(function _callee13$(_context13) {
        while (1) switch (_context13.prev = _context13.next) {
          case 0:
            name = _ref10.name, description = _ref10.description, instructions = _ref10.instructions, emoji = _ref10.emoji, subAgentName = _ref10.subAgentName, subAgentDescription = _ref10.subAgentDescription, subAgentInstructions = _ref10.subAgentInstructions, subAgentEmoji = _ref10.subAgentEmoji;
            _context13.next = 3;
            return this.request({
              method: "POST",
              path: "assistant/generic_agents",
              body: {
                name: name,
                description: description,
                instructions: instructions,
                emoji: emoji,
                subAgentName: subAgentName,
                subAgentDescription: subAgentDescription,
                subAgentInstructions: subAgentInstructions,
                subAgentEmoji: subAgentEmoji
              }
            });
          case 3:
            res = _context13.sent;
            _context13.next = 6;
            return this._resultFromResponse(CreateGenericAgentConfigurationResponseSchema, res);
          case 6:
            r = _context13.sent;
            if (!r.isErr()) {
              _context13.next = 9;
              break;
            }
            return _context13.abrupt("return", r);
          case 9:
            return _context13.abrupt("return", new Ok(r.value));
          case 10:
          case "end":
            return _context13.stop();
        }
      }, _callee13, this);
    }));
    function createGenericAgentConfiguration(_x15) {
      return _createGenericAgentConfiguration.apply(this, arguments);
    }
    return createGenericAgentConfiguration;
  }() // When creating a conversation with a user message, the API returns only after the user message
  // was created (and if applicable the associated agent messages).
  ;
  _proto.createConversation =
  /*#__PURE__*/
  function () {
    var _createConversation = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee14(_ref11) {
      var title, visibility, depth, message, contentFragment, contentFragments, _ref11$blocking, blocking, _ref11$skipToolsValid, skipToolsValidation, params, queryParams, res;
      return _regeneratorRuntime().wrap(function _callee14$(_context14) {
        while (1) switch (_context14.prev = _context14.next) {
          case 0:
            title = _ref11.title, visibility = _ref11.visibility, depth = _ref11.depth, message = _ref11.message, contentFragment = _ref11.contentFragment, contentFragments = _ref11.contentFragments, _ref11$blocking = _ref11.blocking, blocking = _ref11$blocking === void 0 ? false : _ref11$blocking, _ref11$skipToolsValid = _ref11.skipToolsValidation, skipToolsValidation = _ref11$skipToolsValid === void 0 ? false : _ref11$skipToolsValid, params = _ref11.params;
            queryParams = new URLSearchParams(params);
            _context14.next = 4;
            return this.request({
              method: "POST",
              path: "assistant/conversations",
              query: queryParams.toString() ? queryParams : undefined,
              body: {
                title: title,
                visibility: visibility,
                depth: depth,
                message: message,
                contentFragment: contentFragment,
                contentFragments: contentFragments,
                blocking: blocking,
                skipToolsValidation: skipToolsValidation
              }
            });
          case 4:
            res = _context14.sent;
            return _context14.abrupt("return", this._resultFromResponse(CreateConversationResponseSchema, res));
          case 6:
          case "end":
            return _context14.stop();
        }
      }, _callee14, this);
    }));
    function createConversation(_x16) {
      return _createConversation.apply(this, arguments);
    }
    return createConversation;
  }();
  _proto.postUserMessage = /*#__PURE__*/function () {
    var _postUserMessage = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee15(_ref12) {
      var conversationId, message, res, r;
      return _regeneratorRuntime().wrap(function _callee15$(_context15) {
        while (1) switch (_context15.prev = _context15.next) {
          case 0:
            conversationId = _ref12.conversationId, message = _ref12.message;
            _context15.next = 3;
            return this.request({
              method: "POST",
              path: "assistant/conversations/" + conversationId + "/messages",
              body: _extends({}, message)
            });
          case 3:
            res = _context15.sent;
            _context15.next = 6;
            return this._resultFromResponse(PostUserMessageResponseSchema, res);
          case 6:
            r = _context15.sent;
            if (!r.isErr()) {
              _context15.next = 9;
              break;
            }
            return _context15.abrupt("return", r);
          case 9:
            return _context15.abrupt("return", new Ok(r.value.message));
          case 10:
          case "end":
            return _context15.stop();
        }
      }, _callee15, this);
    }));
    function postUserMessage(_x17) {
      return _postUserMessage.apply(this, arguments);
    }
    return postUserMessage;
  }();
  _proto.streamAgentAnswerEvents = /*#__PURE__*/function () {
    var _streamAgentAnswerEvents = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee16(_ref13) {
      var _options$maxReconnect, _options$reconnectDel, _options$autoReconnec;
      var conversation, userMessageId, signal, _ref13$options, options, agentMessages, agentMessage;
      return _regeneratorRuntime().wrap(function _callee16$(_context16) {
        while (1) switch (_context16.prev = _context16.next) {
          case 0:
            conversation = _ref13.conversation, userMessageId = _ref13.userMessageId, signal = _ref13.signal, _ref13$options = _ref13.options, options = _ref13$options === void 0 ? {
              maxReconnectAttempts: DEFAULT_MAX_RECONNECT_ATTEMPTS,
              reconnectDelay: DEFAULT_RECONNECT_DELAY,
              autoReconnect: true
            } : _ref13$options;
            agentMessages = conversation.content.map(function (versions) {
              var m = versions[versions.length - 1];
              return m;
            }).filter(function (m) {
              return m && m.type === "agent_message" && m.parentMessageId === userMessageId;
            });
            if (!(agentMessages.length === 0)) {
              _context16.next = 4;
              break;
            }
            return _context16.abrupt("return", new Err(new Error("Failed to retrieve agent message")));
          case 4:
            agentMessage = agentMessages[0];
            return _context16.abrupt("return", this.streamAgentMessageEvents({
              conversation: conversation,
              agentMessage: agentMessage,
              signal: signal,
              options: {
                maxReconnectAttempts: (_options$maxReconnect = options.maxReconnectAttempts) != null ? _options$maxReconnect : DEFAULT_MAX_RECONNECT_ATTEMPTS,
                reconnectDelay: (_options$reconnectDel = options.reconnectDelay) != null ? _options$reconnectDel : DEFAULT_RECONNECT_DELAY,
                autoReconnect: (_options$autoReconnec = options.autoReconnect) != null ? _options$autoReconnec : true
              }
            }));
          case 6:
          case "end":
            return _context16.stop();
        }
      }, _callee16, this);
    }));
    function streamAgentAnswerEvents(_x18) {
      return _streamAgentAnswerEvents.apply(this, arguments);
    }
    return streamAgentAnswerEvents;
  }();
  _proto.streamAgentMessageEvents = /*#__PURE__*/function () {
    var _streamAgentMessageEvents = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee19(_ref14) {
      var _this = this;
      var conversation, agentMessage, signal, options, maxReconnectAttempts, reconnectDelay, autoReconnect, lastEventId, terminalEventTypes, createRequest, logger, reconnectAttempts, receivedTerminalEvent, streamEventsWithReconnection;
      return _regeneratorRuntime().wrap(function _callee19$(_context20) {
        while (1) switch (_context20.prev = _context20.next) {
          case 0:
            conversation = _ref14.conversation, agentMessage = _ref14.agentMessage, signal = _ref14.signal, options = _ref14.options;
            maxReconnectAttempts = options.maxReconnectAttempts, reconnectDelay = options.reconnectDelay, autoReconnect = options.autoReconnect;
            lastEventId = null;
            terminalEventTypes = ["agent_message_success", "agent_error", "agent_generation_cancelled", "user_message_error"];
            createRequest = /*#__PURE__*/function () {
              var _ref15 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee17(lastId) {
                var path;
                return _regeneratorRuntime().wrap(function _callee17$(_context17) {
                  while (1) switch (_context17.prev = _context17.next) {
                    case 0:
                      path = "assistant/conversations/" + conversation.sId + "/messages/" + agentMessage.sId + "/events";
                      if (lastId) {
                        path += "?lastEventId=" + lastId;
                      }
                      return _context17.abrupt("return", _this.request({
                        method: "GET",
                        path: path,
                        signal: signal,
                        stream: true
                      }));
                    case 3:
                    case "end":
                      return _context17.stop();
                  }
                }, _callee17);
              }));
              return function createRequest(_x20) {
                return _ref15.apply(this, arguments);
              };
            }();
            logger = this._logger;
            reconnectAttempts = 0;
            receivedTerminalEvent = false;
            streamEventsWithReconnection = /*#__PURE__*/function () {
              var _ref2 = _wrapAsyncGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {
                var _loop, _ret;
                return _regeneratorRuntime().wrap(function _callee18$(_context19) {
                  while (1) switch (_context19.prev = _context19.next) {
                    case 0:
                      _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {
                        var res, error, pendingEvents, parser, reader, decoder, _yield$_awaitAsyncGen2, value, done, _iterator, _step, event;
                        return _regeneratorRuntime().wrap(function _loop$(_context18) {
                          while (1) switch (_context18.prev = _context18.next) {
                            case 0:
                              if (!(signal != null && signal.aborted)) {
                                _context18.next = 2;
                                break;
                              }
                              return _context18.abrupt("return", {
                                v: void 0
                              });
                            case 2:
                              _context18.next = 4;
                              return _awaitAsyncGenerator(createRequest(lastEventId));
                            case 4:
                              res = _context18.sent;
                              if (!res.isErr()) {
                                _context18.next = 8;
                                break;
                              }
                              error = res.error;
                              throw new Error("Error requesting event stream: " + error.message);
                            case 8:
                              if (!(!res.value.response.ok || !res.value.response.body)) {
                                _context18.next = 10;
                                break;
                              }
                              throw new Error("Error requesting event stream: status_code=" + res.value.response.status);
                            case 10:
                              pendingEvents = [];
                              parser = eventsourceParser.createParser(function (event) {
                                if (event.type === "event") {
                                  if (event.data) {
                                    try {
                                      var eventData = JSON.parse(event.data);
                                      if (eventData.eventId) {
                                        lastEventId = eventData.eventId;
                                      }
                                      pendingEvents.push(eventData.data);
                                    } catch (err) {
                                      logger.error({
                                        error: err
                                      }, "Failed parsing chunk from Dust API");
                                    }
                                  }
                                }
                              });
                              if (!(!res.value.response.body || typeof res.value.response.body === "string")) {
                                _context18.next = 14;
                                break;
                              }
                              throw new Error("Expected a stream response, but got a string or null");
                            case 14:
                              reader = res.value.response.body.getReader();
                              decoder = new TextDecoder();
                              _context18.prev = 16;
                            case 17:
                              _context18.next = 19;
                              return _awaitAsyncGenerator(reader.read());
                            case 19:
                              _yield$_awaitAsyncGen2 = _context18.sent;
                              value = _yield$_awaitAsyncGen2.value;
                              done = _yield$_awaitAsyncGen2.done;
                              if (!value) {
                                _context18.next = 33;
                                break;
                              }
                              parser.feed(decoder.decode(value, {
                                stream: true
                              }));
                              _iterator = _createForOfIteratorHelperLoose(pendingEvents);
                            case 25:
                              if ((_step = _iterator()).done) {
                                _context18.next = 32;
                                break;
                              }
                              event = _step.value;
                              _context18.next = 29;
                              return event;
                            case 29:
                              if (terminalEventTypes.includes(event.type)) {
                                receivedTerminalEvent = true;
                              }
                            case 30:
                              _context18.next = 25;
                              break;
                            case 32:
                              pendingEvents = [];
                            case 33:
                              if (!done) {
                                _context18.next = 35;
                                break;
                              }
                              return _context18.abrupt("break", 37);
                            case 35:
                              _context18.next = 17;
                              break;
                            case 37:
                              _context18.next = 43;
                              break;
                            case 39:
                              _context18.prev = 39;
                              _context18.t0 = _context18["catch"](16);
                              logger.error({
                                error: _context18.t0
                              }, "Failed processing event stream");
                              throw new Error("Error processing event stream: " + _context18.t0);
                            case 43:
                              _context18.prev = 43;
                              reader.releaseLock();
                              return _context18.finish(43);
                            case 46:
                              if (!(!receivedTerminalEvent && autoReconnect)) {
                                _context18.next = 53;
                                break;
                              }
                              reconnectAttempts += 1;
                              if (!(reconnectAttempts >= maxReconnectAttempts)) {
                                _context18.next = 50;
                                break;
                              }
                              throw new Error("Exceeded maximum reconnection attempts");
                            case 50:
                              _context18.next = 52;
                              return _awaitAsyncGenerator(new Promise(function (resolve) {
                                return setTimeout(resolve, reconnectDelay);
                              }));
                            case 52:
                              return _context18.abrupt("return", 0);
                            case 53:
                              return _context18.abrupt("return", {
                                v: void 0
                              });
                            case 54:
                            case "end":
                              return _context18.stop();
                          }
                        }, _loop, null, [[16, 39, 43, 46]]);
                      });
                    case 1:
                      return _context19.delegateYield(_loop(), "t0", 3);
                    case 3:
                      _ret = _context19.t0;
                      if (!(_ret === 0)) {
                        _context19.next = 6;
                        break;
                      }
                      return _context19.abrupt("continue", 1);
                    case 6:
                      if (!_ret) {
                        _context19.next = 8;
                        break;
                      }
                      return _context19.abrupt("return", _ret.v);
                    case 8:
                      _context19.next = 1;
                      break;
                    case 10:
                    case "end":
                      return _context19.stop();
                  }
                }, _callee18);
              }));
              return function streamEventsWithReconnection() {
                return _ref2.apply(this, arguments);
              };
            }();
            return _context20.abrupt("return", new Ok({
              eventStream: streamEventsWithReconnection()
            }));
          case 10:
          case "end":
            return _context20.stop();
        }
      }, _callee19, this);
    }));
    function streamAgentMessageEvents(_x19) {
      return _streamAgentMessageEvents.apply(this, arguments);
    }
    return streamAgentMessageEvents;
  }();
  _proto.cancelMessageGeneration = /*#__PURE__*/function () {
    var _cancelMessageGeneration = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee20(_ref16) {
      var conversationId, messageIds, res, r;
      return _regeneratorRuntime().wrap(function _callee20$(_context21) {
        while (1) switch (_context21.prev = _context21.next) {
          case 0:
            conversationId = _ref16.conversationId, messageIds = _ref16.messageIds;
            _context21.next = 3;
            return this.request({
              method: "POST",
              path: "assistant/conversations/" + conversationId + "/cancel",
              body: {
                messageIds: messageIds
              }
            });
          case 3:
            res = _context21.sent;
            _context21.next = 6;
            return this._resultFromResponse(CancelMessageGenerationResponseSchema, res);
          case 6:
            r = _context21.sent;
            if (!r.isErr()) {
              _context21.next = 11;
              break;
            }
            return _context21.abrupt("return", r);
          case 11:
            return _context21.abrupt("return", new Ok(r.value));
          case 12:
          case "end":
            return _context21.stop();
        }
      }, _callee20, this);
    }));
    function cancelMessageGeneration(_x21) {
      return _cancelMessageGeneration.apply(this, arguments);
    }
    return cancelMessageGeneration;
  }();
  _proto.getConversations = /*#__PURE__*/function () {
    var _getConversations = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee21() {
      var res, r;
      return _regeneratorRuntime().wrap(function _callee21$(_context22) {
        while (1) switch (_context22.prev = _context22.next) {
          case 0:
            _context22.next = 2;
            return this.request({
              method: "GET",
              path: "assistant/conversations"
            });
          case 2:
            res = _context22.sent;
            _context22.next = 5;
            return this._resultFromResponse(GetConversationsResponseSchema, res);
          case 5:
            r = _context22.sent;
            if (!r.isErr()) {
              _context22.next = 8;
              break;
            }
            return _context22.abrupt("return", r);
          case 8:
            return _context22.abrupt("return", new Ok(r.value.conversations));
          case 9:
          case "end":
            return _context22.stop();
        }
      }, _callee21, this);
    }));
    function getConversations() {
      return _getConversations.apply(this, arguments);
    }
    return getConversations;
  }();
  _proto.getConversation = /*#__PURE__*/function () {
    var _getConversation = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee22(_ref17) {
      var conversationId, res, r;
      return _regeneratorRuntime().wrap(function _callee22$(_context23) {
        while (1) switch (_context23.prev = _context23.next) {
          case 0:
            conversationId = _ref17.conversationId;
            _context23.next = 3;
            return this.request({
              method: "GET",
              path: "assistant/conversations/" + conversationId
            });
          case 3:
            res = _context23.sent;
            _context23.next = 6;
            return this._resultFromResponse(GetConversationResponseSchema, res);
          case 6:
            r = _context23.sent;
            if (!r.isErr()) {
              _context23.next = 9;
              break;
            }
            return _context23.abrupt("return", r);
          case 9:
            return _context23.abrupt("return", new Ok(r.value.conversation));
          case 10:
          case "end":
            return _context23.stop();
        }
      }, _callee22, this);
    }));
    function getConversation(_x22) {
      return _getConversation.apply(this, arguments);
    }
    return getConversation;
  }();
  _proto.getConversationFeedback = /*#__PURE__*/function () {
    var _getConversationFeedback = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee23(_ref18) {
      var conversationId, res, r;
      return _regeneratorRuntime().wrap(function _callee23$(_context24) {
        while (1) switch (_context24.prev = _context24.next) {
          case 0:
            conversationId = _ref18.conversationId;
            _context24.next = 3;
            return this.request({
              method: "GET",
              path: "assistant/conversations/" + conversationId + "/feedbacks"
            });
          case 3:
            res = _context24.sent;
            _context24.next = 6;
            return this._resultFromResponse(GetFeedbacksResponseSchema, res);
          case 6:
            r = _context24.sent;
            if (!r.isErr()) {
              _context24.next = 9;
              break;
            }
            return _context24.abrupt("return", r);
          case 9:
            return _context24.abrupt("return", new Ok(r.value.feedbacks));
          case 10:
          case "end":
            return _context24.stop();
        }
      }, _callee23, this);
    }));
    function getConversationFeedback(_x23) {
      return _getConversationFeedback.apply(this, arguments);
    }
    return getConversationFeedback;
  }();
  _proto.postFeedback = /*#__PURE__*/function () {
    var _postFeedback = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee24(conversationId, messageId, feedback) {
      var res;
      return _regeneratorRuntime().wrap(function _callee24$(_context25) {
        while (1) switch (_context25.prev = _context25.next) {
          case 0:
            _context25.next = 2;
            return this.request({
              method: "POST",
              path: "assistant/conversations/" + conversationId + "/messages/" + messageId + "/feedbacks",
              body: feedback
            });
          case 2:
            res = _context25.sent;
            return _context25.abrupt("return", this._resultFromResponse(PostMessageFeedbackResponseSchema, res));
          case 4:
          case "end":
            return _context25.stop();
        }
      }, _callee24, this);
    }));
    function postFeedback(_x24, _x25, _x26) {
      return _postFeedback.apply(this, arguments);
    }
    return postFeedback;
  }();
  _proto.deleteFeedback = /*#__PURE__*/function () {
    var _deleteFeedback = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee25(conversationId, messageId) {
      var res;
      return _regeneratorRuntime().wrap(function _callee25$(_context26) {
        while (1) switch (_context26.prev = _context26.next) {
          case 0:
            _context26.next = 2;
            return this.request({
              method: "DELETE",
              path: "assistant/conversations/" + conversationId + "/messages/" + messageId + "/feedbacks"
            });
          case 2:
            res = _context26.sent;
            return _context26.abrupt("return", this._resultFromResponse(PostMessageFeedbackResponseSchema, res));
          case 4:
          case "end":
            return _context26.stop();
        }
      }, _callee25, this);
    }));
    function deleteFeedback(_x27, _x28) {
      return _deleteFeedback.apply(this, arguments);
    }
    return deleteFeedback;
  }();
  _proto.tokenize = /*#__PURE__*/function () {
    var _tokenize = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee26(text, dataSourceId) {
      var res, r;
      return _regeneratorRuntime().wrap(function _callee26$(_context27) {
        while (1) switch (_context27.prev = _context27.next) {
          case 0:
            _context27.next = 2;
            return this.request({
              method: "POST",
              path: "data_sources/" + dataSourceId + "/tokenize",
              body: {
                text: text
              }
            });
          case 2:
            res = _context27.sent;
            _context27.next = 5;
            return this._resultFromResponse(TokenizeResponseSchema, res);
          case 5:
            r = _context27.sent;
            if (!r.isErr()) {
              _context27.next = 8;
              break;
            }
            return _context27.abrupt("return", r);
          case 8:
            return _context27.abrupt("return", new Ok(r.value.tokens));
          case 9:
          case "end":
            return _context27.stop();
        }
      }, _callee26, this);
    }));
    function tokenize(_x29, _x30) {
      return _tokenize.apply(this, arguments);
    }
    return tokenize;
  }();
  _proto.upsertFolder = /*#__PURE__*/function () {
    var _upsertFolder = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee27(_ref19) {
      var dataSourceId, folderId, timestamp, title, parentId, parents, mimeType, sourceUrl, providerVisibility, res, r;
      return _regeneratorRuntime().wrap(function _callee27$(_context28) {
        while (1) switch (_context28.prev = _context28.next) {
          case 0:
            dataSourceId = _ref19.dataSourceId, folderId = _ref19.folderId, timestamp = _ref19.timestamp, title = _ref19.title, parentId = _ref19.parentId, parents = _ref19.parents, mimeType = _ref19.mimeType, sourceUrl = _ref19.sourceUrl, providerVisibility = _ref19.providerVisibility;
            _context28.next = 3;
            return this.request({
              method: "POST",
              path: "data_sources/" + dataSourceId + "/folders/" + encodeURIComponent(folderId),
              body: {
                timestamp: Math.floor(timestamp),
                title: title,
                parent_id: parentId,
                parents: parents,
                mime_type: mimeType,
                source_url: sourceUrl,
                provider_visibility: providerVisibility
              }
            });
          case 3:
            res = _context28.sent;
            _context28.next = 6;
            return this._resultFromResponse(UpsertFolderResponseSchema, res);
          case 6:
            r = _context28.sent;
            if (!r.isErr()) {
              _context28.next = 9;
              break;
            }
            return _context28.abrupt("return", r);
          case 9:
            return _context28.abrupt("return", new Ok(r.value));
          case 10:
          case "end":
            return _context28.stop();
        }
      }, _callee27, this);
    }));
    function upsertFolder(_x31) {
      return _upsertFolder.apply(this, arguments);
    }
    return upsertFolder;
  }();
  _proto.deleteFolder = /*#__PURE__*/function () {
    var _deleteFolder = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee28(_ref20) {
      var dataSourceId, folderId, res, r;
      return _regeneratorRuntime().wrap(function _callee28$(_context29) {
        while (1) switch (_context29.prev = _context29.next) {
          case 0:
            dataSourceId = _ref20.dataSourceId, folderId = _ref20.folderId;
            _context29.next = 3;
            return this.request({
              method: "DELETE",
              path: "data_sources/" + dataSourceId + "/folders/" + encodeURIComponent(folderId)
            });
          case 3:
            res = _context29.sent;
            _context29.next = 6;
            return this._resultFromResponse(DeleteFolderResponseSchema, res);
          case 6:
            r = _context29.sent;
            if (!r.isErr()) {
              _context29.next = 9;
              break;
            }
            return _context29.abrupt("return", r);
          case 9:
            return _context29.abrupt("return", new Ok(r.value));
          case 10:
          case "end":
            return _context29.stop();
        }
      }, _callee28, this);
    }));
    function deleteFolder(_x32) {
      return _deleteFolder.apply(this, arguments);
    }
    return deleteFolder;
  }();
  _proto.uploadFile = /*#__PURE__*/function () {
    var _uploadFile = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee29(_ref21) {
      var contentType, fileName, fileSize, useCase, useCaseMetadata, fileObject, res, fileRes, file, formData, headers, response, _errorData$error, errorData, responseData;
      return _regeneratorRuntime().wrap(function _callee29$(_context30) {
        while (1) switch (_context30.prev = _context30.next) {
          case 0:
            contentType = _ref21.contentType, fileName = _ref21.fileName, fileSize = _ref21.fileSize, useCase = _ref21.useCase, useCaseMetadata = _ref21.useCaseMetadata, fileObject = _ref21.fileObject;
            _context30.next = 3;
            return this.request({
              method: "POST",
              path: "files",
              body: {
                contentType: contentType,
                fileName: fileName,
                fileSize: fileSize,
                useCase: useCase,
                useCaseMetadata: useCaseMetadata
              }
            });
          case 3:
            res = _context30.sent;
            _context30.next = 6;
            return this._resultFromResponse(FileUploadRequestResponseSchema, res);
          case 6:
            fileRes = _context30.sent;
            if (!fileRes.isErr()) {
              _context30.next = 9;
              break;
            }
            return _context30.abrupt("return", fileRes);
          case 9:
            file = fileRes.value.file;
            formData = new FormData();
            formData.append("file", fileObject);
            // Upload file to the obtained URL.
            _context30.prev = 12;
            _context30.next = 15;
            return this.baseHeaders();
          case 15:
            headers = _context30.sent;
            _context30.next = 18;
            return fetch(file.uploadUrl, {
              method: "POST",
              headers: headers,
              body: formData
            });
          case 18:
            response = _context30.sent;
            if (response.ok) {
              _context30.next = 24;
              break;
            }
            _context30.next = 22;
            return response.json()["catch"](function () {
              return {};
            });
          case 22:
            errorData = _context30.sent;
            return _context30.abrupt("return", new Err(new Error((errorData == null || (_errorData$error = errorData.error) == null ? void 0 : _errorData$error.message) || "Failed to upload file: " + response.status)));
          case 24:
            _context30.next = 26;
            return response.json();
          case 26:
            responseData = _context30.sent;
            return _context30.abrupt("return", new Ok(responseData.file));
          case 30:
            _context30.prev = 30;
            _context30.t0 = _context30["catch"](12);
            return _context30.abrupt("return", new Err(new Error(_context30.t0 instanceof Error ? _context30.t0.message : "Unknown error")));
          case 33:
          case "end":
            return _context30.stop();
        }
      }, _callee29, this, [[12, 30]]);
    }));
    function uploadFile(_x33) {
      return _uploadFile.apply(this, arguments);
    }
    return uploadFile;
  }();
  _proto.deleteFile = /*#__PURE__*/function () {
    var _deleteFile = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee30(_ref22) {
      var fileID, res;
      return _regeneratorRuntime().wrap(function _callee30$(_context31) {
        while (1) switch (_context31.prev = _context31.next) {
          case 0:
            fileID = _ref22.fileID;
            _context31.next = 3;
            return this.request({
              method: "DELETE",
              path: "files/" + fileID
            });
          case 3:
            res = _context31.sent;
            return _context31.abrupt("return", res);
          case 5:
          case "end":
            return _context31.stop();
        }
      }, _callee30, this);
    }));
    function deleteFile(_x34) {
      return _deleteFile.apply(this, arguments);
    }
    return deleteFile;
  }();
  _proto.getActiveMemberEmailsInWorkspace = /*#__PURE__*/function () {
    var _getActiveMemberEmailsInWorkspace = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee31() {
      var res, r;
      return _regeneratorRuntime().wrap(function _callee31$(_context32) {
        while (1) switch (_context32.prev = _context32.next) {
          case 0:
            _context32.next = 2;
            return this.request({
              method: "GET",
              path: "members/emails",
              query: new URLSearchParams({
                activeOnly: "true"
              })
            });
          case 2:
            res = _context32.sent;
            _context32.next = 5;
            return this._resultFromResponse(GetActiveMemberEmailsInWorkspaceResponseSchema, res);
          case 5:
            r = _context32.sent;
            if (!r.isErr()) {
              _context32.next = 8;
              break;
            }
            return _context32.abrupt("return", r);
          case 8:
            return _context32.abrupt("return", new Ok(r.value.emails));
          case 9:
          case "end":
            return _context32.stop();
        }
      }, _callee31, this);
    }));
    function getActiveMemberEmailsInWorkspace() {
      return _getActiveMemberEmailsInWorkspace.apply(this, arguments);
    }
    return getActiveMemberEmailsInWorkspace;
  }();
  _proto.getWorkspaceVerifiedDomains = /*#__PURE__*/function () {
    var _getWorkspaceVerifiedDomains = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee32() {
      var res, r;
      return _regeneratorRuntime().wrap(function _callee32$(_context33) {
        while (1) switch (_context33.prev = _context33.next) {
          case 0:
            _context33.next = 2;
            return this.request({
              method: "GET",
              path: "verified_domains"
            });
          case 2:
            res = _context33.sent;
            _context33.next = 5;
            return this._resultFromResponse(GetWorkspaceVerifiedDomainsResponseSchema, res);
          case 5:
            r = _context33.sent;
            if (!r.isErr()) {
              _context33.next = 8;
              break;
            }
            return _context33.abrupt("return", r);
          case 8:
            return _context33.abrupt("return", new Ok(r.value.verified_domains));
          case 9:
          case "end":
            return _context33.stop();
        }
      }, _callee32, this);
    }));
    function getWorkspaceVerifiedDomains() {
      return _getWorkspaceVerifiedDomains.apply(this, arguments);
    }
    return getWorkspaceVerifiedDomains;
  }();
  _proto.getWorkspaceFeatureFlags = /*#__PURE__*/function () {
    var _getWorkspaceFeatureFlags = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee33() {
      var res, r;
      return _regeneratorRuntime().wrap(function _callee33$(_context34) {
        while (1) switch (_context34.prev = _context34.next) {
          case 0:
            _context34.next = 2;
            return this.request({
              method: "GET",
              path: "feature_flags"
            });
          case 2:
            res = _context34.sent;
            _context34.next = 5;
            return this._resultFromResponse(GetWorkspaceFeatureFlagsResponseSchema, res);
          case 5:
            r = _context34.sent;
            if (!r.isErr()) {
              _context34.next = 8;
              break;
            }
            return _context34.abrupt("return", r);
          case 8:
            return _context34.abrupt("return", new Ok(r.value.feature_flags));
          case 9:
          case "end":
            return _context34.stop();
        }
      }, _callee33, this);
    }));
    function getWorkspaceFeatureFlags() {
      return _getWorkspaceFeatureFlags.apply(this, arguments);
    }
    return getWorkspaceFeatureFlags;
  }();
  _proto.searchDataSourceViews = /*#__PURE__*/function () {
    var _searchDataSourceViews = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee34(searchParams) {
      var res, r;
      return _regeneratorRuntime().wrap(function _callee34$(_context35) {
        while (1) switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return this.request({
              method: "GET",
              path: "data_source_views/search",
              query: searchParams
            });
          case 2:
            res = _context35.sent;
            _context35.next = 5;
            return this._resultFromResponse(SearchDataSourceViewsResponseSchema, res);
          case 5:
            r = _context35.sent;
            if (!r.isErr()) {
              _context35.next = 8;
              break;
            }
            return _context35.abrupt("return", r);
          case 8:
            return _context35.abrupt("return", new Ok(r.value.data_source_views));
          case 9:
          case "end":
            return _context35.stop();
        }
      }, _callee34, this);
    }));
    function searchDataSourceViews(_x35) {
      return _searchDataSourceViews.apply(this, arguments);
    }
    return searchDataSourceViews;
  }();
  _proto.patchDataSourceView = /*#__PURE__*/function () {
    var _patchDataSourceView = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee35(dataSourceView, patch) {
      var res, r;
      return _regeneratorRuntime().wrap(function _callee35$(_context36) {
        while (1) switch (_context36.prev = _context36.next) {
          case 0:
            _context36.next = 2;
            return this.request({
              method: "PATCH",
              path: "spaces/" + dataSourceView.spaceId + "/data_source_views/" + dataSourceView.sId,
              body: patch
            });
          case 2:
            res = _context36.sent;
            _context36.next = 5;
            return this._resultFromResponse(DataSourceViewResponseSchema, res);
          case 5:
            r = _context36.sent;
            if (!r.isErr()) {
              _context36.next = 8;
              break;
            }
            return _context36.abrupt("return", r);
          case 8:
            return _context36.abrupt("return", new Ok(r.value.dataSourceView));
          case 9:
          case "end":
            return _context36.stop();
        }
      }, _callee35, this);
    }));
    function patchDataSourceView(_x36, _x37) {
      return _patchDataSourceView.apply(this, arguments);
    }
    return patchDataSourceView;
  }();
  _proto.exportApps = /*#__PURE__*/function () {
    var _exportApps = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee36(_ref23) {
      var appSpaceId, res, r;
      return _regeneratorRuntime().wrap(function _callee36$(_context37) {
        while (1) switch (_context37.prev = _context37.next) {
          case 0:
            appSpaceId = _ref23.appSpaceId;
            _context37.next = 3;
            return this.request({
              method: "GET",
              path: "spaces/" + appSpaceId + "/apps/export"
            });
          case 3:
            res = _context37.sent;
            _context37.next = 6;
            return this._resultFromResponse(GetAppsResponseSchema, res);
          case 6:
            r = _context37.sent;
            if (!r.isErr()) {
              _context37.next = 9;
              break;
            }
            return _context37.abrupt("return", r);
          case 9:
            return _context37.abrupt("return", new Ok(r.value.apps));
          case 10:
          case "end":
            return _context37.stop();
        }
      }, _callee36, this);
    }));
    function exportApps(_x38) {
      return _exportApps.apply(this, arguments);
    }
    return exportApps;
  }();
  _proto.checkApps = /*#__PURE__*/function () {
    var _checkApps = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee37(apps, appSpaceId) {
      var res, r;
      return _regeneratorRuntime().wrap(function _callee37$(_context38) {
        while (1) switch (_context38.prev = _context38.next) {
          case 0:
            _context38.next = 2;
            return this.request({
              method: "POST",
              path: "spaces/" + appSpaceId + "/apps/check",
              body: apps
            });
          case 2:
            res = _context38.sent;
            _context38.next = 5;
            return this._resultFromResponse(AppsCheckResponseSchema, res);
          case 5:
            r = _context38.sent;
            if (!r.isErr()) {
              _context38.next = 8;
              break;
            }
            return _context38.abrupt("return", r);
          case 8:
            return _context38.abrupt("return", new Ok(r.value.apps));
          case 9:
          case "end":
            return _context38.stop();
        }
      }, _callee37, this);
    }));
    function checkApps(_x39, _x40) {
      return _checkApps.apply(this, arguments);
    }
    return checkApps;
  }();
  _proto.getSpaces = /*#__PURE__*/function () {
    var _getSpaces = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee38() {
      var res, r;
      return _regeneratorRuntime().wrap(function _callee38$(_context39) {
        while (1) switch (_context39.prev = _context39.next) {
          case 0:
            _context39.next = 2;
            return this.request({
              method: "GET",
              path: "spaces"
            });
          case 2:
            res = _context39.sent;
            _context39.next = 5;
            return this._resultFromResponse(GetSpacesResponseSchema, res);
          case 5:
            r = _context39.sent;
            if (!r.isErr()) {
              _context39.next = 8;
              break;
            }
            return _context39.abrupt("return", r);
          case 8:
            return _context39.abrupt("return", new Ok(r.value.spaces));
          case 9:
          case "end":
            return _context39.stop();
        }
      }, _callee38, this);
    }));
    function getSpaces() {
      return _getSpaces.apply(this, arguments);
    }
    return getSpaces;
  }();
  _proto.getMCPServerViews = /*#__PURE__*/function () {
    var _getMCPServerViews = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee39(spaceId, includeAuto) {
      var res, r;
      return _regeneratorRuntime().wrap(function _callee39$(_context40) {
        while (1) switch (_context40.prev = _context40.next) {
          case 0:
            if (includeAuto === void 0) {
              includeAuto = false;
            }
            _context40.next = 3;
            return this.request({
              method: "GET",
              path: "spaces/" + spaceId + "/mcp_server_views",
              query: new URLSearchParams({
                includeAuto: includeAuto.toString()
              })
            });
          case 3:
            res = _context40.sent;
            _context40.next = 6;
            return this._resultFromResponse(GetMCPServerViewsResponseSchema, res);
          case 6:
            r = _context40.sent;
            if (!r.isErr()) {
              _context40.next = 9;
              break;
            }
            return _context40.abrupt("return", r);
          case 9:
            return _context40.abrupt("return", new Ok(r.value.serverViews));
          case 10:
          case "end":
            return _context40.stop();
        }
      }, _callee39, this);
    }));
    function getMCPServerViews(_x41, _x42) {
      return _getMCPServerViews.apply(this, arguments);
    }
    return getMCPServerViews;
  }();
  _proto.searchNodes = /*#__PURE__*/function () {
    var _searchNodes = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee40(searchParams) {
      var res, r;
      return _regeneratorRuntime().wrap(function _callee40$(_context41) {
        while (1) switch (_context41.prev = _context41.next) {
          case 0:
            _context41.next = 2;
            return this.request({
              method: "POST",
              path: "search",
              body: searchParams
            });
          case 2:
            res = _context41.sent;
            _context41.next = 5;
            return this._resultFromResponse(PostWorkspaceSearchResponseBodySchema, res);
          case 5:
            r = _context41.sent;
            if (!r.isErr()) {
              _context41.next = 8;
              break;
            }
            return _context41.abrupt("return", r);
          case 8:
            return _context41.abrupt("return", new Ok(r.value.nodes));
          case 9:
          case "end":
            return _context41.stop();
        }
      }, _callee40, this);
    }));
    function searchNodes(_x43) {
      return _searchNodes.apply(this, arguments);
    }
    return searchNodes;
  }();
  _proto.retryMessage = /*#__PURE__*/function () {
    var _retryMessage = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee41(_ref24) {
      var conversationId, messageId, _ref24$blockedOnly, blockedOnly, query, res, r;
      return _regeneratorRuntime().wrap(function _callee41$(_context42) {
        while (1) switch (_context42.prev = _context42.next) {
          case 0:
            conversationId = _ref24.conversationId, messageId = _ref24.messageId, _ref24$blockedOnly = _ref24.blockedOnly, blockedOnly = _ref24$blockedOnly === void 0 ? false : _ref24$blockedOnly;
            query = blockedOnly ? new URLSearchParams({
              blocked_only: "true"
            }) : undefined;
            _context42.next = 4;
            return this.request({
              method: "POST",
              path: "assistant/conversations/" + conversationId + "/messages/" + messageId + "/retry",
              query: query
            });
          case 4:
            res = _context42.sent;
            _context42.next = 7;
            return this._resultFromResponse(RetryMessageResponseSchema, res);
          case 7:
            r = _context42.sent;
            if (!r.isErr()) {
              _context42.next = 10;
              break;
            }
            return _context42.abrupt("return", r);
          case 10:
            return _context42.abrupt("return", new Ok(r.value.message));
          case 11:
          case "end":
            return _context42.stop();
        }
      }, _callee41, this);
    }));
    function retryMessage(_x44) {
      return _retryMessage.apply(this, arguments);
    }
    return retryMessage;
  }();
  _proto._fetchWithError = /*#__PURE__*/function () {
    var _fetchWithError2 = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee42(url, _temp3) {
      var _ref25, _ref25$method, method, _ref25$headers, headers, body, signal, _ref25$stream, stream, now, res, responseBody, response, duration, err;
      return _regeneratorRuntime().wrap(function _callee42$(_context43) {
        while (1) switch (_context43.prev = _context43.next) {
          case 0:
            _ref25 = _temp3 === void 0 ? {} : _temp3, _ref25$method = _ref25.method, method = _ref25$method === void 0 ? "GET" : _ref25$method, _ref25$headers = _ref25.headers, headers = _ref25$headers === void 0 ? {} : _ref25$headers, body = _ref25.body, signal = _ref25.signal, _ref25$stream = _ref25.stream, stream = _ref25$stream === void 0 ? false : _ref25$stream;
            now = Date.now();
            _context43.prev = 2;
            _context43.next = 5;
            return fetch(url, {
              method: method,
              headers: headers,
              body: body,
              signal: signal
            });
          case 5:
            res = _context43.sent;
            if (!(stream && res.body)) {
              _context43.next = 10;
              break;
            }
            _context43.t0 = res.body;
            _context43.next = 13;
            break;
          case 10:
            _context43.next = 12;
            return res.text();
          case 12:
            _context43.t0 = _context43.sent;
          case 13:
            responseBody = _context43.t0;
            response = {
              status: res.status,
              url: res.url,
              body: responseBody,
              ok: res.ok
            };
            return _context43.abrupt("return", new Ok({
              response: response,
              duration: Date.now() - now
            }));
          case 18:
            _context43.prev = 18;
            _context43.t1 = _context43["catch"](2);
            duration = Date.now() - now;
            err = {
              type: "unexpected_network_error",
              message: "Unexpected network error from DustAPI: " + _context43.t1
            };
            this._logger.error({
              dustError: err,
              url: url,
              duration: duration,
              connectorsError: err,
              error: _context43.t1
            }, "DustAPI error");
            return _context43.abrupt("return", new Err(err));
          case 24:
          case "end":
            return _context43.stop();
        }
      }, _callee42, this, [[2, 18]]);
    }));
    function _fetchWithError(_x45, _x46) {
      return _fetchWithError2.apply(this, arguments);
    }
    return _fetchWithError;
  }() // MCP Related.
  ;
  _proto.getBlockedActions =
  /*#__PURE__*/
  function () {
    var _getBlockedActions = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee43(_ref26) {
      var conversationId, res;
      return _regeneratorRuntime().wrap(function _callee43$(_context44) {
        while (1) switch (_context44.prev = _context44.next) {
          case 0:
            conversationId = _ref26.conversationId;
            _context44.next = 3;
            return this.request({
              method: "GET",
              path: "assistant/conversations/" + conversationId + "/actions/blocked"
            });
          case 3:
            res = _context44.sent;
            return _context44.abrupt("return", this._resultFromResponse(BlockedActionsResponseSchema, res));
          case 5:
          case "end":
            return _context44.stop();
        }
      }, _callee43, this);
    }));
    function getBlockedActions(_x47) {
      return _getBlockedActions.apply(this, arguments);
    }
    return getBlockedActions;
  }();
  _proto.validateAction = /*#__PURE__*/function () {
    var _validateAction = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee44(_ref27) {
      var conversationId, messageId, actionId, approved, res;
      return _regeneratorRuntime().wrap(function _callee44$(_context45) {
        while (1) switch (_context45.prev = _context45.next) {
          case 0:
            conversationId = _ref27.conversationId, messageId = _ref27.messageId, actionId = _ref27.actionId, approved = _ref27.approved;
            _context45.next = 3;
            return this.request({
              method: "POST",
              path: "assistant/conversations/" + conversationId + "/messages/" + messageId + "/validate-action",
              body: {
                actionId: actionId,
                approved: approved
              }
            });
          case 3:
            res = _context45.sent;
            return _context45.abrupt("return", this._resultFromResponse(ValidateActionResponseSchema, res));
          case 5:
          case "end":
            return _context45.stop();
        }
      }, _callee44, this);
    }));
    function validateAction(_x48) {
      return _validateAction.apply(this, arguments);
    }
    return validateAction;
  }();
  _proto.registerMCPServer = /*#__PURE__*/function () {
    var _registerMCPServer = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee45(_ref28) {
      var serverName, body, res;
      return _regeneratorRuntime().wrap(function _callee45$(_context46) {
        while (1) switch (_context46.prev = _context46.next) {
          case 0:
            serverName = _ref28.serverName;
            body = {
              serverName: serverName
            };
            _context46.next = 4;
            return this.request({
              method: "POST",
              path: "mcp/register",
              body: body
            });
          case 4:
            res = _context46.sent;
            return _context46.abrupt("return", this._resultFromResponse(RegisterMCPResponseSchema, res));
          case 6:
          case "end":
            return _context46.stop();
        }
      }, _callee45, this);
    }));
    function registerMCPServer(_x49) {
      return _registerMCPServer.apply(this, arguments);
    }
    return registerMCPServer;
  }();
  _proto.heartbeatMCPServer = /*#__PURE__*/function () {
    var _heartbeatMCPServer = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee46(_ref29) {
      var serverId, body, res;
      return _regeneratorRuntime().wrap(function _callee46$(_context47) {
        while (1) switch (_context47.prev = _context47.next) {
          case 0:
            serverId = _ref29.serverId;
            body = {
              serverId: serverId
            };
            _context47.next = 4;
            return this.request({
              method: "POST",
              path: "mcp/heartbeat",
              body: body
            });
          case 4:
            res = _context47.sent;
            return _context47.abrupt("return", this._resultFromResponse(HeartbeatMCPResponseSchema, res));
          case 6:
          case "end":
            return _context47.stop();
        }
      }, _callee46, this);
    }));
    function heartbeatMCPServer(_x50) {
      return _heartbeatMCPServer.apply(this, arguments);
    }
    return heartbeatMCPServer;
  }();
  _proto.postMCPResults = /*#__PURE__*/function () {
    var _postMCPResults = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee47(_ref30) {
      var result, serverId, body, res;
      return _regeneratorRuntime().wrap(function _callee47$(_context48) {
        while (1) switch (_context48.prev = _context48.next) {
          case 0:
            result = _ref30.result, serverId = _ref30.serverId;
            body = {
              result: result,
              serverId: serverId
            };
            _context48.next = 4;
            return this.request({
              method: "POST",
              path: "mcp/results",
              body: body
            });
          case 4:
            res = _context48.sent;
            return _context48.abrupt("return", this._resultFromResponse(PostMCPResultsResponseSchema, res));
          case 6:
          case "end":
            return _context48.stop();
        }
      }, _callee47, this);
    }));
    function postMCPResults(_x51) {
      return _postMCPResults.apply(this, arguments);
    }
    return postMCPResults;
  }();
  _proto.getMCPRequestsConnectionDetails = /*#__PURE__*/function () {
    var _getMCPRequestsConnectionDetails = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee48(_ref31) {
      var serverId, lastEventId, url, params, headers;
      return _regeneratorRuntime().wrap(function _callee48$(_context49) {
        while (1) switch (_context49.prev = _context49.next) {
          case 0:
            serverId = _ref31.serverId, lastEventId = _ref31.lastEventId;
            url = this.apiUrl() + "/api/v1/w/" + this.workspaceId() + "/mcp/requests";
            params = new URLSearchParams(_extends({
              serverId: serverId
            }, lastEventId ? {
              lastEventId: lastEventId
            } : {}));
            _context49.next = 5;
            return this.baseHeaders();
          case 5:
            headers = _context49.sent;
            return _context49.abrupt("return", new Ok({
              url: url + "?" + params.toString(),
              headers: headers
            }));
          case 7:
          case "end":
            return _context49.stop();
        }
      }, _callee48, this);
    }));
    function getMCPRequestsConnectionDetails(_x52) {
      return _getMCPRequestsConnectionDetails.apply(this, arguments);
    }
    return getMCPRequestsConnectionDetails;
  }();
  _proto._resultFromResponse = /*#__PURE__*/function () {
    var _resultFromResponse2 = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee49(schema, res) {
      var err, text, response, r, rErr, _err, _err2;
      return _regeneratorRuntime().wrap(function _callee49$(_context50) {
        while (1) switch (_context50.prev = _context50.next) {
          case 0:
            if (!res.isErr()) {
              _context50.next = 2;
              break;
            }
            return _context50.abrupt("return", res);
          case 2:
            if (!(res.value.response.status === 413)) {
              _context50.next = 6;
              break;
            }
            err = {
              type: "content_too_large",
              message: "Your request content is too large, please try again with a shorter content."
            };
            this._logger.error({
              dustError: err,
              status: res.value.response.status,
              url: res.value.response.url,
              duration: res.value.duration
            }, "DustAPI error");
            return _context50.abrupt("return", new Err(err));
          case 6:
            _context50.next = 8;
            return textFromResponse(res.value.response);
          case 8:
            text = _context50.sent;
            _context50.prev = 9;
            response = JSON.parse(text);
            r = schema.safeParse(response); // This assume that safe parsing means a 200 status.
            if (!r.success) {
              _context50.next = 16;
              break;
            }
            return _context50.abrupt("return", new Ok(r.data));
          case 16:
            // We couldn't parse the response directly, maybe it's an error
            rErr = APIErrorSchema.safeParse(response["error"]);
            if (!rErr.success) {
              _context50.next = 22;
              break;
            }
            // Successfully parsed an error
            this._logger.error({
              dustError: rErr.data,
              status: res.value.response.status,
              url: res.value.response.url,
              duration: res.value.duration
            }, "DustAPI error");
            return _context50.abrupt("return", new Err(rErr.data));
          case 22:
            // Unexpected response format (neither an error nor a valid response)
            _err = {
              type: "unexpected_response_format",
              message: "Unexpected response format from DustAPI calling " + (res.value.response.url + " : " + r.error.message)
            };
            this._logger.error({
              dustError: _err,
              parseError: r.error.message,
              rawText: text,
              status: res.value.response.status,
              url: res.value.response.url,
              duration: res.value.duration
            }, "DustAPI error");
            return _context50.abrupt("return", new Err(_err));
          case 25:
            _context50.next = 32;
            break;
          case 27:
            _context50.prev = 27;
            _context50.t0 = _context50["catch"](9);
            _err2 = {
              type: "unexpected_response_format",
              message: "Fail to parse response from DustAPI calling " + (res.value.response.url + " : " + _context50.t0)
            };
            this._logger.error({
              dustError: _err2,
              error: _context50.t0,
              rawText: text,
              status: res.value.response.status,
              url: res.value.response.url,
              duration: res.value.duration
            }, "DustAPI error");
            return _context50.abrupt("return", new Err(_err2));
          case 32:
          case "end":
            return _context50.stop();
        }
      }, _callee49, this, [[9, 27]]);
    }));
    function _resultFromResponse(_x53, _x54) {
      return _resultFromResponse2.apply(this, arguments);
    }
    return _resultFromResponse;
  }();
  return DustAPI;
}();

exports.APIErrorSchema = APIErrorSchema;
exports.ActionApprovalStateSchema = ActionApprovalStateSchema;
exports.AgentConfigurationViewSchema = AgentConfigurationViewSchema;
exports.AppsCheckRequestSchema = AppsCheckRequestSchema;
exports.AppsCheckResponseSchema = AppsCheckResponseSchema;
exports.BaseSearchBodySchema = BaseSearchBodySchema;
exports.BlockedActionsResponseSchema = BlockedActionsResponseSchema;
exports.BrowseResultResourceSchema = BrowseResultResourceSchema;
exports.CONTENT_NODE_MIME_TYPES = CONTENT_NODE_MIME_TYPES;
exports.CancelMessageGenerationRequestSchema = CancelMessageGenerationRequestSchema;
exports.CancelMessageGenerationResponseSchema = CancelMessageGenerationResponseSchema;
exports.ClientSideMCPServerNameSchema = ClientSideMCPServerNameSchema;
exports.ContentNodeSchema = ContentNodeSchema;
exports.ContentNodeTypeSchema = ContentNodeTypeSchema;
exports.ContentNodeWithParentSchema = ContentNodeWithParentSchema;
exports.ContentNodesViewTypeSchema = ContentNodesViewTypeSchema;
exports.ConversationSchema = ConversationSchema;
exports.CoreAPIErrorSchema = CoreAPIErrorSchema;
exports.CoreAPITokenTypeSchema = CoreAPITokenTypeSchema;
exports.CreateConversationResponseSchema = CreateConversationResponseSchema;
exports.CreateGenericAgentConfigurationRequestSchema = CreateGenericAgentConfigurationRequestSchema;
exports.CreateGenericAgentConfigurationResponseSchema = CreateGenericAgentConfigurationResponseSchema;
exports.DATA_SOURCE_FOLDER_SPREADSHEET_MIME_TYPE = DATA_SOURCE_FOLDER_SPREADSHEET_MIME_TYPE;
exports.DATA_SOURCE_MIME_TYPE = DATA_SOURCE_MIME_TYPE;
exports.DATA_WAREHOUSE_MIME_TYPE = DATA_WAREHOUSE_MIME_TYPE;
exports.DataSourceContentNodeSchema = DataSourceContentNodeSchema;
exports.DataSourceSearchQuerySchema = DataSourceSearchQuerySchema;
exports.DataSourceViewContentNodeSchema = DataSourceViewContentNodeSchema;
exports.DataSourceViewResponseSchema = DataSourceViewResponseSchema;
exports.DatabaseSchemaResourceSchema = DatabaseSchemaResourceSchema;
exports.DeleteFolderResponseSchema = DeleteFolderResponseSchema;
exports.DustAPI = DustAPI;
exports.DustAppConfigTypeSchema = DustAppConfigTypeSchema;
exports.DustAppRunBlockExecutionEventSchema = DustAppRunBlockExecutionEventSchema;
exports.DustAppRunBlockStatusEventSchema = DustAppRunBlockStatusEventSchema;
exports.DustAppRunErroredEventSchema = DustAppRunErroredEventSchema;
exports.DustAppRunFinalEventSchema = DustAppRunFinalEventSchema;
exports.DustAppRunFunctionCallArgumentsTokensEventSchema = DustAppRunFunctionCallArgumentsTokensEventSchema;
exports.DustAppRunFunctionCallEventSchema = DustAppRunFunctionCallEventSchema;
exports.DustAppRunReasoningItemEventSchema = DustAppRunReasoningItemEventSchema;
exports.DustAppRunReasoningTokensEventSchema = DustAppRunReasoningTokensEventSchema;
exports.DustAppRunRunStatusEventSchema = DustAppRunRunStatusEventSchema;
exports.DustAppRunTokensEventSchema = DustAppRunTokensEventSchema;
exports.DustAppTypeSchema = DustAppTypeSchema;
exports.DustMcpServerTransport = DustMcpServerTransport;
exports.Err = Err;
exports.ExampleRowsResourceSchema = ExampleRowsResourceSchema;
exports.ExtractQueryResourceSchema = ExtractQueryResourceSchema;
exports.ExtractResultResourceSchema = ExtractResultResourceSchema;
exports.FileTypeSchema = FileTypeSchema;
exports.FileTypeWithUploadUrlSchema = FileTypeWithUploadUrlSchema;
exports.FileUploadRequestResponseSchema = FileUploadRequestResponseSchema;
exports.FileUploadUrlRequestSchema = FileUploadUrlRequestSchema;
exports.FileUploadedRequestResponseSchema = FileUploadedRequestResponseSchema;
exports.GenerationTokensEventSchema = GenerationTokensEventSchema;
exports.GetActiveMemberEmailsInWorkspaceResponseSchema = GetActiveMemberEmailsInWorkspaceResponseSchema;
exports.GetAgentConfigurationsResponseSchema = GetAgentConfigurationsResponseSchema;
exports.GetAppsResponseSchema = GetAppsResponseSchema;
exports.GetConversationResponseSchema = GetConversationResponseSchema;
exports.GetConversationsResponseSchema = GetConversationsResponseSchema;
exports.GetDataSourcesResponseSchema = GetDataSourcesResponseSchema;
exports.GetFeedbacksResponseSchema = GetFeedbacksResponseSchema;
exports.GetFolderResponseSchema = GetFolderResponseSchema;
exports.GetFoldersResponseSchema = GetFoldersResponseSchema;
exports.GetMCPServerViewsQuerySchema = GetMCPServerViewsQuerySchema;
exports.GetMCPServerViewsResponseSchema = GetMCPServerViewsResponseSchema;
exports.GetMCPViewsRequestSchema = GetMCPViewsRequestSchema;
exports.GetOrPatchAgentConfigurationResponseSchema = GetOrPatchAgentConfigurationResponseSchema;
exports.GetSpacesResponseSchema = GetSpacesResponseSchema;
exports.GetWorkspaceFeatureFlagsResponseSchema = GetWorkspaceFeatureFlagsResponseSchema;
exports.GetWorkspaceUsageRequestSchema = GetWorkspaceUsageRequestSchema;
exports.GetWorkspaceVerifiedDomainsResponseSchema = GetWorkspaceVerifiedDomainsResponseSchema;
exports.HeartbeatMCPResponseSchema = HeartbeatMCPResponseSchema;
exports.INCLUDABLE_INTERNAL_CONTENT_NODE_MIME_TYPES = INCLUDABLE_INTERNAL_CONTENT_NODE_MIME_TYPES;
exports.INCLUDABLE_INTERNAL_MIME_TYPES_VALUES = INCLUDABLE_INTERNAL_MIME_TYPES_VALUES;
exports.INTERNAL_MIME_TYPES = INTERNAL_MIME_TYPES;
exports.INTERNAL_MIME_TYPES_VALUES = INTERNAL_MIME_TYPES_VALUES;
exports.ImportAppsResponseSchema = ImportAppsResponseSchema;
exports.IncludeQueryResourceSchema = IncludeQueryResourceSchema;
exports.IncludeResultResourceSchema = IncludeResultResourceSchema;
exports.MCPProgressNotificationSchema = MCPProgressNotificationSchema;
exports.MeResponseSchema = MeResponseSchema;
exports.NotificationCanvasFileContentSchema = NotificationCanvasFileContentSchema;
exports.Ok = Ok;
exports.PatchAgentConfigurationRequestSchema = PatchAgentConfigurationRequestSchema;
exports.PatchDataSourceViewRequestSchema = PatchDataSourceViewRequestSchema;
exports.PostAppsRequestSchema = PostAppsRequestSchema;
exports.PostContentFragmentResponseSchema = PostContentFragmentResponseSchema;
exports.PostConversationsResponseSchema = PostConversationsResponseSchema;
exports.PostDataSourceDocumentRequestSchema = PostDataSourceDocumentRequestSchema;
exports.PostMCPRequestsRequestQuerySchema = PostMCPRequestsRequestQuerySchema;
exports.PostMCPResultsResponseSchema = PostMCPResultsResponseSchema;
exports.PostMessageFeedbackResponseSchema = PostMessageFeedbackResponseSchema;
exports.PostSpaceMembersRequestBodySchema = PostSpaceMembersRequestBodySchema;
exports.PostTableParentsRequestSchema = PostTableParentsRequestSchema;
exports.PostUserMessageResponseSchema = PostUserMessageResponseSchema;
exports.PostWorkspaceSearchResponseBodySchema = PostWorkspaceSearchResponseBodySchema;
exports.ProgressNotificationContentSchema = ProgressNotificationContentSchema;
exports.ProgressNotificationOutputSchema = ProgressNotificationOutputSchema;
exports.PublicContentFragmentWithContentSchema = PublicContentFragmentWithContentSchema;
exports.PublicContentFragmentWithFileIdSchema = PublicContentFragmentWithFileIdSchema;
exports.PublicHeartbeatMCPRequestBodySchema = PublicHeartbeatMCPRequestBodySchema;
exports.PublicPostContentFragmentRequestBodySchema = PublicPostContentFragmentRequestBodySchema;
exports.PublicPostConversationsRequestBodySchema = PublicPostConversationsRequestBodySchema;
exports.PublicPostEditMessagesRequestBodySchema = PublicPostEditMessagesRequestBodySchema;
exports.PublicPostMCPResultsRequestBodySchema = PublicPostMCPResultsRequestBodySchema;
exports.PublicPostMessageFeedbackRequestBodySchema = PublicPostMessageFeedbackRequestBodySchema;
exports.PublicPostMessagesRequestBodySchema = PublicPostMessagesRequestBodySchema;
exports.PublicRegisterMCPRequestBodySchema = PublicRegisterMCPRequestBodySchema;
exports.QueryWritingInstructionsResourceSchema = QueryWritingInstructionsResourceSchema;
exports.ReasoningSuccessOutputSchema = ReasoningSuccessOutputSchema;
exports.RegisterMCPResponseSchema = RegisterMCPResponseSchema;
exports.RetrievalDocumentTypeSchema = RetrievalDocumentTypeSchema;
exports.RetryMessageResponseSchema = RetryMessageResponseSchema;
exports.RunAgentQueryResourceSchema = RunAgentQueryResourceSchema;
exports.RunAgentResultResourceSchema = RunAgentResultResourceSchema;
exports.RunAppResponseSchema = RunAppResponseSchema;
exports.SearchDataSourceViewsRequestSchema = SearchDataSourceViewsRequestSchema;
exports.SearchDataSourceViewsResponseSchema = SearchDataSourceViewsResponseSchema;
exports.SearchQueryResourceSchema = SearchQueryResourceSchema;
exports.SearchRequestBodySchema = SearchRequestBodySchema;
exports.SearchResultResourceSchema = SearchResultResourceSchema;
exports.SearchWarningCodeSchema = SearchWarningCodeSchema;
exports.TOOL_RUNNING_LABEL = TOOL_RUNNING_LABEL;
exports.TokenizeResponseSchema = TokenizeResponseSchema;
exports.ToolsetsResultResourceSchema = ToolsetsResultResourceSchema;
exports.UpsertDataSourceFolderRequestSchema = UpsertDataSourceFolderRequestSchema;
exports.UpsertDatabaseTableRequestSchema = UpsertDatabaseTableRequestSchema;
exports.UpsertFolderResponseSchema = UpsertFolderResponseSchema;
exports.UpsertTableFromCsvRequestSchema = UpsertTableFromCsvRequestSchema;
exports.UpsertTableRowsRequestSchema = UpsertTableRowsRequestSchema;
exports.ValidateActionRequestBodySchema = ValidateActionRequestBodySchema;
exports.ValidateActionResponseSchema = ValidateActionResponseSchema;
exports.ValidateMemberRequestSchema = ValidateMemberRequestSchema;
exports.WarningResourceSchema = WarningResourceSchema;
exports.WebsearchQueryResourceSchema = WebsearchQueryResourceSchema;
exports.WebsearchResultResourceSchema = WebsearchResultResourceSchema;
exports.WebsearchResultSchema = WebsearchResultSchema;
exports.WorkspaceDomainSchema = WorkspaceDomainSchema;
exports.assertNever = assertNever;
exports.getProviderFromRetrievedDocument = getProviderFromRetrievedDocument;
exports.getTitleFromRetrievedDocument = getTitleFromRetrievedDocument;
exports.isAgentMention = isAgentMention;
exports.isBrowseResultResourceType = isBrowseResultResourceType;
exports.isCanvasFileContentOutput = isCanvasFileContentOutput;
exports.isConnectorProvider = isConnectorProvider;
exports.isConnectorsAPIError = isConnectorsAPIError;
exports.isDatabaseSchemaResourceType = isDatabaseSchemaResourceType;
exports.isDustMimeType = isDustMimeType;
exports.isExampleRowsResourceType = isExampleRowsResourceType;
exports.isExtractQueryResourceType = isExtractQueryResourceType;
exports.isExtractResultResourceType = isExtractResultResourceType;
exports.isFolder = isFolder;
exports.isImageProgressOutput = isImageProgressOutput;
exports.isIncludableInternalMimeType = isIncludableInternalMimeType;
exports.isIncludeQueryResourceType = isIncludeQueryResourceType;
exports.isIncludeResultResourceType = isIncludeResultResourceType;
exports.isMCPProgressNotificationType = isMCPProgressNotificationType;
exports.isMCPServerPersonalAuthRequiredError = isMCPServerPersonalAuthRequiredError;
exports.isQueryWritingInstructionsResourceType = isQueryWritingInstructionsResourceType;
exports.isReasoningSuccessOutput = isReasoningSuccessOutput;
exports.isResourceWithName = isResourceWithName;
exports.isRunAgentQueryResourceType = isRunAgentQueryResourceType;
exports.isRunAgentResultResourceType = isRunAgentResultResourceType;
exports.isSearchQueryResourceType = isSearchQueryResourceType;
exports.isSearchResultResourceType = isSearchResultResourceType;
exports.isSqlQueryOutput = isSqlQueryOutput;
exports.isSupportedFileContentType = isSupportedFileContentType;
exports.isSupportedImageContentType = isSupportedImageContentType;
exports.isSupportedPlainTextContentType = isSupportedPlainTextContentType;
exports.isThinkingOutput = isThinkingOutput;
exports.isToolGeneratedFile = isToolGeneratedFile;
exports.isToolsetsResultResourceType = isToolsetsResultResourceType;
exports.isWarningResourceType = isWarningResourceType;
exports.isWebsearchQueryResourceType = isWebsearchQueryResourceType;
exports.isWebsearchResultResourceType = isWebsearchResultResourceType;
exports.isWebsite = isWebsite;
exports.removeNulls = removeNulls;
exports.supportedFileExtensions = supportedFileExtensions;
exports.supportedImageFileFormats = supportedImageFileFormats;
exports.supportedOtherFileFormats = supportedOtherFileFormats;
//# sourceMappingURL=client.cjs.development.js.map
