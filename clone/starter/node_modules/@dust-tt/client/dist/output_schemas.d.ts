import { z } from "zod";
import type { CallToolResult, Notification } from "./raw_mcp_types.ts";
declare const ToolGeneratedFileSchema: z.ZodObject<{
    text: z.ZodString;
    uri: z.ZodString;
    mimeType: z.ZodLiteral<"application/vnd.dust.tool-output.file">;
    fileId: z.ZodString;
    title: z.ZodString;
    contentType: z.ZodString;
    snippet: z.ZodNullable<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    text: string;
    uri: string;
    mimeType: "application/vnd.dust.tool-output.file";
    fileId: string;
    title: string;
    contentType: string;
    snippet: string | null;
}, {
    text: string;
    uri: string;
    mimeType: "application/vnd.dust.tool-output.file";
    fileId: string;
    title: string;
    contentType: string;
    snippet: string | null;
}>;
export type ToolGeneratedFileType = z.infer<typeof ToolGeneratedFileSchema>;
export declare function isToolGeneratedFile(outputBlock: CallToolResult["content"][number]): outputBlock is {
    type: "resource";
    resource: ToolGeneratedFileType;
};
declare const ThinkingOutputSchema: z.ZodObject<{
    mimeType: z.ZodLiteral<"application/vnd.dust.tool-output.thinking">;
    text: z.ZodString;
    uri: z.ZodLiteral<"">;
}, "strip", z.ZodTypeAny, {
    text: string;
    uri: "";
    mimeType: "application/vnd.dust.tool-output.thinking";
}, {
    text: string;
    uri: "";
    mimeType: "application/vnd.dust.tool-output.thinking";
}>;
export type ThinkingOutputType = z.infer<typeof ThinkingOutputSchema>;
export declare function isThinkingOutput(outputBlock: CallToolResult["content"][number]): outputBlock is {
    type: "resource";
    resource: ThinkingOutputType;
};
export declare const ReasoningSuccessOutputSchema: z.ZodObject<{
    mimeType: z.ZodLiteral<"application/vnd.dust.tool-output.reasoning-success">;
    text: z.ZodString;
    uri: z.ZodLiteral<"">;
}, "strip", z.ZodTypeAny, {
    text: string;
    uri: "";
    mimeType: "application/vnd.dust.tool-output.reasoning-success";
}, {
    text: string;
    uri: "";
    mimeType: "application/vnd.dust.tool-output.reasoning-success";
}>;
export type ReasoningSuccessOutputType = z.infer<typeof ReasoningSuccessOutputSchema>;
export declare function isReasoningSuccessOutput(outputBlock: CallToolResult["content"][number]): outputBlock is {
    type: "resource";
    resource: ReasoningSuccessOutputType;
};
declare const SqlQueryOutputSchema: z.ZodObject<{
    mimeType: z.ZodLiteral<"application/vnd.dust.tool-output.sql-query">;
    text: z.ZodString;
    uri: z.ZodLiteral<"">;
}, "strip", z.ZodTypeAny, {
    text: string;
    uri: "";
    mimeType: "application/vnd.dust.tool-output.sql-query";
}, {
    text: string;
    uri: "";
    mimeType: "application/vnd.dust.tool-output.sql-query";
}>;
export type SqlQueryOutputType = z.infer<typeof SqlQueryOutputSchema>;
export declare function isSqlQueryOutput(outputBlock: CallToolResult["content"][number]): outputBlock is {
    type: "resource";
    resource: SqlQueryOutputType;
};
type ResourceWithName = {
    name: string;
};
export declare const isResourceWithName: (resource: object) => resource is ResourceWithName;
export declare const DatabaseSchemaResourceSchema: z.ZodObject<{
    mimeType: z.ZodLiteral<"application/vnd.dust.tool-output.database-schema">;
    text: z.ZodString;
    uri: z.ZodString;
}, "strip", z.ZodTypeAny, {
    text: string;
    uri: string;
    mimeType: "application/vnd.dust.tool-output.database-schema";
}, {
    text: string;
    uri: string;
    mimeType: "application/vnd.dust.tool-output.database-schema";
}>;
export type DatabaseSchemaResourceType = z.infer<typeof DatabaseSchemaResourceSchema>;
export declare const isDatabaseSchemaResourceType: (outputBlock: CallToolResult["content"][number]) => outputBlock is {
    type: "resource";
    resource: DatabaseSchemaResourceType;
};
export declare const QueryWritingInstructionsResourceSchema: z.ZodObject<{
    mimeType: z.ZodLiteral<"application/vnd.dust.tool-output.query-writing-instructions">;
    text: z.ZodString;
    uri: z.ZodString;
}, "strip", z.ZodTypeAny, {
    text: string;
    uri: string;
    mimeType: "application/vnd.dust.tool-output.query-writing-instructions";
}, {
    text: string;
    uri: string;
    mimeType: "application/vnd.dust.tool-output.query-writing-instructions";
}>;
export type QueryWritingInstructionsResourceType = z.infer<typeof QueryWritingInstructionsResourceSchema>;
export declare const isQueryWritingInstructionsResourceType: (outputBlock: CallToolResult["content"][number]) => outputBlock is {
    type: "resource";
    resource: QueryWritingInstructionsResourceType;
};
export declare const ExampleRowsResourceSchema: z.ZodObject<{
    mimeType: z.ZodLiteral<"application/vnd.dust.tool-output.example-rows">;
    text: z.ZodString;
    uri: z.ZodString;
}, "strip", z.ZodTypeAny, {
    text: string;
    uri: string;
    mimeType: "application/vnd.dust.tool-output.example-rows";
}, {
    text: string;
    uri: string;
    mimeType: "application/vnd.dust.tool-output.example-rows";
}>;
export type ExampleRowsResourceType = z.infer<typeof ExampleRowsResourceSchema>;
export declare const isExampleRowsResourceType: (outputBlock: CallToolResult["content"][number]) => outputBlock is {
    type: "resource";
    resource: ExampleRowsResourceType;
};
export declare const SearchQueryResourceSchema: z.ZodObject<{
    mimeType: z.ZodLiteral<"application/vnd.dust.tool-output.data-source-search-query">;
    text: z.ZodString;
    uri: z.ZodLiteral<"">;
}, "strip", z.ZodTypeAny, {
    text: string;
    uri: "";
    mimeType: "application/vnd.dust.tool-output.data-source-search-query";
}, {
    text: string;
    uri: "";
    mimeType: "application/vnd.dust.tool-output.data-source-search-query";
}>;
export type SearchQueryResourceType = z.infer<typeof SearchQueryResourceSchema>;
export declare const isSearchQueryResourceType: (outputBlock: CallToolResult["content"][number]) => outputBlock is {
    type: "resource";
    resource: SearchQueryResourceType;
};
export declare const SearchResultResourceSchema: z.ZodObject<{
    mimeType: z.ZodLiteral<"application/vnd.dust.tool-output.data-source-search-result">;
    uri: z.ZodString;
    text: z.ZodString;
    id: z.ZodString;
    tags: z.ZodArray<z.ZodString, "many">;
    ref: z.ZodString;
    chunks: z.ZodArray<z.ZodString, "many">;
    source: z.ZodObject<{
        provider: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        provider?: string | undefined;
    }, {
        provider?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    text: string;
    uri: string;
    mimeType: "application/vnd.dust.tool-output.data-source-search-result";
    id: string;
    tags: string[];
    ref: string;
    chunks: string[];
    source: {
        provider?: string | undefined;
    };
}, {
    text: string;
    uri: string;
    mimeType: "application/vnd.dust.tool-output.data-source-search-result";
    id: string;
    tags: string[];
    ref: string;
    chunks: string[];
    source: {
        provider?: string | undefined;
    };
}>;
export type SearchResultResourceType = z.infer<typeof SearchResultResourceSchema>;
export declare const isSearchResultResourceType: (outputBlock: CallToolResult["content"][number]) => outputBlock is {
    type: "resource";
    resource: SearchResultResourceType;
};
export declare const IncludeQueryResourceSchema: z.ZodObject<{
    mimeType: z.ZodLiteral<"application/vnd.dust.tool-output.data-source-include-query">;
    text: z.ZodString;
    uri: z.ZodLiteral<"">;
}, "strip", z.ZodTypeAny, {
    text: string;
    uri: "";
    mimeType: "application/vnd.dust.tool-output.data-source-include-query";
}, {
    text: string;
    uri: "";
    mimeType: "application/vnd.dust.tool-output.data-source-include-query";
}>;
export type IncludeQueryResourceType = z.infer<typeof IncludeQueryResourceSchema>;
export declare const isIncludeQueryResourceType: (outputBlock: CallToolResult["content"][number]) => outputBlock is {
    type: "resource";
    resource: IncludeQueryResourceType;
};
export declare const WarningResourceSchema: z.ZodObject<{
    mimeType: z.ZodLiteral<"application/vnd.dust.tool-output.warning">;
    warningTitle: z.ZodString;
    text: z.ZodString;
    warningData: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    uri: z.ZodLiteral<"">;
}, "strip", z.ZodTypeAny, {
    text: string;
    uri: "";
    mimeType: "application/vnd.dust.tool-output.warning";
    warningTitle: string;
    warningData?: Record<string, unknown> | undefined;
}, {
    text: string;
    uri: "";
    mimeType: "application/vnd.dust.tool-output.warning";
    warningTitle: string;
    warningData?: Record<string, unknown> | undefined;
}>;
export type WarningResourceType = z.infer<typeof WarningResourceSchema>;
export declare const isWarningResourceType: (outputBlock: CallToolResult["content"][number]) => outputBlock is {
    type: "resource";
    resource: WarningResourceType;
};
export declare const IncludeResultResourceSchema: z.ZodObject<{
    mimeType: z.ZodLiteral<"application/vnd.dust.tool-output.data-source-include-result">;
    uri: z.ZodString;
    text: z.ZodString;
    id: z.ZodString;
    tags: z.ZodArray<z.ZodString, "many">;
    ref: z.ZodString;
    chunks: z.ZodArray<z.ZodString, "many">;
    source: z.ZodObject<{
        name: z.ZodString;
        provider: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        provider?: string | undefined;
    }, {
        name: string;
        provider?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    text: string;
    uri: string;
    mimeType: "application/vnd.dust.tool-output.data-source-include-result";
    id: string;
    tags: string[];
    ref: string;
    chunks: string[];
    source: {
        name: string;
        provider?: string | undefined;
    };
}, {
    text: string;
    uri: string;
    mimeType: "application/vnd.dust.tool-output.data-source-include-result";
    id: string;
    tags: string[];
    ref: string;
    chunks: string[];
    source: {
        name: string;
        provider?: string | undefined;
    };
}>;
export type IncludeResultResourceType = z.infer<typeof IncludeResultResourceSchema>;
export declare const isIncludeResultResourceType: (outputBlock: CallToolResult["content"][number]) => outputBlock is {
    type: "resource";
    resource: IncludeResultResourceType;
};
export declare const WebsearchQueryResourceSchema: z.ZodObject<{
    mimeType: z.ZodLiteral<"application/vnd.dust.tool-output.websearch-query">;
    text: z.ZodString;
    uri: z.ZodLiteral<"">;
}, "strip", z.ZodTypeAny, {
    text: string;
    uri: "";
    mimeType: "application/vnd.dust.tool-output.websearch-query";
}, {
    text: string;
    uri: "";
    mimeType: "application/vnd.dust.tool-output.websearch-query";
}>;
export type WebsearchQueryResourceType = z.infer<typeof WebsearchQueryResourceSchema>;
export declare const isWebsearchQueryResourceType: (outputBlock: CallToolResult["content"][number]) => outputBlock is {
    type: "resource";
    resource: WebsearchQueryResourceType;
};
export declare const WebsearchResultResourceSchema: z.ZodObject<{
    mimeType: z.ZodLiteral<"application/vnd.dust.tool-output.websearch-result">;
    title: z.ZodString;
    text: z.ZodString;
    uri: z.ZodString;
    reference: z.ZodString;
}, "strip", z.ZodTypeAny, {
    text: string;
    uri: string;
    mimeType: "application/vnd.dust.tool-output.websearch-result";
    title: string;
    reference: string;
}, {
    text: string;
    uri: string;
    mimeType: "application/vnd.dust.tool-output.websearch-result";
    title: string;
    reference: string;
}>;
export type WebsearchResultResourceType = z.infer<typeof WebsearchResultResourceSchema>;
export declare const isWebsearchResultResourceType: (outputBlock: CallToolResult["content"][number]) => outputBlock is {
    type: "resource";
    resource: WebsearchResultResourceType;
};
export declare const BrowseResultResourceSchema: z.ZodObject<{
    mimeType: z.ZodLiteral<"application/vnd.dust.tool-output.browse-result">;
    requestedUrl: z.ZodString;
    uri: z.ZodString;
    text: z.ZodString;
    title: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    responseCode: z.ZodString;
    errorMessage: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    text: string;
    uri: string;
    mimeType: "application/vnd.dust.tool-output.browse-result";
    requestedUrl: string;
    responseCode: string;
    title?: string | undefined;
    description?: string | undefined;
    errorMessage?: string | undefined;
}, {
    text: string;
    uri: string;
    mimeType: "application/vnd.dust.tool-output.browse-result";
    requestedUrl: string;
    responseCode: string;
    title?: string | undefined;
    description?: string | undefined;
    errorMessage?: string | undefined;
}>;
export type BrowseResultResourceType = z.infer<typeof BrowseResultResourceSchema>;
export declare const isBrowseResultResourceType: (outputBlock: CallToolResult["content"][number]) => outputBlock is {
    type: "resource";
    resource: BrowseResultResourceType;
};
export declare const RunAgentQueryResourceSchema: z.ZodObject<{
    mimeType: z.ZodLiteral<"application/vnd.dust.tool-output.run-agent-query">;
    text: z.ZodString;
    childAgentId: z.ZodString;
    uri: z.ZodLiteral<"">;
}, "strip", z.ZodTypeAny, {
    text: string;
    uri: "";
    mimeType: "application/vnd.dust.tool-output.run-agent-query";
    childAgentId: string;
}, {
    text: string;
    uri: "";
    mimeType: "application/vnd.dust.tool-output.run-agent-query";
    childAgentId: string;
}>;
export type RunAgentQueryResourceType = z.infer<typeof RunAgentQueryResourceSchema>;
export declare const isRunAgentQueryResourceType: (outputBlock: CallToolResult["content"][number]) => outputBlock is {
    type: "resource";
    resource: RunAgentQueryResourceType;
};
export declare const RunAgentResultResourceSchema: z.ZodObject<{
    mimeType: z.ZodLiteral<"application/vnd.dust.tool-output.run-agent-result">;
    conversationId: z.ZodString;
    text: z.ZodString;
    uri: z.ZodString;
    refs: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        description: z.ZodOptional<z.ZodString>;
        href: z.ZodOptional<z.ZodString>;
        title: z.ZodString;
        provider: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        title: string;
        provider: string;
        description?: string | undefined;
        href?: string | undefined;
    }, {
        title: string;
        provider: string;
        description?: string | undefined;
        href?: string | undefined;
    }>>>;
}, "strip", z.ZodTypeAny, {
    text: string;
    uri: string;
    mimeType: "application/vnd.dust.tool-output.run-agent-result";
    conversationId: string;
    refs?: Record<string, {
        title: string;
        provider: string;
        description?: string | undefined;
        href?: string | undefined;
    }> | undefined;
}, {
    text: string;
    uri: string;
    mimeType: "application/vnd.dust.tool-output.run-agent-result";
    conversationId: string;
    refs?: Record<string, {
        title: string;
        provider: string;
        description?: string | undefined;
        href?: string | undefined;
    }> | undefined;
}>;
export type RunAgentResultResourceType = z.infer<typeof RunAgentResultResourceSchema>;
export declare const isRunAgentResultResourceType: (outputBlock: CallToolResult["content"][number]) => outputBlock is {
    type: "resource";
    resource: RunAgentResultResourceType;
};
export declare const ToolsetsResultResourceSchema: z.ZodObject<{
    mimeType: z.ZodLiteral<"application/vnd.dust.tool-output.toolset-list-result">;
    text: z.ZodString;
    uri: z.ZodLiteral<"">;
    id: z.ZodString;
    description: z.ZodString;
}, "strip", z.ZodTypeAny, {
    text: string;
    uri: "";
    mimeType: "application/vnd.dust.tool-output.toolset-list-result";
    description: string;
    id: string;
}, {
    text: string;
    uri: "";
    mimeType: "application/vnd.dust.tool-output.toolset-list-result";
    description: string;
    id: string;
}>;
export type ToolsetsResultResourceType = z.infer<typeof ToolsetsResultResourceSchema>;
export declare const isToolsetsResultResourceType: (outputBlock: CallToolResult["content"][number]) => outputBlock is {
    type: "resource";
    resource: ToolsetsResultResourceType;
};
export declare const ExtractQueryResourceSchema: z.ZodObject<{
    mimeType: z.ZodLiteral<"application/vnd.dust.tool-output.extract-query">;
    text: z.ZodString;
    uri: z.ZodLiteral<"">;
}, "strip", z.ZodTypeAny, {
    text: string;
    uri: "";
    mimeType: "application/vnd.dust.tool-output.extract-query";
}, {
    text: string;
    uri: "";
    mimeType: "application/vnd.dust.tool-output.extract-query";
}>;
export type ExtractQueryResourceType = z.infer<typeof ExtractQueryResourceSchema>;
export declare const isExtractQueryResourceType: (outputBlock: CallToolResult["content"][number]) => outputBlock is {
    type: "resource";
    resource: ExtractQueryResourceType;
};
export declare const ExtractResultResourceSchema: z.ZodObject<{
    mimeType: z.ZodLiteral<"application/vnd.dust.tool-output.extract-result">;
    uri: z.ZodString;
    text: z.ZodString;
    fileId: z.ZodString;
    title: z.ZodString;
    contentType: z.ZodString;
    snippet: z.ZodNullable<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    text: string;
    uri: string;
    mimeType: "application/vnd.dust.tool-output.extract-result";
    fileId: string;
    title: string;
    contentType: string;
    snippet: string | null;
}, {
    text: string;
    uri: string;
    mimeType: "application/vnd.dust.tool-output.extract-result";
    fileId: string;
    title: string;
    contentType: string;
    snippet: string | null;
}>;
export type ExtractResultResourceType = z.infer<typeof ExtractResultResourceSchema>;
export declare const isExtractResultResourceType: (outputBlock: CallToolResult["content"][number]) => outputBlock is {
    type: "resource";
    resource: ExtractResultResourceType;
};
/**
 * Notification output types.
 */
declare const NotificationImageContentSchema: z.ZodObject<{
    type: z.ZodLiteral<"image">;
    mimeType: z.ZodString;
}, "strip", z.ZodTypeAny, {
    mimeType: string;
    type: "image";
}, {
    mimeType: string;
    type: "image";
}>;
type ImageProgressOutput = z.infer<typeof NotificationImageContentSchema>;
export declare function isImageProgressOutput(output: ProgressNotificationOutput): output is ImageProgressOutput;
export declare const NotificationCanvasFileContentSchema: z.ZodObject<{
    type: z.ZodLiteral<"canvas_file">;
    fileId: z.ZodString;
    mimeType: z.ZodString;
    title: z.ZodString;
    updatedAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    mimeType: string;
    type: "canvas_file";
    fileId: string;
    title: string;
    updatedAt: string;
}, {
    mimeType: string;
    type: "canvas_file";
    fileId: string;
    title: string;
    updatedAt: string;
}>;
type CanvasFileContentOutput = z.infer<typeof NotificationCanvasFileContentSchema>;
export declare function isCanvasFileContentOutput(output: ProgressNotificationOutput): output is CanvasFileContentOutput;
export declare const ProgressNotificationOutputSchema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"image">;
    mimeType: z.ZodString;
}, "strip", z.ZodTypeAny, {
    mimeType: string;
    type: "image";
}, {
    mimeType: string;
    type: "image";
}>, z.ZodObject<{
    type: z.ZodLiteral<"canvas_file">;
    fileId: z.ZodString;
    mimeType: z.ZodString;
    title: z.ZodString;
    updatedAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    mimeType: string;
    type: "canvas_file";
    fileId: string;
    title: string;
    updatedAt: string;
}, {
    mimeType: string;
    type: "canvas_file";
    fileId: string;
    title: string;
    updatedAt: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"run_agent">;
    childAgentId: z.ZodString;
    conversationId: z.ZodString;
    query: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "run_agent";
    childAgentId: string;
    conversationId: string;
    query: string;
}, {
    type: "run_agent";
    childAgentId: string;
    conversationId: string;
    query: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"text">;
    text: z.ZodString;
}, "strip", z.ZodTypeAny, {
    text: string;
    type: "text";
}, {
    text: string;
    type: "text";
}>]>>;
type ProgressNotificationOutput = z.infer<typeof ProgressNotificationOutputSchema>;
export declare const ProgressNotificationContentSchema: z.ZodObject<{
    progress: z.ZodNumber;
    total: z.ZodNumber;
    progressToken: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
    data: z.ZodObject<{
        label: z.ZodString;
        output: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"image">;
            mimeType: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            mimeType: string;
            type: "image";
        }, {
            mimeType: string;
            type: "image";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"canvas_file">;
            fileId: z.ZodString;
            mimeType: z.ZodString;
            title: z.ZodString;
            updatedAt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            mimeType: string;
            type: "canvas_file";
            fileId: string;
            title: string;
            updatedAt: string;
        }, {
            mimeType: string;
            type: "canvas_file";
            fileId: string;
            title: string;
            updatedAt: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"run_agent">;
            childAgentId: z.ZodString;
            conversationId: z.ZodString;
            query: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "run_agent";
            childAgentId: string;
            conversationId: string;
            query: string;
        }, {
            type: "run_agent";
            childAgentId: string;
            conversationId: string;
            query: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"text">;
            text: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            text: string;
            type: "text";
        }, {
            text: string;
            type: "text";
        }>]>>;
    }, "strip", z.ZodTypeAny, {
        label: string;
        output?: {
            mimeType: string;
            type: "image";
        } | {
            mimeType: string;
            type: "canvas_file";
            fileId: string;
            title: string;
            updatedAt: string;
        } | {
            type: "run_agent";
            childAgentId: string;
            conversationId: string;
            query: string;
        } | {
            text: string;
            type: "text";
        } | undefined;
    }, {
        label: string;
        output?: {
            mimeType: string;
            type: "image";
        } | {
            mimeType: string;
            type: "canvas_file";
            fileId: string;
            title: string;
            updatedAt: string;
        } | {
            type: "run_agent";
            childAgentId: string;
            conversationId: string;
            query: string;
        } | {
            text: string;
            type: "text";
        } | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        label: string;
        output?: {
            mimeType: string;
            type: "image";
        } | {
            mimeType: string;
            type: "canvas_file";
            fileId: string;
            title: string;
            updatedAt: string;
        } | {
            type: "run_agent";
            childAgentId: string;
            conversationId: string;
            query: string;
        } | {
            text: string;
            type: "text";
        } | undefined;
    };
    progress: number;
    total: number;
    progressToken: string | number;
}, {
    data: {
        label: string;
        output?: {
            mimeType: string;
            type: "image";
        } | {
            mimeType: string;
            type: "canvas_file";
            fileId: string;
            title: string;
            updatedAt: string;
        } | {
            type: "run_agent";
            childAgentId: string;
            conversationId: string;
            query: string;
        } | {
            text: string;
            type: "text";
        } | undefined;
    };
    progress: number;
    total: number;
    progressToken: string | number;
}>;
export type ProgressNotificationContentType = z.infer<typeof ProgressNotificationContentSchema>;
export declare const MCPProgressNotificationSchema: z.ZodObject<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    method: z.ZodLiteral<"notifications/progress">;
    params: z.ZodObject<{
        progress: z.ZodNumber;
        total: z.ZodNumber;
        progressToken: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
        data: z.ZodObject<{
            label: z.ZodString;
            output: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"image">;
                mimeType: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                mimeType: string;
                type: "image";
            }, {
                mimeType: string;
                type: "image";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"canvas_file">;
                fileId: z.ZodString;
                mimeType: z.ZodString;
                title: z.ZodString;
                updatedAt: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                mimeType: string;
                type: "canvas_file";
                fileId: string;
                title: string;
                updatedAt: string;
            }, {
                mimeType: string;
                type: "canvas_file";
                fileId: string;
                title: string;
                updatedAt: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"run_agent">;
                childAgentId: z.ZodString;
                conversationId: z.ZodString;
                query: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "run_agent";
                childAgentId: string;
                conversationId: string;
                query: string;
            }, {
                type: "run_agent";
                childAgentId: string;
                conversationId: string;
                query: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"text">;
                text: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                text: string;
                type: "text";
            }, {
                text: string;
                type: "text";
            }>]>>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            output?: {
                mimeType: string;
                type: "image";
            } | {
                mimeType: string;
                type: "canvas_file";
                fileId: string;
                title: string;
                updatedAt: string;
            } | {
                type: "run_agent";
                childAgentId: string;
                conversationId: string;
                query: string;
            } | {
                text: string;
                type: "text";
            } | undefined;
        }, {
            label: string;
            output?: {
                mimeType: string;
                type: "image";
            } | {
                mimeType: string;
                type: "canvas_file";
                fileId: string;
                title: string;
                updatedAt: string;
            } | {
                type: "run_agent";
                childAgentId: string;
                conversationId: string;
                query: string;
            } | {
                text: string;
                type: "text";
            } | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        data: {
            label: string;
            output?: {
                mimeType: string;
                type: "image";
            } | {
                mimeType: string;
                type: "canvas_file";
                fileId: string;
                title: string;
                updatedAt: string;
            } | {
                type: "run_agent";
                childAgentId: string;
                conversationId: string;
                query: string;
            } | {
                text: string;
                type: "text";
            } | undefined;
        };
        progress: number;
        total: number;
        progressToken: string | number;
    }, {
        data: {
            label: string;
            output?: {
                mimeType: string;
                type: "image";
            } | {
                mimeType: string;
                type: "canvas_file";
                fileId: string;
                title: string;
                updatedAt: string;
            } | {
                type: "run_agent";
                childAgentId: string;
                conversationId: string;
                query: string;
            } | {
                text: string;
                type: "text";
            } | undefined;
        };
        progress: number;
        total: number;
        progressToken: string | number;
    }>;
}>, "strip", z.ZodTypeAny, {
    params: {
        data: {
            label: string;
            output?: {
                mimeType: string;
                type: "image";
            } | {
                mimeType: string;
                type: "canvas_file";
                fileId: string;
                title: string;
                updatedAt: string;
            } | {
                type: "run_agent";
                childAgentId: string;
                conversationId: string;
                query: string;
            } | {
                text: string;
                type: "text";
            } | undefined;
        };
        progress: number;
        total: number;
        progressToken: string | number;
    };
    method: "notifications/progress";
}, {
    params: {
        data: {
            label: string;
            output?: {
                mimeType: string;
                type: "image";
            } | {
                mimeType: string;
                type: "canvas_file";
                fileId: string;
                title: string;
                updatedAt: string;
            } | {
                type: "run_agent";
                childAgentId: string;
                conversationId: string;
                query: string;
            } | {
                text: string;
                type: "text";
            } | undefined;
        };
        progress: number;
        total: number;
        progressToken: string | number;
    };
    method: "notifications/progress";
}>;
export type MCPProgressNotificationType = z.infer<typeof MCPProgressNotificationSchema>;
export declare function isMCPProgressNotificationType(notification: Notification): notification is MCPProgressNotificationType;
export {};
//# sourceMappingURL=output_schemas.d.ts.map