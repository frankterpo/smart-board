{"version":3,"file":"client.cjs.production.min.js","sources":["../src/mcp_icon_types.ts","../src/internal_mime_types.ts","../src/raw_mcp_types.ts","../src/output_schemas.ts","../src/types.ts","../src/mcp_transport.ts","../src/index.ts"],"sourcesContent":["import { z } from \"zod\";\n\nexport const MCPInternalActionIconSchema = z.enum([\n  \"ActionBrainIcon\",\n  \"ActionCloudArrowLeftRightIcon\",\n  \"ActionDocumentTextIcon\",\n  \"ActionEmotionLaughIcon\",\n  \"ActionGitBranchIcon\",\n  \"ActionGlobeAltIcon\",\n  \"ActionImageIcon\",\n  \"ActionLightbulbIcon\",\n  \"ActionLockIcon\",\n  \"ActionMagnifyingGlassIcon\",\n  \"ActionRobotIcon\",\n  \"ActionScanIcon\",\n  \"ActionTableIcon\",\n  \"ActionTimeIcon\",\n  \"CommandLineIcon\",\n  \"GcalLogo\",\n  \"GmailLogo\",\n  \"GithubLogo\",\n  \"GoogleSpreadsheetLogo\",\n  \"HubspotLogo\",\n  \"FreshserviceLogo\",\n  \"MondayLogo\",\n  \"OutlookLogo\",\n  \"JiraLogo\",\n  \"LinearLogo\",\n  \"NotionLogo\",\n  \"SalesforceLogo\",\n  \"SlackLogo\",\n  \"StripeLogo\",\n]);\n\nexport const MCPExternalActionIconSchema = z.enum([\n  \"ActionArmchairIcon\",\n  \"ActionArrowDownOnSquareIcon\",\n  \"ActionArrowUpOnSquareIcon\",\n  \"ActionAttachmentIcon\",\n  \"ActionBankIcon\",\n  \"ActionBarcodeIcon\",\n  \"ActionBeerIcon\",\n  \"ActionBookOpenIcon\",\n  \"ActionBracesIcon\",\n  \"ActionBrainIcon\",\n  \"ActionBriefcaseIcon\",\n  \"ActionBuildingIcon\",\n  \"ActionCalculatorIcon\",\n  \"ActionCalendarIcon\",\n  \"ActionCalendarCheckIcon\",\n  \"ActionCameraIcon\",\n  \"ActionCarIcon\",\n  \"ActionCardIcon\",\n  \"ActionCheckCircleIcon\",\n  \"ActionClipboardIcon\",\n  \"ActionCloudArrowDownIcon\",\n  \"ActionCloudArrowLeftRightIcon\",\n  \"ActionCloudArrowUpIcon\",\n  \"ActionCodeBlockIcon\",\n  \"ActionCodeBoxIcon\",\n  \"ActionCommandIcon\",\n  \"ActionCommand1Icon\",\n  \"ActionCommunityIcon\",\n  \"ActionCompanyIcon\",\n  \"ActionCubeIcon\",\n  \"ActionCupIcon\",\n  \"ActionCustomerServiceIcon\",\n  \"ActionDashboardIcon\",\n  \"ActionDatabaseIcon\",\n  \"ActionDocumentIcon\",\n  \"ActionDocumentPileIcon\",\n  \"ActionDocumentPlusIcon\",\n  \"ActionDocumentTextIcon\",\n  \"ActionDoubleQuotesIcon\",\n  \"ActionEmotionLaughIcon\",\n  \"ActionExternalLinkIcon\",\n  \"ActionEyeIcon\",\n  \"ActionEyeSlashIcon\",\n  \"ActionFilmIcon\",\n  \"ActionFilterIcon\",\n  \"ActionFingerprintIcon\",\n  \"ActionFireIcon\",\n  \"ActionFlagIcon\",\n  \"ActionFlightLandIcon\",\n  \"ActionFlightTakeoffIcon\",\n  \"ActionFolderIcon\",\n  \"ActionFolderAddIcon\",\n  \"ActionFolderOpenIcon\",\n  \"ActionFullscreenIcon\",\n  \"ActionFullscreenExitIcon\",\n  \"ActionGamepadIcon\",\n  \"ActionGitBranchIcon\",\n  \"ActionGitForkIcon\",\n  \"ActionGlobeIcon\",\n  \"ActionGlobeAltIcon\",\n  \"ActionGraduationCapIcon\",\n  \"ActionHandHeartIcon\",\n  \"ActionHandThumbDownIcon\",\n  \"ActionHandThumbUpIcon\",\n  \"ActionHeartIcon\",\n  \"ActionHomeIcon\",\n  \"ActionHospitalIcon\",\n  \"ActionImageIcon\",\n  \"ActionInboxIcon\",\n  \"ActionIncludeIcon\",\n  \"ActionLayoutIcon\",\n  \"ActionLightbulbIcon\",\n  \"ActionListIcon\",\n  \"ActionListCheckIcon\",\n  \"ActionLockIcon\",\n  \"ActionLogoutIcon\",\n  \"ActionMagicIcon\",\n  \"ActionMagnifyingGlassIcon\",\n  \"ActionMailIcon\",\n  \"ActionMailAiIcon\",\n  \"ActionMailCloseIcon\",\n  \"ActionMapIcon\",\n  \"ActionMapPinIcon\",\n  \"ActionMarkPenIcon\",\n  \"ActionMedalIcon\",\n  \"ActionMegaphoneIcon\",\n  \"ActionMenuIcon\",\n  \"ActionMicIcon\",\n  \"ActionMoonIcon\",\n  \"ActionMovieIcon\",\n  \"ActionNumbersIcon\",\n  \"ActionPaintIcon\",\n  \"ActionPencilSquareIcon\",\n  \"ActionPieChartIcon\",\n  \"ActionPinDistanceIcon\",\n  \"ActionPingPongIcon\",\n  \"ActionPlanetIcon\",\n  \"ActionPlusIcon\",\n  \"ActionPlusCircleIcon\",\n  \"ActionPrinterIcon\",\n  \"ActionPushpinIcon\",\n  \"ActionRainbowIcon\",\n  \"ActionRobotIcon\",\n  \"ActionRocketIcon\",\n  \"ActionSafeIcon\",\n  \"ActionSaveIcon\",\n  \"ActionScalesIcon\",\n  \"ActionScanIcon\",\n  \"ActionSeedlingIcon\",\n  \"ActionServerIcon\",\n  \"ActionShakeHandsIcon\",\n  \"ActionShipIcon\",\n  \"ActionShirtIcon\",\n  \"ActionShoppingBasketIcon\",\n  \"ActionSlideshowIcon\",\n  \"ActionSparklesIcon\",\n  \"ActionSquare3Stack3DIcon\",\n  \"ActionStopSignIcon\",\n  \"ActionStoreIcon\",\n  \"ActionSunIcon\",\n  \"ActionSwordIcon\",\n  \"ActionTableIcon\",\n  \"ActionTagIcon\",\n  \"ActionTestTubeIcon\",\n  \"ActionTimeIcon\",\n  \"ActionTrainIcon\",\n  \"ActionTranslateIcon\",\n  \"ActionTrashIcon\",\n  \"ActionTrophyIcon\",\n  \"ActionTShirtIcon\",\n  \"ActionUmbrellaIcon\",\n  \"ActionUserIcon\",\n  \"ActionUserGroupIcon\",\n  \"ActionVidiconIcon\",\n  \"ActionVolumeUpIcon\",\n  \"ActionXCircleIcon\",\n]);\n","import { ConnectorProvider } from \"./types\";\n\n/**\n * This is a utility type that indicates that we removed all underscores from a string.\n * This is used because we don't want underscores in mime types and remove them from connector providers.\n */\ntype WithoutUnderscores<T extends string> = T extends `${infer A}_${infer B}`\n  ? WithoutUnderscores<`${A}${B}`> // operates recursively to remove all underscores\n  : T;\n\n/**\n * This is a utility type that indicates that we replaced all underscores with dashes in a string.\n * We don't want underscores in mime types but want to type out the type with one: MIME_TYPE.CAT.SOU_PI_NOU\n */\ntype UnderscoreToDash<T extends string> = T extends `${infer A}_${infer B}`\n  ? UnderscoreToDash<`${A}-${B}`> // operates recursively to replace all underscores\n  : T;\n\n/**\n * This function generates mime types for a given provider and resource types.\n * The mime types are in the format `application/vnd.dust.PROVIDER.RESOURCE_TYPE`.\n * Notes:\n * - The underscores in the provider name are stripped in the generated mime type.\n * - The underscores in the resource type are replaced with dashes in the generated mime type.\n */\nfunction generateConnectorRelativeMimeTypes<\n  P extends ConnectorProvider,\n  T extends Uppercase<string>[]\n>({\n  provider,\n  resourceTypes,\n}: {\n  provider: P;\n  resourceTypes: T;\n}): {\n  [K in T[number]]: `application/vnd.dust.${WithoutUnderscores<P>}.${Lowercase<\n    UnderscoreToDash<K>\n  >}`;\n} {\n  return resourceTypes.reduce(\n    (acc, s) => ({\n      ...acc,\n      [s]: `application/vnd.dust.${provider.replace(\"_\", \"\")}.${s\n        .replace(\"_\", \"-\")\n        .toLowerCase()}`,\n    }),\n    {} as {\n      [K in T[number]]: `application/vnd.dust.${WithoutUnderscores<P>}.${Lowercase<\n        UnderscoreToDash<K>\n      >}`;\n    }\n  );\n}\n\n// Mime type that represents a datasource.\nexport const DATA_SOURCE_MIME_TYPE = \"application/vnd.dust.datasource\" as const;\n\n// Mime type that represents a data warehouse, like Snowflake or BigQuery.\nexport const DATA_WAREHOUSE_MIME_TYPE =\n  \"application/vnd.dust.data-warehouse\" as const;\n\nexport const DATA_SOURCE_FOLDER_SPREADSHEET_MIME_TYPE =\n  \"application/vnd.dust.folder.spreadsheet\" as const;\nexport type DataSourceFolderSpreadsheetMimeType =\n  typeof DATA_SOURCE_FOLDER_SPREADSHEET_MIME_TYPE;\n\ntype DataSourceMimeType = typeof DATA_SOURCE_MIME_TYPE;\ntype DataWarehouseMimeType = typeof DATA_WAREHOUSE_MIME_TYPE;\n\nexport const CONTENT_NODE_MIME_TYPES = {\n  GENERIC: {\n    DATA_SOURCE: DATA_SOURCE_MIME_TYPE,\n    DATA_WAREHOUSE: DATA_WAREHOUSE_MIME_TYPE,\n  },\n  FOLDER: {\n    SPREADSHEET: DATA_SOURCE_FOLDER_SPREADSHEET_MIME_TYPE,\n  },\n  CONFLUENCE: generateConnectorRelativeMimeTypes({\n    provider: \"confluence\",\n    resourceTypes: [\"FOLDER\", \"PAGE\", \"SPACE\"],\n  }),\n  GITHUB: generateConnectorRelativeMimeTypes({\n    provider: \"github\",\n    resourceTypes: [\n      \"REPOSITORY\",\n      \"CODE_ROOT\",\n      \"CODE_DIRECTORY\",\n      \"CODE_FILE\",\n      // ISSUES is the folder containing all issues.\n      \"ISSUES\",\n      // ISSUE is a single issue.\n      \"ISSUE\",\n      // DISCUSSIONS is the folder containing all discussions.\n      \"DISCUSSIONS\",\n      // DISCUSSION is a single discussion.\n      \"DISCUSSION\",\n    ],\n  }),\n  GOOGLE_DRIVE: generateConnectorRelativeMimeTypes({\n    provider: \"google_drive\",\n    // Spreadsheets may contain many sheets, thus resemble folders and are stored as such, but with\n    // the special mimeType below.  For files and sheets, we keep Google's mime types.\n    resourceTypes: [\"SHARED_WITH_ME\", \"FOLDER\", \"SPREADSHEET\"],\n  }),\n  INTERCOM: generateConnectorRelativeMimeTypes({\n    provider: \"intercom\",\n    resourceTypes: [\n      \"COLLECTION\",\n      \"TEAMS_FOLDER\",\n      \"CONVERSATION\",\n      \"TEAM\",\n      \"ARTICLE\",\n      \"HELP_CENTER\",\n    ],\n  }),\n  MICROSOFT: generateConnectorRelativeMimeTypes({\n    provider: \"microsoft\",\n    // Spreadsheets may contain many sheets, thus resemble folders and are\n    // stored as such, but with the special mimeType below.\n    // For files and sheets, we keep Microsoft's mime types.\n    resourceTypes: [\"FOLDER\", \"SPREADSHEET\"],\n  }),\n  NOTION: generateConnectorRelativeMimeTypes({\n    provider: \"notion\",\n    resourceTypes: [\"UNKNOWN_FOLDER\", \"SYNCING_FOLDER\", \"DATABASE\", \"PAGE\"],\n  }),\n  SLACK: generateConnectorRelativeMimeTypes({\n    provider: \"slack\",\n    resourceTypes: [\"CHANNEL\", \"THREAD\", \"MESSAGES\"],\n  }),\n  SNOWFLAKE: generateConnectorRelativeMimeTypes({\n    provider: \"snowflake\",\n    resourceTypes: [\"DATABASE\", \"SCHEMA\", \"TABLE\"],\n  }),\n  WEBCRAWLER: generateConnectorRelativeMimeTypes({\n    provider: \"webcrawler\",\n    resourceTypes: [\"FOLDER\"], // pages are upserted as text/html, not an internal mime type\n  }),\n  ZENDESK: generateConnectorRelativeMimeTypes({\n    provider: \"zendesk\",\n    resourceTypes: [\n      \"BRAND\",\n      \"HELP_CENTER\",\n      \"CATEGORY\",\n      \"ARTICLE\",\n      // TICKETS is the folder containing all tickets.\n      \"TICKETS\",\n      // TICKET is a single ticket.\n      \"TICKET\",\n    ],\n  }),\n  BIGQUERY: generateConnectorRelativeMimeTypes({\n    provider: \"bigquery\",\n    resourceTypes: [\"DATABASE\", \"SCHEMA\", \"TABLE\"],\n  }),\n  SALESFORCE: generateConnectorRelativeMimeTypes({\n    provider: \"salesforce\",\n    resourceTypes: [\"SYNCED_QUERY_FOLDER\"],\n  }),\n  GONG: generateConnectorRelativeMimeTypes({\n    provider: \"gong\",\n    resourceTypes: [\"TRANSCRIPT\", \"TRANSCRIPT_FOLDER\"],\n  }),\n};\n\nexport const INCLUDABLE_INTERNAL_CONTENT_NODE_MIME_TYPES = {\n  CONFLUENCE: [CONTENT_NODE_MIME_TYPES.CONFLUENCE.PAGE],\n  GITHUB: [\n    CONTENT_NODE_MIME_TYPES.GITHUB.ISSUE,\n    CONTENT_NODE_MIME_TYPES.GITHUB.DISCUSSION,\n  ],\n  GOOGLE_DRIVE: [],\n  INTERCOM: [\n    CONTENT_NODE_MIME_TYPES.INTERCOM.CONVERSATION,\n    CONTENT_NODE_MIME_TYPES.INTERCOM.ARTICLE,\n  ],\n  MICROSOFT: [],\n  NOTION: [CONTENT_NODE_MIME_TYPES.NOTION.PAGE],\n  SLACK: [\n    CONTENT_NODE_MIME_TYPES.SLACK.THREAD,\n    CONTENT_NODE_MIME_TYPES.SLACK.MESSAGES,\n  ],\n  SNOWFLAKE: [],\n  WEBCRAWLER: [],\n  ZENDESK: [\n    CONTENT_NODE_MIME_TYPES.ZENDESK.TICKET,\n    CONTENT_NODE_MIME_TYPES.ZENDESK.ARTICLE,\n  ],\n  BIGQUERY: [],\n  SALESFORCE: [],\n  GONG: [],\n};\n\nfunction generateToolMimeTypes<\n  P extends Uppercase<string>,\n  T extends Uppercase<string>[]\n>({\n  category,\n  resourceTypes,\n}: {\n  category: P;\n  resourceTypes: T;\n}): {\n  [K in T[number]]: `application/vnd.dust.${Lowercase<\n    UnderscoreToDash<P>\n  >}.${Lowercase<UnderscoreToDash<K>>}`;\n} {\n  return resourceTypes.reduce(\n    (acc, s) => ({\n      ...acc,\n      [s]: `application/vnd.dust.${category\n        .replace(/_/g, \"-\")\n        .toLowerCase()}.${s.replace(/_/g, \"-\").toLowerCase()}`,\n    }),\n    {} as {\n      [K in T[number]]: `application/vnd.dust.${Lowercase<\n        UnderscoreToDash<P>\n      >}.${Lowercase<UnderscoreToDash<K>>}`;\n    }\n  );\n}\n\nconst TOOL_MIME_TYPES = {\n  TOOL_INPUT: generateToolMimeTypes({\n    category: \"TOOL_INPUT\",\n    resourceTypes: [\n      \"DATA_SOURCE\",\n      \"DATA_WAREHOUSE\",\n      \"TABLE\",\n      \"AGENT\",\n      \"STRING\",\n      \"NUMBER\",\n      \"BOOLEAN\",\n      \"ENUM\",\n      \"LIST\",\n      \"REASONING_MODEL\",\n      \"DUST_APP\",\n      \"NULLABLE_TIME_FRAME\",\n      \"JSON_SCHEMA\",\n    ],\n  }),\n  TOOL_OUTPUT: generateToolMimeTypes({\n    category: \"TOOL_OUTPUT\",\n    resourceTypes: [\n      \"BROWSE_RESULT\",\n      \"DATA_SOURCE_SEARCH_QUERY\",\n      \"DATA_SOURCE_SEARCH_RESULT\",\n      \"FILESYSTEM_PATH\",\n      \"DATA_SOURCE_NODE_LIST\",\n      \"DATA_SOURCE_NODE_CONTENT\",\n      \"DATA_SOURCE_INCLUDE_QUERY\",\n      \"DATA_SOURCE_INCLUDE_RESULT\",\n      \"EXTRACT_QUERY\",\n      \"EXTRACT_RESULT\",\n      // File generated by the tool.\n      \"FILE\",\n      // Final output of the reasoning when successful with the non-CoT tokens.\n      \"REASONING_SUCCESS\",\n      // Content of a SQL query formulated by the model.\n      \"SQL_QUERY\",\n      // Error when executing a query.\n      \"EXECUTE_TABLES_QUERY_ERROR\",\n      // Generic thinking tokens.\n      \"THINKING\",\n      \"DATABASE_SCHEMA\",\n      \"QUERY_WRITING_INSTRUCTIONS\",\n      \"EXAMPLE_ROWS\",\n      \"TOOL_MARKER\",\n      \"WEBSEARCH_QUERY\",\n      \"WEBSEARCH_RESULT\",\n      \"RUN_AGENT_RESULT\",\n      \"RUN_AGENT_QUERY\",\n      \"WARNING\",\n      \"AGENT_CREATION_RESULT\",\n      \"TOOLSET_LIST_RESULT\",\n      \"TOOLSET_DESCRIBE_RESULT\",\n      // Legacy, kept for backwards compatibility.\n      \"GET_DATABASE_SCHEMA_MARKER\",\n      \"EXECUTE_TABLES_QUERY_MARKER\",\n    ],\n  }),\n};\n\nexport const INTERNAL_MIME_TYPES = {\n  ...CONTENT_NODE_MIME_TYPES,\n  ...TOOL_MIME_TYPES,\n};\n\nexport const INTERNAL_MIME_TYPES_VALUES = Object.values(\n  CONTENT_NODE_MIME_TYPES\n).flatMap((value) => Object.values(value).map((v) => v));\n\nexport const INCLUDABLE_INTERNAL_MIME_TYPES_VALUES = Object.values(\n  INCLUDABLE_INTERNAL_CONTENT_NODE_MIME_TYPES\n).flatMap((value) => Object.values(value).map((v) => v));\n\nexport type BigQueryMimeType =\n  (typeof INTERNAL_MIME_TYPES.BIGQUERY)[keyof typeof INTERNAL_MIME_TYPES.BIGQUERY];\n\nexport type ConfluenceMimeType =\n  (typeof INTERNAL_MIME_TYPES.CONFLUENCE)[keyof typeof INTERNAL_MIME_TYPES.CONFLUENCE];\n\nexport type GithubMimeType =\n  (typeof INTERNAL_MIME_TYPES.GITHUB)[keyof typeof INTERNAL_MIME_TYPES.GITHUB];\n\nexport type GoogleDriveMimeType =\n  (typeof INTERNAL_MIME_TYPES.GOOGLE_DRIVE)[keyof typeof INTERNAL_MIME_TYPES.GOOGLE_DRIVE];\n\nexport type IntercomMimeType =\n  (typeof INTERNAL_MIME_TYPES.INTERCOM)[keyof typeof INTERNAL_MIME_TYPES.INTERCOM];\n\nexport type MicrosoftMimeType =\n  (typeof INTERNAL_MIME_TYPES.MICROSOFT)[keyof typeof INTERNAL_MIME_TYPES.MICROSOFT];\n\nexport type NotionMimeType =\n  (typeof INTERNAL_MIME_TYPES.NOTION)[keyof typeof INTERNAL_MIME_TYPES.NOTION];\n\nexport type SlackMimeType =\n  (typeof INTERNAL_MIME_TYPES.SLACK)[keyof typeof INTERNAL_MIME_TYPES.SLACK];\n\nexport type SnowflakeMimeType =\n  (typeof INTERNAL_MIME_TYPES.SNOWFLAKE)[keyof typeof INTERNAL_MIME_TYPES.SNOWFLAKE];\n\nexport type WebcrawlerMimeType =\n  (typeof INTERNAL_MIME_TYPES.WEBCRAWLER)[keyof typeof INTERNAL_MIME_TYPES.WEBCRAWLER];\n\nexport type ZendeskMimeType =\n  (typeof INTERNAL_MIME_TYPES.ZENDESK)[keyof typeof INTERNAL_MIME_TYPES.ZENDESK];\n\nexport type SalesforceMimeType =\n  (typeof INTERNAL_MIME_TYPES.SALESFORCE)[keyof typeof INTERNAL_MIME_TYPES.SALESFORCE];\n\nexport type GongMimeType =\n  (typeof INTERNAL_MIME_TYPES.GONG)[keyof typeof INTERNAL_MIME_TYPES.GONG];\n\nexport type InternalToolInputMimeType =\n  (typeof INTERNAL_MIME_TYPES.TOOL_INPUT)[keyof typeof INTERNAL_MIME_TYPES.TOOL_INPUT];\n\nexport type IncludableInternalMimeType =\n  (typeof INCLUDABLE_INTERNAL_MIME_TYPES_VALUES)[number];\n\nexport type DustMimeType =\n  | BigQueryMimeType\n  | ConfluenceMimeType\n  | GithubMimeType\n  | GoogleDriveMimeType\n  | IntercomMimeType\n  | MicrosoftMimeType\n  | NotionMimeType\n  | SlackMimeType\n  | SnowflakeMimeType\n  | WebcrawlerMimeType\n  | ZendeskMimeType\n  | SalesforceMimeType\n  | GongMimeType\n  | DataSourceMimeType\n  | DataWarehouseMimeType\n  | DataSourceFolderSpreadsheetMimeType;\n\nexport function isDustMimeType(mimeType: string): mimeType is DustMimeType {\n  return (INTERNAL_MIME_TYPES_VALUES as string[]).includes(mimeType);\n}\n\nexport function isIncludableInternalMimeType(\n  mimeType: string\n): mimeType is IncludableInternalMimeType {\n  return (INCLUDABLE_INTERNAL_MIME_TYPES_VALUES as string[]).includes(mimeType);\n}\n","import { z, ZodTypeAny } from \"zod\";\n\n/**\n * Information about a validated access token, provided to request handlers.\n */\nexport interface AuthInfo {\n  /**\n   * The access token.\n   */\n  token: string;\n\n  /**\n   * The client ID associated with this token.\n   */\n  clientId: string;\n\n  /**\n   * Scopes associated with this token.\n   */\n  scopes: string[];\n\n  /**\n   * When the token expires (in seconds since epoch).\n   */\n  expiresAt?: number;\n\n  /**\n   * The RFC 8707 resource server identifier for which this token is valid.\n   * If set, this MUST match the MCP server's resource identifier (minus hash fragment).\n   */\n  resource?: URL;\n\n  /**\n   * Additional data associated with the token.\n   * This field should be used for any additional data that needs to be attached to the auth info.\n   */\n  extra?: Record<string, unknown>;\n}\n\nexport const LATEST_PROTOCOL_VERSION = \"2025-06-18\";\nexport const DEFAULT_NEGOTIATED_PROTOCOL_VERSION = \"2025-03-26\";\nexport const SUPPORTED_PROTOCOL_VERSIONS = [\n  LATEST_PROTOCOL_VERSION,\n  \"2025-03-26\",\n  \"2024-11-05\",\n  \"2024-10-07\",\n];\n\n/* JSON-RPC types */\nexport const JSONRPC_VERSION = \"2.0\";\n\n/**\n * A progress token, used to associate progress notifications with the original request.\n */\nexport const ProgressTokenSchema = z.union([z.string(), z.number().int()]);\n\n/**\n * An opaque token used to represent a cursor for pagination.\n */\nexport const CursorSchema = z.string();\n\nconst RequestMetaSchema = z\n  .object({\n    /**\n     * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.\n     */\n    progressToken: z.optional(ProgressTokenSchema),\n  })\n  .passthrough();\n\nconst BaseRequestParamsSchema = z\n  .object({\n    _meta: z.optional(RequestMetaSchema),\n  })\n  .passthrough();\n\nexport const RequestSchema = z.object({\n  method: z.string(),\n  params: z.optional(BaseRequestParamsSchema),\n});\n\nconst BaseNotificationParamsSchema = z\n  .object({\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: z.optional(z.object({}).passthrough()),\n  })\n  .passthrough();\n\nexport const NotificationSchema = z.object({\n  method: z.string(),\n  params: z.optional(BaseNotificationParamsSchema),\n});\n\nexport const ResultSchema = z\n  .object({\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: z.optional(z.object({}).passthrough()),\n  })\n  .passthrough();\n\n/**\n * A uniquely identifying ID for a request in JSON-RPC.\n */\nexport const RequestIdSchema = z.union([z.string(), z.number().int()]);\n\n/**\n * A request that expects a response.\n */\nexport const JSONRPCRequestSchema = z\n  .object({\n    jsonrpc: z.literal(JSONRPC_VERSION),\n    id: RequestIdSchema,\n  })\n  .merge(RequestSchema)\n  .strict();\n\nexport const isJSONRPCRequest = (value: unknown): value is JSONRPCRequest =>\n  JSONRPCRequestSchema.safeParse(value).success;\n\n/**\n * A notification which does not expect a response.\n */\nexport const JSONRPCNotificationSchema = z\n  .object({\n    jsonrpc: z.literal(JSONRPC_VERSION),\n  })\n  .merge(NotificationSchema)\n  .strict();\n\nexport const isJSONRPCNotification = (\n  value: unknown\n): value is JSONRPCNotification =>\n  JSONRPCNotificationSchema.safeParse(value).success;\n\n/**\n * A successful (non-error) response to a request.\n */\nexport const JSONRPCResponseSchema = z\n  .object({\n    jsonrpc: z.literal(JSONRPC_VERSION),\n    id: RequestIdSchema,\n    result: ResultSchema,\n  })\n  .strict();\n\nexport const isJSONRPCResponse = (value: unknown): value is JSONRPCResponse =>\n  JSONRPCResponseSchema.safeParse(value).success;\n\n/**\n * Error codes defined by the JSON-RPC specification.\n */\nexport enum ErrorCode {\n  // SDK error codes\n  ConnectionClosed = -32000,\n  RequestTimeout = -32001,\n\n  // Standard JSON-RPC error codes\n  ParseError = -32700,\n  InvalidRequest = -32600,\n  MethodNotFound = -32601,\n  InvalidParams = -32602,\n  InternalError = -32603,\n}\n\n/**\n * A response to a request that indicates an error occurred.\n */\nexport const JSONRPCErrorSchema = z\n  .object({\n    jsonrpc: z.literal(JSONRPC_VERSION),\n    id: RequestIdSchema,\n    error: z.object({\n      /**\n       * The error type that occurred.\n       */\n      code: z.number().int(),\n      /**\n       * A short description of the error. The message SHOULD be limited to a concise single sentence.\n       */\n      message: z.string(),\n      /**\n       * Additional information about the error. The value of this member is defined by the sender (e.g. detailed error information, nested errors etc.).\n       */\n      data: z.optional(z.unknown()),\n    }),\n  })\n  .strict();\n\nexport const isJSONRPCError = (value: unknown): value is JSONRPCError =>\n  JSONRPCErrorSchema.safeParse(value).success;\n\nexport const JSONRPCMessageSchema = z.union([\n  JSONRPCRequestSchema,\n  JSONRPCNotificationSchema,\n  JSONRPCResponseSchema,\n  JSONRPCErrorSchema,\n]);\n\n/* Empty result */\n/**\n * A response that indicates success but carries no data.\n */\nexport const EmptyResultSchema = ResultSchema.strict();\n\n/* Cancellation */\n/**\n * This notification can be sent by either side to indicate that it is cancelling a previously-issued request.\n *\n * The request SHOULD still be in-flight, but due to communication latency, it is always possible that this notification MAY arrive after the request has already finished.\n *\n * This notification indicates that the result will be unused, so any associated processing SHOULD cease.\n *\n * A client MUST NOT attempt to cancel its `initialize` request.\n */\nexport const CancelledNotificationSchema = NotificationSchema.extend({\n  method: z.literal(\"notifications/cancelled\"),\n  params: BaseNotificationParamsSchema.extend({\n    /**\n     * The ID of the request to cancel.\n     *\n     * This MUST correspond to the ID of a request previously issued in the same direction.\n     */\n    requestId: RequestIdSchema,\n\n    /**\n     * An optional string describing the reason for the cancellation. This MAY be logged or presented to the user.\n     */\n    reason: z.string().optional(),\n  }),\n});\n\n/* Base Metadata */\n/**\n * Base metadata interface for common properties across resources, tools, prompts, and implementations.\n */\nexport const BaseMetadataSchema = z\n  .object({\n    /** Intended for programmatic or logical use, but used as a display name in past specs or fallback */\n    name: z.string(),\n    /**\n     * Intended for UI and end-user contexts — optimized to be human-readable and easily understood,\n     * even by those unfamiliar with domain-specific terminology.\n     *\n     * If not provided, the name should be used for display (except for Tool,\n     * where `annotations.title` should be given precedence over using `name`,\n     * if present).\n     */\n    title: z.optional(z.string()),\n  })\n  .passthrough();\n\n/* Initialization */\n/**\n * Describes the name and version of an MCP implementation.\n */\nexport const ImplementationSchema = BaseMetadataSchema.extend({\n  version: z.string(),\n});\n\n/**\n * Capabilities a client may support. Known capabilities are defined here, in this schema, but this is not a closed set: any client can define its own, additional capabilities.\n */\nexport const ClientCapabilitiesSchema = z\n  .object({\n    /**\n     * Experimental, non-standard capabilities that the client supports.\n     */\n    experimental: z.optional(z.object({}).passthrough()),\n    /**\n     * Present if the client supports sampling from an LLM.\n     */\n    sampling: z.optional(z.object({}).passthrough()),\n    /**\n     * Present if the client supports eliciting user input.\n     */\n    elicitation: z.optional(z.object({}).passthrough()),\n    /**\n     * Present if the client supports listing roots.\n     */\n    roots: z.optional(\n      z\n        .object({\n          /**\n           * Whether the client supports issuing notifications for changes to the roots list.\n           */\n          listChanged: z.optional(z.boolean()),\n        })\n        .passthrough()\n    ),\n  })\n  .passthrough();\n\n/**\n * This request is sent from the client to the server when it first connects, asking it to begin initialization.\n */\nexport const InitializeRequestSchema = RequestSchema.extend({\n  method: z.literal(\"initialize\"),\n  params: BaseRequestParamsSchema.extend({\n    /**\n     * The latest version of the Model Context Protocol that the client supports. The client MAY decide to support older versions as well.\n     */\n    protocolVersion: z.string(),\n    capabilities: ClientCapabilitiesSchema,\n    clientInfo: ImplementationSchema,\n  }),\n});\n\nexport const isInitializeRequest = (\n  value: unknown\n): value is InitializeRequest =>\n  InitializeRequestSchema.safeParse(value).success;\n\n/**\n * Capabilities that a server may support. Known capabilities are defined here, in this schema, but this is not a closed set: any server can define its own, additional capabilities.\n */\nexport const ServerCapabilitiesSchema = z\n  .object({\n    /**\n     * Experimental, non-standard capabilities that the server supports.\n     */\n    experimental: z.optional(z.object({}).passthrough()),\n    /**\n     * Present if the server supports sending log messages to the client.\n     */\n    logging: z.optional(z.object({}).passthrough()),\n    /**\n     * Present if the server supports sending completions to the client.\n     */\n    completions: z.optional(z.object({}).passthrough()),\n    /**\n     * Present if the server offers any prompt templates.\n     */\n    prompts: z.optional(\n      z\n        .object({\n          /**\n           * Whether this server supports issuing notifications for changes to the prompt list.\n           */\n          listChanged: z.optional(z.boolean()),\n        })\n        .passthrough()\n    ),\n    /**\n     * Present if the server offers any resources to read.\n     */\n    resources: z.optional(\n      z\n        .object({\n          /**\n           * Whether this server supports clients subscribing to resource updates.\n           */\n          subscribe: z.optional(z.boolean()),\n\n          /**\n           * Whether this server supports issuing notifications for changes to the resource list.\n           */\n          listChanged: z.optional(z.boolean()),\n        })\n        .passthrough()\n    ),\n    /**\n     * Present if the server offers any tools to call.\n     */\n    tools: z.optional(\n      z\n        .object({\n          /**\n           * Whether this server supports issuing notifications for changes to the tool list.\n           */\n          listChanged: z.optional(z.boolean()),\n        })\n        .passthrough()\n    ),\n  })\n  .passthrough();\n\n/**\n * After receiving an initialize request from the client, the server sends this response.\n */\nexport const InitializeResultSchema = ResultSchema.extend({\n  /**\n   * The version of the Model Context Protocol that the server wants to use. This may not match the version that the client requested. If the client cannot support this version, it MUST disconnect.\n   */\n  protocolVersion: z.string(),\n  capabilities: ServerCapabilitiesSchema,\n  serverInfo: ImplementationSchema,\n  /**\n   * Instructions describing how to use the server and its features.\n   *\n   * This can be used by clients to improve the LLM's understanding of available tools, resources, etc. It can be thought of like a \"hint\" to the model. For example, this information MAY be added to the system prompt.\n   */\n  instructions: z.optional(z.string()),\n});\n\n/**\n * This notification is sent from the client to the server after initialization has finished.\n */\nexport const InitializedNotificationSchema = NotificationSchema.extend({\n  method: z.literal(\"notifications/initialized\"),\n});\n\nexport const isInitializedNotification = (\n  value: unknown\n): value is InitializedNotification =>\n  InitializedNotificationSchema.safeParse(value).success;\n\n/* Ping */\n/**\n * A ping, issued by either the server or the client, to check that the other party is still alive. The receiver must promptly respond, or else may be disconnected.\n */\nexport const PingRequestSchema = RequestSchema.extend({\n  method: z.literal(\"ping\"),\n});\n\n/* Progress notifications */\nexport const ProgressSchema = z\n  .object({\n    /**\n     * The progress thus far. This should increase every time progress is made, even if the total is unknown.\n     */\n    progress: z.number(),\n    /**\n     * Total number of items to process (or total progress required), if known.\n     */\n    total: z.optional(z.number()),\n    /**\n     * An optional message describing the current progress.\n     */\n    message: z.optional(z.string()),\n  })\n  .passthrough();\n\n/**\n * An out-of-band notification used to inform the receiver of a progress update for a long-running request.\n */\nexport const ProgressNotificationSchema = NotificationSchema.extend({\n  method: z.literal(\"notifications/progress\"),\n  params: BaseNotificationParamsSchema.merge(ProgressSchema).extend({\n    /**\n     * The progress token which was given in the initial request, used to associate this notification with the request that is proceeding.\n     */\n    progressToken: ProgressTokenSchema,\n  }),\n});\n\n/* Pagination */\nexport const PaginatedRequestSchema = RequestSchema.extend({\n  params: BaseRequestParamsSchema.extend({\n    /**\n     * An opaque token representing the current pagination position.\n     * If provided, the server should return results starting after this cursor.\n     */\n    cursor: z.optional(CursorSchema),\n  }).optional(),\n});\n\nexport const PaginatedResultSchema = ResultSchema.extend({\n  /**\n   * An opaque token representing the pagination position after the last returned result.\n   * If present, there may be more results available.\n   */\n  nextCursor: z.optional(CursorSchema),\n});\n\n/* Resources */\n/**\n * The contents of a specific resource or sub-resource.\n */\nexport const ResourceContentsSchema = z\n  .object({\n    /**\n     * The URI of this resource.\n     */\n    uri: z.string(),\n    /**\n     * The MIME type of this resource, if known.\n     */\n    mimeType: z.optional(z.string()),\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: z.optional(z.object({}).passthrough()),\n  })\n  .passthrough();\n\nexport const TextResourceContentsSchema = ResourceContentsSchema.extend({\n  /**\n   * The text of the item. This must only be set if the item can actually be represented as text (not binary data).\n   */\n  text: z.string(),\n});\n\n/**\n * A Zod schema for validating Base64 strings that is more performant and\n * robust for very large inputs than the default regex-based check. It avoids\n * stack overflows by using the native `atob` function for validation.\n */\nconst Base64Schema = z.string().refine(\n  (val) => {\n    try {\n      // atob throws a DOMException if the string contains characters\n      // that are not part of the Base64 character set.\n      atob(val);\n      return true;\n    } catch {\n      return false;\n    }\n  },\n  { message: \"Invalid Base64 string\" }\n);\n\nexport const BlobResourceContentsSchema = ResourceContentsSchema.extend({\n  /**\n   * A base64-encoded string representing the binary data of the item.\n   */\n  blob: Base64Schema,\n});\n\n/**\n * A known resource that the server is capable of reading.\n */\nexport const ResourceSchema = BaseMetadataSchema.extend({\n  /**\n   * The URI of this resource.\n   */\n  uri: z.string(),\n\n  /**\n   * A description of what this resource represents.\n   *\n   * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a \"hint\" to the model.\n   */\n  description: z.optional(z.string()),\n\n  /**\n   * The MIME type of this resource, if known.\n   */\n  mimeType: z.optional(z.string()),\n\n  /**\n   * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n   * for notes on _meta usage.\n   */\n  _meta: z.optional(z.object({}).passthrough()),\n});\n\n/**\n * A template description for resources available on the server.\n */\nexport const ResourceTemplateSchema = BaseMetadataSchema.extend({\n  /**\n   * A URI template (according to RFC 6570) that can be used to construct resource URIs.\n   */\n  uriTemplate: z.string(),\n\n  /**\n   * A description of what this template is for.\n   *\n   * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a \"hint\" to the model.\n   */\n  description: z.optional(z.string()),\n\n  /**\n   * The MIME type for all resources that match this template. This should only be included if all resources matching this template have the same type.\n   */\n  mimeType: z.optional(z.string()),\n\n  /**\n   * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n   * for notes on _meta usage.\n   */\n  _meta: z.optional(z.object({}).passthrough()),\n});\n\n/**\n * Sent from the client to request a list of resources the server has.\n */\nexport const ListResourcesRequestSchema = PaginatedRequestSchema.extend({\n  method: z.literal(\"resources/list\"),\n});\n\n/**\n * The server's response to a resources/list request from the client.\n */\nexport const ListResourcesResultSchema = PaginatedResultSchema.extend({\n  resources: z.array(ResourceSchema),\n});\n\n/**\n * Sent from the client to request a list of resource templates the server has.\n */\nexport const ListResourceTemplatesRequestSchema = PaginatedRequestSchema.extend(\n  {\n    method: z.literal(\"resources/templates/list\"),\n  }\n);\n\n/**\n * The server's response to a resources/templates/list request from the client.\n */\nexport const ListResourceTemplatesResultSchema = PaginatedResultSchema.extend({\n  resourceTemplates: z.array(ResourceTemplateSchema),\n});\n\n/**\n * Sent from the client to the server, to read a specific resource URI.\n */\nexport const ReadResourceRequestSchema = RequestSchema.extend({\n  method: z.literal(\"resources/read\"),\n  params: BaseRequestParamsSchema.extend({\n    /**\n     * The URI of the resource to read. The URI can use any protocol; it is up to the server how to interpret it.\n     */\n    uri: z.string(),\n  }),\n});\n\n/**\n * The server's response to a resources/read request from the client.\n */\nexport const ReadResourceResultSchema = ResultSchema.extend({\n  contents: z.array(\n    z.union([TextResourceContentsSchema, BlobResourceContentsSchema])\n  ),\n});\n\n/**\n * An optional notification from the server to the client, informing it that the list of resources it can read from has changed. This may be issued by servers without any previous subscription from the client.\n */\nexport const ResourceListChangedNotificationSchema = NotificationSchema.extend({\n  method: z.literal(\"notifications/resources/list_changed\"),\n});\n\n/**\n * Sent from the client to request resources/updated notifications from the server whenever a particular resource changes.\n */\nexport const SubscribeRequestSchema = RequestSchema.extend({\n  method: z.literal(\"resources/subscribe\"),\n  params: BaseRequestParamsSchema.extend({\n    /**\n     * The URI of the resource to subscribe to. The URI can use any protocol; it is up to the server how to interpret it.\n     */\n    uri: z.string(),\n  }),\n});\n\n/**\n * Sent from the client to request cancellation of resources/updated notifications from the server. This should follow a previous resources/subscribe request.\n */\nexport const UnsubscribeRequestSchema = RequestSchema.extend({\n  method: z.literal(\"resources/unsubscribe\"),\n  params: BaseRequestParamsSchema.extend({\n    /**\n     * The URI of the resource to unsubscribe from.\n     */\n    uri: z.string(),\n  }),\n});\n\n/**\n * A notification from the server to the client, informing it that a resource has changed and may need to be read again. This should only be sent if the client previously sent a resources/subscribe request.\n */\nexport const ResourceUpdatedNotificationSchema = NotificationSchema.extend({\n  method: z.literal(\"notifications/resources/updated\"),\n  params: BaseNotificationParamsSchema.extend({\n    /**\n     * The URI of the resource that has been updated. This might be a sub-resource of the one that the client actually subscribed to.\n     */\n    uri: z.string(),\n  }),\n});\n\n/* Prompts */\n/**\n * Describes an argument that a prompt can accept.\n */\nexport const PromptArgumentSchema = z\n  .object({\n    /**\n     * The name of the argument.\n     */\n    name: z.string(),\n    /**\n     * A human-readable description of the argument.\n     */\n    description: z.optional(z.string()),\n    /**\n     * Whether this argument must be provided.\n     */\n    required: z.optional(z.boolean()),\n  })\n  .passthrough();\n\n/**\n * A prompt or prompt template that the server offers.\n */\nexport const PromptSchema = BaseMetadataSchema.extend({\n  /**\n   * An optional description of what this prompt provides\n   */\n  description: z.optional(z.string()),\n  /**\n   * A list of arguments to use for templating the prompt.\n   */\n  arguments: z.optional(z.array(PromptArgumentSchema)),\n  /**\n   * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n   * for notes on _meta usage.\n   */\n  _meta: z.optional(z.object({}).passthrough()),\n});\n\n/**\n * Sent from the client to request a list of prompts and prompt templates the server has.\n */\nexport const ListPromptsRequestSchema = PaginatedRequestSchema.extend({\n  method: z.literal(\"prompts/list\"),\n});\n\n/**\n * The server's response to a prompts/list request from the client.\n */\nexport const ListPromptsResultSchema = PaginatedResultSchema.extend({\n  prompts: z.array(PromptSchema),\n});\n\n/**\n * Used by the client to get a prompt provided by the server.\n */\nexport const GetPromptRequestSchema = RequestSchema.extend({\n  method: z.literal(\"prompts/get\"),\n  params: BaseRequestParamsSchema.extend({\n    /**\n     * The name of the prompt or prompt template.\n     */\n    name: z.string(),\n    /**\n     * Arguments to use for templating the prompt.\n     */\n    arguments: z.optional(z.record(z.string())),\n  }),\n});\n\n/**\n * Text provided to or from an LLM.\n */\nexport const TextContentSchema = z\n  .object({\n    type: z.literal(\"text\"),\n    /**\n     * The text content of the message.\n     */\n    text: z.string(),\n\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: z.optional(z.object({}).passthrough()),\n  })\n  .passthrough();\n\n/**\n * An image provided to or from an LLM.\n */\nexport const ImageContentSchema = z\n  .object({\n    type: z.literal(\"image\"),\n    /**\n     * The base64-encoded image data.\n     */\n    data: Base64Schema,\n    /**\n     * The MIME type of the image. Different providers may support different image types.\n     */\n    mimeType: z.string(),\n\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: z.optional(z.object({}).passthrough()),\n  })\n  .passthrough();\n\n/**\n * An Audio provided to or from an LLM.\n */\nexport const AudioContentSchema = z\n  .object({\n    type: z.literal(\"audio\"),\n    /**\n     * The base64-encoded audio data.\n     */\n    data: Base64Schema,\n    /**\n     * The MIME type of the audio. Different providers may support different audio types.\n     */\n    mimeType: z.string(),\n\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: z.optional(z.object({}).passthrough()),\n  })\n  .passthrough();\n\n/**\n * The contents of a resource, embedded into a prompt or tool call result.\n */\nexport const EmbeddedResourceSchema = z\n  .object({\n    type: z.literal(\"resource\"),\n    resource: z.union([TextResourceContentsSchema, BlobResourceContentsSchema]),\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: z.optional(z.object({}).passthrough()),\n  })\n  .passthrough();\n\n/**\n * A resource that the server is capable of reading, included in a prompt or tool call result.\n *\n * Note: resource links returned by tools are not guaranteed to appear in the results of `resources/list` requests.\n */\nexport const ResourceLinkSchema = ResourceSchema.extend({\n  type: z.literal(\"resource_link\"),\n});\n\n/**\n * A content block that can be used in prompts and tool results.\n */\nexport const ContentBlockSchema = z.union([\n  TextContentSchema,\n  ImageContentSchema,\n  AudioContentSchema,\n  ResourceLinkSchema,\n  EmbeddedResourceSchema,\n]);\n\n/**\n * Describes a message returned as part of a prompt.\n */\nexport const PromptMessageSchema = z\n  .object({\n    role: z.enum([\"user\", \"assistant\"]),\n    content: ContentBlockSchema,\n  })\n  .passthrough();\n\n/**\n * The server's response to a prompts/get request from the client.\n */\nexport const GetPromptResultSchema = ResultSchema.extend({\n  /**\n   * An optional description for the prompt.\n   */\n  description: z.optional(z.string()),\n  messages: z.array(PromptMessageSchema),\n});\n\n/**\n * An optional notification from the server to the client, informing it that the list of prompts it offers has changed. This may be issued by servers without any previous subscription from the client.\n */\nexport const PromptListChangedNotificationSchema = NotificationSchema.extend({\n  method: z.literal(\"notifications/prompts/list_changed\"),\n});\n\n/* Tools */\n/**\n * Additional properties describing a Tool to clients.\n *\n * NOTE: all properties in ToolAnnotations are **hints**.\n * They are not guaranteed to provide a faithful description of\n * tool behavior (including descriptive properties like `title`).\n *\n * Clients should never make tool use decisions based on ToolAnnotations\n * received from untrusted servers.\n */\nexport const ToolAnnotationsSchema = z\n  .object({\n    /**\n     * A human-readable title for the tool.\n     */\n    title: z.optional(z.string()),\n\n    /**\n     * If true, the tool does not modify its environment.\n     *\n     * Default: false\n     */\n    readOnlyHint: z.optional(z.boolean()),\n\n    /**\n     * If true, the tool may perform destructive updates to its environment.\n     * If false, the tool performs only additive updates.\n     *\n     * (This property is meaningful only when `readOnlyHint == false`)\n     *\n     * Default: true\n     */\n    destructiveHint: z.optional(z.boolean()),\n\n    /**\n     * If true, calling the tool repeatedly with the same arguments\n     * will have no additional effect on the its environment.\n     *\n     * (This property is meaningful only when `readOnlyHint == false`)\n     *\n     * Default: false\n     */\n    idempotentHint: z.optional(z.boolean()),\n\n    /**\n     * If true, this tool may interact with an \"open world\" of external\n     * entities. If false, the tool's domain of interaction is closed.\n     * For example, the world of a web search tool is open, whereas that\n     * of a memory tool is not.\n     *\n     * Default: true\n     */\n    openWorldHint: z.optional(z.boolean()),\n  })\n  .passthrough();\n\n/**\n * Definition for a tool the client can call.\n */\nexport const ToolSchema = BaseMetadataSchema.extend({\n  /**\n   * A human-readable description of the tool.\n   */\n  description: z.optional(z.string()),\n  /**\n   * A JSON Schema object defining the expected parameters for the tool.\n   */\n  inputSchema: z\n    .object({\n      type: z.literal(\"object\"),\n      properties: z.optional(z.object({}).passthrough()),\n      required: z.optional(z.array(z.string())),\n    })\n    .passthrough(),\n  /**\n   * An optional JSON Schema object defining the structure of the tool's output returned in\n   * the structuredContent field of a CallToolResult.\n   */\n  outputSchema: z.optional(\n    z\n      .object({\n        type: z.literal(\"object\"),\n        properties: z.optional(z.object({}).passthrough()),\n        required: z.optional(z.array(z.string())),\n      })\n      .passthrough()\n  ),\n  /**\n   * Optional additional tool information.\n   */\n  annotations: z.optional(ToolAnnotationsSchema),\n\n  /**\n   * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n   * for notes on _meta usage.\n   */\n  _meta: z.optional(z.object({}).passthrough()),\n});\n\n/**\n * Sent from the client to request a list of tools the server has.\n */\nexport const ListToolsRequestSchema = PaginatedRequestSchema.extend({\n  method: z.literal(\"tools/list\"),\n});\n\n/**\n * The server's response to a tools/list request from the client.\n */\nexport const ListToolsResultSchema = PaginatedResultSchema.extend({\n  tools: z.array(ToolSchema),\n});\n\n/**\n * The server's response to a tool call.\n */\nexport const CallToolResultSchema = ResultSchema.extend({\n  /**\n   * A list of content objects that represent the result of the tool call.\n   *\n   * If the Tool does not define an outputSchema, this field MUST be present in the result.\n   * For backwards compatibility, this field is always present, but it may be empty.\n   */\n  content: z.array(ContentBlockSchema).default([]),\n\n  /**\n   * An object containing structured tool output.\n   *\n   * If the Tool defines an outputSchema, this field MUST be present in the result, and contain a JSON object that matches the schema.\n   */\n  structuredContent: z.object({}).passthrough().optional(),\n\n  /**\n   * Whether the tool call ended in an error.\n   *\n   * If not set, this is assumed to be false (the call was successful).\n   *\n   * Any errors that originate from the tool SHOULD be reported inside the result\n   * object, with `isError` set to true, _not_ as an MCP protocol-level error\n   * response. Otherwise, the LLM would not be able to see that an error occurred\n   * and self-correct.\n   *\n   * However, any errors in _finding_ the tool, an error indicating that the\n   * server does not support tool calls, or any other exceptional conditions,\n   * should be reported as an MCP error response.\n   */\n  isError: z.optional(z.boolean()),\n});\n\n/**\n * CallToolResultSchema extended with backwards compatibility to protocol version 2024-10-07.\n */\nexport const CompatibilityCallToolResultSchema = CallToolResultSchema.or(\n  ResultSchema.extend({\n    toolResult: z.unknown(),\n  })\n);\n\n/**\n * Used by the client to invoke a tool provided by the server.\n */\nexport const CallToolRequestSchema = RequestSchema.extend({\n  method: z.literal(\"tools/call\"),\n  params: BaseRequestParamsSchema.extend({\n    name: z.string(),\n    arguments: z.optional(z.record(z.unknown())),\n  }),\n});\n\n/**\n * An optional notification from the server to the client, informing it that the list of tools it offers has changed. This may be issued by servers without any previous subscription from the client.\n */\nexport const ToolListChangedNotificationSchema = NotificationSchema.extend({\n  method: z.literal(\"notifications/tools/list_changed\"),\n});\n\n/* Logging */\n/**\n * The severity of a log message.\n */\nexport const LoggingLevelSchema = z.enum([\n  \"debug\",\n  \"info\",\n  \"notice\",\n  \"warning\",\n  \"error\",\n  \"critical\",\n  \"alert\",\n  \"emergency\",\n]);\n\n/**\n * A request from the client to the server, to enable or adjust logging.\n */\nexport const SetLevelRequestSchema = RequestSchema.extend({\n  method: z.literal(\"logging/setLevel\"),\n  params: BaseRequestParamsSchema.extend({\n    /**\n     * The level of logging that the client wants to receive from the server. The server should send all logs at this level and higher (i.e., more severe) to the client as notifications/logging/message.\n     */\n    level: LoggingLevelSchema,\n  }),\n});\n\n/**\n * Notification of a log message passed from server to client. If no logging/setLevel request has been sent from the client, the server MAY decide which messages to send automatically.\n */\nexport const LoggingMessageNotificationSchema = NotificationSchema.extend({\n  method: z.literal(\"notifications/message\"),\n  params: BaseNotificationParamsSchema.extend({\n    /**\n     * The severity of this log message.\n     */\n    level: LoggingLevelSchema,\n    /**\n     * An optional name of the logger issuing this message.\n     */\n    logger: z.optional(z.string()),\n    /**\n     * The data to be logged, such as a string message or an object. Any JSON serializable type is allowed here.\n     */\n    data: z.unknown(),\n  }),\n});\n\n/* Sampling */\n/**\n * Hints to use for model selection.\n */\nexport const ModelHintSchema = z\n  .object({\n    /**\n     * A hint for a model name.\n     */\n    name: z.string().optional(),\n  })\n  .passthrough();\n\n/**\n * The server's preferences for model selection, requested of the client during sampling.\n */\nexport const ModelPreferencesSchema = z\n  .object({\n    /**\n     * Optional hints to use for model selection.\n     */\n    hints: z.optional(z.array(ModelHintSchema)),\n    /**\n     * How much to prioritize cost when selecting a model.\n     */\n    costPriority: z.optional(z.number().min(0).max(1)),\n    /**\n     * How much to prioritize sampling speed (latency) when selecting a model.\n     */\n    speedPriority: z.optional(z.number().min(0).max(1)),\n    /**\n     * How much to prioritize intelligence and capabilities when selecting a model.\n     */\n    intelligencePriority: z.optional(z.number().min(0).max(1)),\n  })\n  .passthrough();\n\n/**\n * Describes a message issued to or received from an LLM API.\n */\nexport const SamplingMessageSchema = z\n  .object({\n    role: z.enum([\"user\", \"assistant\"]),\n    content: z.union([\n      TextContentSchema,\n      ImageContentSchema,\n      AudioContentSchema,\n    ]),\n  })\n  .passthrough();\n\n/**\n * A request from the server to sample an LLM via the client. The client has full discretion over which model to select. The client should also inform the user before beginning sampling, to allow them to inspect the request (human in the loop) and decide whether to approve it.\n */\nexport const CreateMessageRequestSchema = RequestSchema.extend({\n  method: z.literal(\"sampling/createMessage\"),\n  params: BaseRequestParamsSchema.extend({\n    messages: z.array(SamplingMessageSchema),\n    /**\n     * An optional system prompt the server wants to use for sampling. The client MAY modify or omit this prompt.\n     */\n    systemPrompt: z.optional(z.string()),\n    /**\n     * A request to include context from one or more MCP servers (including the caller), to be attached to the prompt. The client MAY ignore this request.\n     */\n    includeContext: z.optional(z.enum([\"none\", \"thisServer\", \"allServers\"])),\n    temperature: z.optional(z.number()),\n    /**\n     * The maximum number of tokens to sample, as requested by the server. The client MAY choose to sample fewer tokens than requested.\n     */\n    maxTokens: z.number().int(),\n    stopSequences: z.optional(z.array(z.string())),\n    /**\n     * Optional metadata to pass through to the LLM provider. The format of this metadata is provider-specific.\n     */\n    metadata: z.optional(z.object({}).passthrough()),\n    /**\n     * The server's preferences for which model to select.\n     */\n    modelPreferences: z.optional(ModelPreferencesSchema),\n  }),\n});\n\n/**\n * The client's response to a sampling/create_message request from the server. The client should inform the user before returning the sampled message, to allow them to inspect the response (human in the loop) and decide whether to allow the server to see it.\n */\nexport const CreateMessageResultSchema = ResultSchema.extend({\n  /**\n   * The name of the model that generated the message.\n   */\n  model: z.string(),\n  /**\n   * The reason why sampling stopped.\n   */\n  stopReason: z.optional(\n    z.enum([\"endTurn\", \"stopSequence\", \"maxTokens\"]).or(z.string())\n  ),\n  role: z.enum([\"user\", \"assistant\"]),\n  content: z.discriminatedUnion(\"type\", [\n    TextContentSchema,\n    ImageContentSchema,\n    AudioContentSchema,\n  ]),\n});\n\n/* Elicitation */\n/**\n * Primitive schema definition for boolean fields.\n */\nexport const BooleanSchemaSchema = z\n  .object({\n    type: z.literal(\"boolean\"),\n    title: z.optional(z.string()),\n    description: z.optional(z.string()),\n    default: z.optional(z.boolean()),\n  })\n  .passthrough();\n\n/**\n * Primitive schema definition for string fields.\n */\nexport const StringSchemaSchema = z\n  .object({\n    type: z.literal(\"string\"),\n    title: z.optional(z.string()),\n    description: z.optional(z.string()),\n    minLength: z.optional(z.number()),\n    maxLength: z.optional(z.number()),\n    format: z.optional(z.enum([\"email\", \"uri\", \"date\", \"date-time\"])),\n  })\n  .passthrough();\n\n/**\n * Primitive schema definition for number fields.\n */\nexport const NumberSchemaSchema = z\n  .object({\n    type: z.enum([\"number\", \"integer\"]),\n    title: z.optional(z.string()),\n    description: z.optional(z.string()),\n    minimum: z.optional(z.number()),\n    maximum: z.optional(z.number()),\n  })\n  .passthrough();\n\n/**\n * Primitive schema definition for enum fields.\n */\nexport const EnumSchemaSchema = z\n  .object({\n    type: z.literal(\"string\"),\n    title: z.optional(z.string()),\n    description: z.optional(z.string()),\n    enum: z.array(z.string()),\n    enumNames: z.optional(z.array(z.string())),\n  })\n  .passthrough();\n\n/**\n * Union of all primitive schema definitions.\n */\nexport const PrimitiveSchemaDefinitionSchema = z.union([\n  BooleanSchemaSchema,\n  StringSchemaSchema,\n  NumberSchemaSchema,\n  EnumSchemaSchema,\n]);\n\n/**\n * A request from the server to elicit user input via the client.\n * The client should present the message and form fields to the user.\n */\nexport const ElicitRequestSchema = RequestSchema.extend({\n  method: z.literal(\"elicitation/create\"),\n  params: BaseRequestParamsSchema.extend({\n    /**\n     * The message to present to the user.\n     */\n    message: z.string(),\n    /**\n     * The schema for the requested user input.\n     */\n    requestedSchema: z\n      .object({\n        type: z.literal(\"object\"),\n        properties: z.record(z.string(), PrimitiveSchemaDefinitionSchema),\n        required: z.optional(z.array(z.string())),\n      })\n      .passthrough(),\n  }),\n});\n\n/**\n * The client's response to an elicitation/create request from the server.\n */\nexport const ElicitResultSchema = ResultSchema.extend({\n  /**\n   * The user's response action.\n   */\n  action: z.enum([\"accept\", \"decline\", \"cancel\"]),\n  /**\n   * The collected user input content (only present if action is \"accept\").\n   */\n  content: z.optional(z.record(z.string(), z.unknown())),\n});\n\n/* Autocomplete */\n/**\n * A reference to a resource or resource template definition.\n */\nexport const ResourceTemplateReferenceSchema = z\n  .object({\n    type: z.literal(\"ref/resource\"),\n    /**\n     * The URI or URI template of the resource.\n     */\n    uri: z.string(),\n  })\n  .passthrough();\n\n/**\n * @deprecated Use ResourceTemplateReferenceSchema instead\n */\nexport const ResourceReferenceSchema = ResourceTemplateReferenceSchema;\n\n/**\n * Identifies a prompt.\n */\nexport const PromptReferenceSchema = z\n  .object({\n    type: z.literal(\"ref/prompt\"),\n    /**\n     * The name of the prompt or prompt template\n     */\n    name: z.string(),\n  })\n  .passthrough();\n\n/**\n * A request from the client to the server, to ask for completion options.\n */\nexport const CompleteRequestSchema = RequestSchema.extend({\n  method: z.literal(\"completion/complete\"),\n  params: BaseRequestParamsSchema.extend({\n    ref: z.union([PromptReferenceSchema, ResourceTemplateReferenceSchema]),\n    /**\n     * The argument's information\n     */\n    argument: z\n      .object({\n        /**\n         * The name of the argument\n         */\n        name: z.string(),\n        /**\n         * The value of the argument to use for completion matching.\n         */\n        value: z.string(),\n      })\n      .passthrough(),\n    context: z.optional(\n      z.object({\n        /**\n         * Previously-resolved variables in a URI template or prompt.\n         */\n        arguments: z.optional(z.record(z.string(), z.string())),\n      })\n    ),\n  }),\n});\n\n/**\n * The server's response to a completion/complete request\n */\nexport const CompleteResultSchema = ResultSchema.extend({\n  completion: z\n    .object({\n      /**\n       * An array of completion values. Must not exceed 100 items.\n       */\n      values: z.array(z.string()).max(100),\n      /**\n       * The total number of completion options available. This can exceed the number of values actually sent in the response.\n       */\n      total: z.optional(z.number().int()),\n      /**\n       * Indicates whether there are additional completion options beyond those provided in the current response, even if the exact total is unknown.\n       */\n      hasMore: z.optional(z.boolean()),\n    })\n    .passthrough(),\n});\n\n/* Roots */\n/**\n * Represents a root directory or file that the server can operate on.\n */\nexport const RootSchema = z\n  .object({\n    /**\n     * The URI identifying the root. This *must* start with file:// for now.\n     */\n    uri: z.string().startsWith(\"file://\"),\n    /**\n     * An optional name for the root.\n     */\n    name: z.optional(z.string()),\n\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: z.optional(z.object({}).passthrough()),\n  })\n  .passthrough();\n\n/**\n * Sent from the server to request a list of root URIs from the client.\n */\nexport const ListRootsRequestSchema = RequestSchema.extend({\n  method: z.literal(\"roots/list\"),\n});\n\n/**\n * The client's response to a roots/list request from the server.\n */\nexport const ListRootsResultSchema = ResultSchema.extend({\n  roots: z.array(RootSchema),\n});\n\n/**\n * A notification from the client to the server, informing it that the list of roots has changed.\n */\nexport const RootsListChangedNotificationSchema = NotificationSchema.extend({\n  method: z.literal(\"notifications/roots/list_changed\"),\n});\n\n/* Client messages */\nexport const ClientRequestSchema = z.union([\n  PingRequestSchema,\n  InitializeRequestSchema,\n  CompleteRequestSchema,\n  SetLevelRequestSchema,\n  GetPromptRequestSchema,\n  ListPromptsRequestSchema,\n  ListResourcesRequestSchema,\n  ListResourceTemplatesRequestSchema,\n  ReadResourceRequestSchema,\n  SubscribeRequestSchema,\n  UnsubscribeRequestSchema,\n  CallToolRequestSchema,\n  ListToolsRequestSchema,\n]);\n\nexport const ClientNotificationSchema = z.union([\n  CancelledNotificationSchema,\n  ProgressNotificationSchema,\n  InitializedNotificationSchema,\n  RootsListChangedNotificationSchema,\n]);\n\nexport const ClientResultSchema = z.union([\n  EmptyResultSchema,\n  CreateMessageResultSchema,\n  ElicitResultSchema,\n  ListRootsResultSchema,\n]);\n\n/* Server messages */\nexport const ServerRequestSchema = z.union([\n  PingRequestSchema,\n  CreateMessageRequestSchema,\n  ElicitRequestSchema,\n  ListRootsRequestSchema,\n]);\n\nexport const ServerNotificationSchema = z.union([\n  CancelledNotificationSchema,\n  ProgressNotificationSchema,\n  LoggingMessageNotificationSchema,\n  ResourceUpdatedNotificationSchema,\n  ResourceListChangedNotificationSchema,\n  ToolListChangedNotificationSchema,\n  PromptListChangedNotificationSchema,\n]);\n\nexport const ServerResultSchema = z.union([\n  EmptyResultSchema,\n  InitializeResultSchema,\n  CompleteResultSchema,\n  GetPromptResultSchema,\n  ListPromptsResultSchema,\n  ListResourcesResultSchema,\n  ListResourceTemplatesResultSchema,\n  ReadResourceResultSchema,\n  CallToolResultSchema,\n  ListToolsResultSchema,\n]);\n\nexport class McpError extends Error {\n  constructor(\n    public readonly code: number,\n    message: string,\n    public readonly data?: unknown\n  ) {\n    super(`MCP error ${code}: ${message}`);\n    this.name = \"McpError\";\n  }\n}\n\ntype Primitive = string | number | boolean | bigint | null | undefined;\ntype Flatten<T> = T extends Primitive\n  ? T\n  : T extends Array<infer U>\n  ? Array<Flatten<U>>\n  : T extends Set<infer U>\n  ? Set<Flatten<U>>\n  : T extends Map<infer K, infer V>\n  ? Map<Flatten<K>, Flatten<V>>\n  : T extends object\n  ? { [K in keyof T]: Flatten<T[K]> }\n  : T;\n\ntype Infer<Schema extends ZodTypeAny> = Flatten<z.infer<Schema>>;\n\n/**\n * Headers that are compatible with both Node.js and the browser.\n */\nexport type IsomorphicHeaders = Record<string, string | string[] | undefined>;\n\n/**\n * Information about the incoming request.\n */\nexport interface RequestInfo {\n  /**\n   * The headers of the request.\n   */\n  headers: IsomorphicHeaders;\n}\n\n/**\n * Extra information about a message.\n */\nexport interface MessageExtraInfo {\n  /**\n   * The request information.\n   */\n  requestInfo?: RequestInfo;\n\n  /**\n   * The authentication information.\n   */\n  authInfo?: AuthInfo;\n}\n\n/* JSON-RPC types */\nexport type ProgressToken = Infer<typeof ProgressTokenSchema>;\nexport type Cursor = Infer<typeof CursorSchema>;\nexport type Request = Infer<typeof RequestSchema>;\nexport type RequestMeta = Infer<typeof RequestMetaSchema>;\nexport type Notification = Infer<typeof NotificationSchema>;\nexport type Result = Infer<typeof ResultSchema>;\nexport type RequestId = Infer<typeof RequestIdSchema>;\nexport type JSONRPCRequest = Infer<typeof JSONRPCRequestSchema>;\nexport type JSONRPCNotification = Infer<typeof JSONRPCNotificationSchema>;\nexport type JSONRPCResponse = Infer<typeof JSONRPCResponseSchema>;\nexport type JSONRPCError = Infer<typeof JSONRPCErrorSchema>;\nexport type JSONRPCMessage = Infer<typeof JSONRPCMessageSchema>;\n\n/* Empty result */\nexport type EmptyResult = Infer<typeof EmptyResultSchema>;\n\n/* Cancellation */\nexport type CancelledNotification = Infer<typeof CancelledNotificationSchema>;\n\n/* Base Metadata */\nexport type BaseMetadata = Infer<typeof BaseMetadataSchema>;\n\n/* Initialization */\nexport type Implementation = Infer<typeof ImplementationSchema>;\nexport type ClientCapabilities = Infer<typeof ClientCapabilitiesSchema>;\nexport type InitializeRequest = Infer<typeof InitializeRequestSchema>;\nexport type ServerCapabilities = Infer<typeof ServerCapabilitiesSchema>;\nexport type InitializeResult = Infer<typeof InitializeResultSchema>;\nexport type InitializedNotification = Infer<\n  typeof InitializedNotificationSchema\n>;\n\n/* Ping */\nexport type PingRequest = Infer<typeof PingRequestSchema>;\n\n/* Progress notifications */\nexport type Progress = Infer<typeof ProgressSchema>;\nexport type ProgressNotification = Infer<typeof ProgressNotificationSchema>;\n\n/* Pagination */\nexport type PaginatedRequest = Infer<typeof PaginatedRequestSchema>;\nexport type PaginatedResult = Infer<typeof PaginatedResultSchema>;\n\n/* Resources */\nexport type ResourceContents = Infer<typeof ResourceContentsSchema>;\nexport type TextResourceContents = Infer<typeof TextResourceContentsSchema>;\nexport type BlobResourceContents = Infer<typeof BlobResourceContentsSchema>;\nexport type Resource = Infer<typeof ResourceSchema>;\nexport type ResourceTemplate = Infer<typeof ResourceTemplateSchema>;\nexport type ListResourcesRequest = Infer<typeof ListResourcesRequestSchema>;\nexport type ListResourcesResult = Infer<typeof ListResourcesResultSchema>;\nexport type ListResourceTemplatesRequest = Infer<\n  typeof ListResourceTemplatesRequestSchema\n>;\nexport type ListResourceTemplatesResult = Infer<\n  typeof ListResourceTemplatesResultSchema\n>;\nexport type ReadResourceRequest = Infer<typeof ReadResourceRequestSchema>;\nexport type ReadResourceResult = Infer<typeof ReadResourceResultSchema>;\nexport type ResourceListChangedNotification = Infer<\n  typeof ResourceListChangedNotificationSchema\n>;\nexport type SubscribeRequest = Infer<typeof SubscribeRequestSchema>;\nexport type UnsubscribeRequest = Infer<typeof UnsubscribeRequestSchema>;\nexport type ResourceUpdatedNotification = Infer<\n  typeof ResourceUpdatedNotificationSchema\n>;\n\n/* Prompts */\nexport type PromptArgument = Infer<typeof PromptArgumentSchema>;\nexport type Prompt = Infer<typeof PromptSchema>;\nexport type ListPromptsRequest = Infer<typeof ListPromptsRequestSchema>;\nexport type ListPromptsResult = Infer<typeof ListPromptsResultSchema>;\nexport type GetPromptRequest = Infer<typeof GetPromptRequestSchema>;\nexport type TextContent = Infer<typeof TextContentSchema>;\nexport type ImageContent = Infer<typeof ImageContentSchema>;\nexport type AudioContent = Infer<typeof AudioContentSchema>;\nexport type EmbeddedResource = Infer<typeof EmbeddedResourceSchema>;\nexport type ResourceLink = Infer<typeof ResourceLinkSchema>;\nexport type ContentBlock = Infer<typeof ContentBlockSchema>;\nexport type PromptMessage = Infer<typeof PromptMessageSchema>;\nexport type GetPromptResult = Infer<typeof GetPromptResultSchema>;\nexport type PromptListChangedNotification = Infer<\n  typeof PromptListChangedNotificationSchema\n>;\n\n/* Tools */\nexport type ToolAnnotations = Infer<typeof ToolAnnotationsSchema>;\nexport type Tool = Infer<typeof ToolSchema>;\nexport type ListToolsRequest = Infer<typeof ListToolsRequestSchema>;\nexport type ListToolsResult = Infer<typeof ListToolsResultSchema>;\nexport type CallToolResult = Infer<typeof CallToolResultSchema>;\nexport type CompatibilityCallToolResult = Infer<\n  typeof CompatibilityCallToolResultSchema\n>;\nexport type CallToolRequest = Infer<typeof CallToolRequestSchema>;\nexport type ToolListChangedNotification = Infer<\n  typeof ToolListChangedNotificationSchema\n>;\n\n/* Logging */\nexport type LoggingLevel = Infer<typeof LoggingLevelSchema>;\nexport type SetLevelRequest = Infer<typeof SetLevelRequestSchema>;\nexport type LoggingMessageNotification = Infer<\n  typeof LoggingMessageNotificationSchema\n>;\n\n/* Sampling */\nexport type SamplingMessage = Infer<typeof SamplingMessageSchema>;\nexport type CreateMessageRequest = Infer<typeof CreateMessageRequestSchema>;\nexport type CreateMessageResult = Infer<typeof CreateMessageResultSchema>;\n\n/* Elicitation */\nexport type BooleanSchema = Infer<typeof BooleanSchemaSchema>;\nexport type StringSchema = Infer<typeof StringSchemaSchema>;\nexport type NumberSchema = Infer<typeof NumberSchemaSchema>;\nexport type EnumSchema = Infer<typeof EnumSchemaSchema>;\nexport type PrimitiveSchemaDefinition = Infer<\n  typeof PrimitiveSchemaDefinitionSchema\n>;\nexport type ElicitRequest = Infer<typeof ElicitRequestSchema>;\nexport type ElicitResult = Infer<typeof ElicitResultSchema>;\n\n/* Autocomplete */\nexport type ResourceTemplateReference = Infer<\n  typeof ResourceTemplateReferenceSchema\n>;\n/**\n * @deprecated Use ResourceTemplateReference instead\n */\nexport type ResourceReference = ResourceTemplateReference;\nexport type PromptReference = Infer<typeof PromptReferenceSchema>;\nexport type CompleteRequest = Infer<typeof CompleteRequestSchema>;\nexport type CompleteResult = Infer<typeof CompleteResultSchema>;\n\n/* Roots */\nexport type Root = Infer<typeof RootSchema>;\nexport type ListRootsRequest = Infer<typeof ListRootsRequestSchema>;\nexport type ListRootsResult = Infer<typeof ListRootsResultSchema>;\nexport type RootsListChangedNotification = Infer<\n  typeof RootsListChangedNotificationSchema\n>;\n\n/* Client messages */\nexport type ClientRequest = Infer<typeof ClientRequestSchema>;\nexport type ClientNotification = Infer<typeof ClientNotificationSchema>;\nexport type ClientResult = Infer<typeof ClientResultSchema>;\n\n/* Server messages */\nexport type ServerRequest = Infer<typeof ServerRequestSchema>;\nexport type ServerNotification = Infer<typeof ServerNotificationSchema>;\nexport type ServerResult = Infer<typeof ServerResultSchema>;\n","import { z } from \"zod\";\n\nimport { INTERNAL_MIME_TYPES } from \"./internal_mime_types\";\nimport { NotificationSchema } from \"./raw_mcp_types\";\nimport type { CallToolResult, Notification } from \"./raw_mcp_types.ts\";\n\n// File generated by the tool during its execution.\n\nconst ToolGeneratedFileSchema = z.object({\n  text: z.string(),\n  uri: z.string(),\n  mimeType: z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.FILE),\n  fileId: z.string(),\n  title: z.string(),\n  contentType: z.string(),\n  snippet: z.string().nullable(),\n});\n\nexport type ToolGeneratedFileType = z.infer<typeof ToolGeneratedFileSchema>;\n\nexport function isToolGeneratedFile(\n  outputBlock: CallToolResult[\"content\"][number]\n): outputBlock is { type: \"resource\"; resource: ToolGeneratedFileType } {\n  return (\n    outputBlock.type === \"resource\" &&\n    ToolGeneratedFileSchema.safeParse(outputBlock.resource).success\n  );\n}\n\n// Thinking tokens generated during the tool execution.\n\nconst ThinkingOutputSchema = z.object({\n  mimeType: z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.THINKING),\n  text: z.string(),\n  uri: z.literal(\"\"),\n});\n\nexport type ThinkingOutputType = z.infer<typeof ThinkingOutputSchema>;\n\nexport function isThinkingOutput(\n  outputBlock: CallToolResult[\"content\"][number]\n): outputBlock is { type: \"resource\"; resource: ThinkingOutputType } {\n  return (\n    outputBlock.type === \"resource\" &&\n    ThinkingOutputSchema.safeParse(outputBlock.resource).success\n  );\n}\n\n// Final output of the reasoning when successful with the non-CoT tokens.\n\nexport const ReasoningSuccessOutputSchema = z.object({\n  mimeType: z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.REASONING_SUCCESS),\n  text: z.string(),\n  uri: z.literal(\"\"),\n});\n\nexport type ReasoningSuccessOutputType = z.infer<\n  typeof ReasoningSuccessOutputSchema\n>;\n\nexport function isReasoningSuccessOutput(\n  outputBlock: CallToolResult[\"content\"][number]\n): outputBlock is { type: \"resource\"; resource: ReasoningSuccessOutputType } {\n  return (\n    outputBlock.type === \"resource\" &&\n    ReasoningSuccessOutputSchema.safeParse(outputBlock.resource).success\n  );\n}\n\n// SQL query generated during the tool execution.\n\nconst SqlQueryOutputSchema = z.object({\n  mimeType: z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.SQL_QUERY),\n  text: z.string(),\n  uri: z.literal(\"\"),\n});\n\nexport type SqlQueryOutputType = z.infer<typeof SqlQueryOutputSchema>;\n\nexport function isSqlQueryOutput(\n  outputBlock: CallToolResult[\"content\"][number]\n): outputBlock is { type: \"resource\"; resource: SqlQueryOutputType } {\n  return (\n    outputBlock.type === \"resource\" &&\n    SqlQueryOutputSchema.safeParse(outputBlock.resource).success\n  );\n}\n\n// Resource with a name.\n\ntype ResourceWithName = {\n  name: string;\n};\n\nexport const isResourceWithName = (\n  resource: object\n): resource is ResourceWithName => {\n  return \"name\" in resource && typeof resource.name === \"string\";\n};\n\nexport const DatabaseSchemaResourceSchema = z.object({\n  mimeType: z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.DATABASE_SCHEMA),\n  text: z.string(),\n  uri: z.string(),\n});\n\nexport type DatabaseSchemaResourceType = z.infer<\n  typeof DatabaseSchemaResourceSchema\n>;\n\nexport const isDatabaseSchemaResourceType = (\n  outputBlock: CallToolResult[\"content\"][number]\n): outputBlock is {\n  type: \"resource\";\n  resource: DatabaseSchemaResourceType;\n} => {\n  return (\n    outputBlock.type === \"resource\" &&\n    DatabaseSchemaResourceSchema.safeParse(outputBlock.resource).success\n  );\n};\n\nexport const QueryWritingInstructionsResourceSchema = z.object({\n  mimeType: z.literal(\n    INTERNAL_MIME_TYPES.TOOL_OUTPUT.QUERY_WRITING_INSTRUCTIONS\n  ),\n  text: z.string(),\n  uri: z.string(),\n});\n\nexport type QueryWritingInstructionsResourceType = z.infer<\n  typeof QueryWritingInstructionsResourceSchema\n>;\n\nexport const isQueryWritingInstructionsResourceType = (\n  outputBlock: CallToolResult[\"content\"][number]\n): outputBlock is {\n  type: \"resource\";\n  resource: QueryWritingInstructionsResourceType;\n} => {\n  return (\n    outputBlock.type === \"resource\" &&\n    QueryWritingInstructionsResourceSchema.safeParse(outputBlock.resource)\n      .success\n  );\n};\n\nexport const ExampleRowsResourceSchema = z.object({\n  mimeType: z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.EXAMPLE_ROWS),\n  text: z.string(),\n  uri: z.string(),\n});\n\nexport type ExampleRowsResourceType = z.infer<typeof ExampleRowsResourceSchema>;\n\nexport const isExampleRowsResourceType = (\n  outputBlock: CallToolResult[\"content\"][number]\n): outputBlock is { type: \"resource\"; resource: ExampleRowsResourceType } => {\n  return (\n    outputBlock.type === \"resource\" &&\n    ExampleRowsResourceSchema.safeParse(outputBlock.resource).success\n  );\n};\n\n// Data source search outputs: query and results.\n\nexport const SearchQueryResourceSchema = z.object({\n  mimeType: z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.DATA_SOURCE_SEARCH_QUERY),\n  text: z.string(),\n  uri: z.literal(\"\"),\n});\n\nexport type SearchQueryResourceType = z.infer<typeof SearchQueryResourceSchema>;\n\nexport const isSearchQueryResourceType = (\n  outputBlock: CallToolResult[\"content\"][number]\n): outputBlock is { type: \"resource\"; resource: SearchQueryResourceType } => {\n  return (\n    outputBlock.type === \"resource\" &&\n    SearchQueryResourceSchema.safeParse(outputBlock.resource).success\n  );\n};\n\nexport const SearchResultResourceSchema = z.object({\n  mimeType: z.literal(\n    INTERNAL_MIME_TYPES.TOOL_OUTPUT.DATA_SOURCE_SEARCH_RESULT\n  ),\n  uri: z.string(),\n  text: z.string(),\n\n  // Document metadata\n  id: z.string(),\n  tags: z.array(z.string()),\n  ref: z.string(),\n  chunks: z.array(z.string()),\n  source: z.object({\n    provider: z.string().optional(),\n  }),\n});\n\nexport type SearchResultResourceType = z.infer<\n  typeof SearchResultResourceSchema\n>;\n\nexport const isSearchResultResourceType = (\n  outputBlock: CallToolResult[\"content\"][number]\n): outputBlock is { type: \"resource\"; resource: SearchResultResourceType } => {\n  return (\n    outputBlock.type === \"resource\" &&\n    SearchResultResourceSchema.safeParse(outputBlock.resource).success\n  );\n};\n\n// Data source inclusion outputs, query and results\nexport const IncludeQueryResourceSchema = z.object({\n  mimeType: z.literal(\n    INTERNAL_MIME_TYPES.TOOL_OUTPUT.DATA_SOURCE_INCLUDE_QUERY\n  ),\n  text: z.string(),\n  uri: z.literal(\"\"),\n});\n\nexport type IncludeQueryResourceType = z.infer<\n  typeof IncludeQueryResourceSchema\n>;\n\nexport const isIncludeQueryResourceType = (\n  outputBlock: CallToolResult[\"content\"][number]\n): outputBlock is { type: \"resource\"; resource: IncludeQueryResourceType } => {\n  return (\n    outputBlock.type === \"resource\" &&\n    IncludeQueryResourceSchema.safeParse(outputBlock.resource).success\n  );\n};\n\nexport const WarningResourceSchema = z.object({\n  mimeType: z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.WARNING),\n  warningTitle: z.string(),\n  text: z.string(),\n  warningData: z.record(z.string(), z.unknown()).optional(),\n  uri: z.literal(\"\"),\n});\n\nexport type WarningResourceType = z.infer<typeof WarningResourceSchema>;\n\nexport const isWarningResourceType = (\n  outputBlock: CallToolResult[\"content\"][number]\n): outputBlock is {\n  type: \"resource\";\n  resource: WarningResourceType;\n} => {\n  return (\n    outputBlock.type === \"resource\" &&\n    WarningResourceSchema.safeParse(outputBlock.resource).success\n  );\n};\n\nexport const IncludeResultResourceSchema = z.object({\n  mimeType: z.literal(\n    INTERNAL_MIME_TYPES.TOOL_OUTPUT.DATA_SOURCE_INCLUDE_RESULT\n  ),\n  uri: z.string(),\n  text: z.string(),\n\n  // Document metadata\n  id: z.string(),\n  tags: z.array(z.string()),\n  ref: z.string(),\n  chunks: z.array(z.string()),\n  source: z.object({\n    name: z.string(),\n    provider: z.string().optional(),\n  }),\n});\n\nexport type IncludeResultResourceType = z.infer<\n  typeof IncludeResultResourceSchema\n>;\n\nexport const isIncludeResultResourceType = (\n  outputBlock: CallToolResult[\"content\"][number]\n): outputBlock is { type: \"resource\"; resource: IncludeResultResourceType } => {\n  return (\n    outputBlock.type === \"resource\" &&\n    IncludeResultResourceSchema.safeParse(outputBlock.resource).success\n  );\n};\n\n// Websearch results.\n\nexport const WebsearchQueryResourceSchema = z.object({\n  mimeType: z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.WEBSEARCH_QUERY),\n  text: z.string(),\n  uri: z.literal(\"\"),\n});\n\nexport type WebsearchQueryResourceType = z.infer<\n  typeof WebsearchQueryResourceSchema\n>;\n\nexport const isWebsearchQueryResourceType = (\n  outputBlock: CallToolResult[\"content\"][number]\n): outputBlock is {\n  type: \"resource\";\n  resource: WebsearchQueryResourceType;\n} => {\n  return (\n    outputBlock.type === \"resource\" &&\n    WebsearchQueryResourceSchema.safeParse(outputBlock.resource).success\n  );\n};\n\nexport const WebsearchResultResourceSchema = z.object({\n  mimeType: z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.WEBSEARCH_RESULT),\n  title: z.string(),\n  text: z.string(),\n  uri: z.string(),\n  reference: z.string(),\n});\n\nexport type WebsearchResultResourceType = z.infer<\n  typeof WebsearchResultResourceSchema\n>;\n\nexport const isWebsearchResultResourceType = (\n  outputBlock: CallToolResult[\"content\"][number]\n): outputBlock is {\n  type: \"resource\";\n  resource: WebsearchResultResourceType;\n} => {\n  return (\n    outputBlock.type === \"resource\" &&\n    WebsearchResultResourceSchema.safeParse(outputBlock.resource).success\n  );\n};\n\n// Browse results.\n\nexport const BrowseResultResourceSchema = z.object({\n  mimeType: z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.BROWSE_RESULT),\n  requestedUrl: z.string(),\n  uri: z.string(), // Browsed url, might differ from the requested url\n  text: z.string(),\n  title: z.string().optional(),\n  description: z.string().optional(),\n  responseCode: z.string(),\n  errorMessage: z.string().optional(),\n});\n\nexport type BrowseResultResourceType = z.infer<\n  typeof BrowseResultResourceSchema\n>;\n\nexport const isBrowseResultResourceType = (\n  outputBlock: CallToolResult[\"content\"][number]\n): outputBlock is {\n  type: \"resource\";\n  resource: BrowseResultResourceType;\n} => {\n  return (\n    outputBlock.type === \"resource\" &&\n    BrowseResultResourceSchema.safeParse(outputBlock.resource).success\n  );\n};\n\n// RunAgent results.\n\nexport const RunAgentQueryResourceSchema = z.object({\n  mimeType: z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.RUN_AGENT_QUERY),\n  text: z.string(),\n  childAgentId: z.string(),\n  uri: z.literal(\"\"),\n});\n\nexport type RunAgentQueryResourceType = z.infer<\n  typeof RunAgentQueryResourceSchema\n>;\n\nexport const isRunAgentQueryResourceType = (\n  outputBlock: CallToolResult[\"content\"][number]\n): outputBlock is {\n  type: \"resource\";\n  resource: RunAgentQueryResourceType;\n} => {\n  return (\n    outputBlock.type === \"resource\" &&\n    RunAgentQueryResourceSchema.safeParse(outputBlock.resource).success\n  );\n};\n\nexport const RunAgentResultResourceSchema = z.object({\n  mimeType: z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.RUN_AGENT_RESULT),\n  conversationId: z.string(),\n  text: z.string(),\n  uri: z.string(),\n  refs: z\n    .record(\n      z.string(),\n      z.object({\n        description: z.string().optional(),\n        href: z.string().optional(),\n        title: z.string(),\n        provider: z.string(),\n      })\n    )\n    .optional(),\n});\n\nexport type RunAgentResultResourceType = z.infer<\n  typeof RunAgentResultResourceSchema\n>;\n\nexport const isRunAgentResultResourceType = (\n  outputBlock: CallToolResult[\"content\"][number]\n): outputBlock is {\n  type: \"resource\";\n  resource: RunAgentResultResourceType;\n} => {\n  return (\n    outputBlock.type === \"resource\" &&\n    RunAgentResultResourceSchema.safeParse(outputBlock.resource).success\n  );\n};\n\n// Toolsets results.\n\nexport const ToolsetsResultResourceSchema = z.object({\n  mimeType: z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.TOOLSET_LIST_RESULT),\n  text: z.string(),\n  uri: z.literal(\"\"),\n  id: z.string(),\n  description: z.string(),\n});\n\nexport type ToolsetsResultResourceType = z.infer<\n  typeof ToolsetsResultResourceSchema\n>;\n\nexport const isToolsetsResultResourceType = (\n  outputBlock: CallToolResult[\"content\"][number]\n): outputBlock is {\n  type: \"resource\";\n  resource: ToolsetsResultResourceType;\n} => {\n  return (\n    outputBlock.type === \"resource\" &&\n    ToolsetsResultResourceSchema.safeParse(outputBlock.resource).success\n  );\n};\n\n// Extract data outputs: query and results.\n\nexport const ExtractQueryResourceSchema = z.object({\n  mimeType: z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.EXTRACT_QUERY),\n  text: z.string(),\n  uri: z.literal(\"\"),\n});\n\nexport type ExtractQueryResourceType = z.infer<\n  typeof ExtractQueryResourceSchema\n>;\n\nexport const isExtractQueryResourceType = (\n  outputBlock: CallToolResult[\"content\"][number]\n): outputBlock is { type: \"resource\"; resource: ExtractQueryResourceType } => {\n  return (\n    outputBlock.type === \"resource\" &&\n    ExtractQueryResourceSchema.safeParse(outputBlock.resource).success\n  );\n};\n\nexport const ExtractResultResourceSchema = z.object({\n  mimeType: z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.EXTRACT_RESULT),\n  uri: z.string(),\n  text: z.string(),\n\n  // File metadata\n  fileId: z.string(),\n  title: z.string(),\n  contentType: z.string(),\n  snippet: z.string().nullable(),\n});\n\nexport type ExtractResultResourceType = z.infer<\n  typeof ExtractResultResourceSchema\n>;\n\nexport const isExtractResultResourceType = (\n  outputBlock: CallToolResult[\"content\"][number]\n): outputBlock is { type: \"resource\"; resource: ExtractResultResourceType } => {\n  return (\n    outputBlock.type === \"resource\" &&\n    ExtractResultResourceSchema.safeParse(outputBlock.resource).success\n  );\n};\n\n/**\n * Notification output types.\n */\n\n// Image.\n\nconst NotificationImageContentSchema = z.object({\n  type: z.literal(\"image\"),\n  mimeType: z.string(),\n});\n\ntype ImageProgressOutput = z.infer<typeof NotificationImageContentSchema>;\n\nexport function isImageProgressOutput(\n  output: ProgressNotificationOutput\n): output is ImageProgressOutput {\n  return output !== undefined && output.type === \"image\";\n}\n\n// Canvas file.\n\nexport const NotificationCanvasFileContentSchema = z.object({\n  type: z.literal(\"canvas_file\"),\n  fileId: z.string(),\n  mimeType: z.string(),\n  title: z.string(),\n  updatedAt: z.string(),\n});\n\ntype CanvasFileContentOutput = z.infer<\n  typeof NotificationCanvasFileContentSchema\n>;\n\nexport function isCanvasFileContentOutput(\n  output: ProgressNotificationOutput\n): output is CanvasFileContentOutput {\n  return output !== undefined && output.type === \"canvas_file\";\n}\n\nconst NotificationTextContentSchema = z.object({\n  type: z.literal(\"text\"),\n  text: z.string(),\n});\n\nconst NotificationRunAgentContentSchema = z.object({\n  type: z.literal(\"run_agent\"),\n  childAgentId: z.string(),\n  conversationId: z.string(),\n  query: z.string(),\n});\n\nexport const ProgressNotificationOutputSchema = z\n  .union([\n    NotificationImageContentSchema,\n    NotificationCanvasFileContentSchema,\n    NotificationRunAgentContentSchema,\n    NotificationTextContentSchema,\n  ])\n  .optional();\n\ntype ProgressNotificationOutput = z.infer<\n  typeof ProgressNotificationOutputSchema\n>;\n\nexport const ProgressNotificationContentSchema = z.object({\n  // Required for the MCP protocol.\n  progress: z.number(),\n  total: z.number(),\n  progressToken: z.union([z.string(), z.number()]),\n  // Custom data.\n  data: z.object({\n    label: z.string(),\n    output: ProgressNotificationOutputSchema,\n  }),\n});\n\nexport type ProgressNotificationContentType = z.infer<\n  typeof ProgressNotificationContentSchema\n>;\n\nexport const MCPProgressNotificationSchema = NotificationSchema.extend({\n  method: z.literal(\"notifications/progress\"),\n  params: ProgressNotificationContentSchema,\n});\n\nexport type MCPProgressNotificationType = z.infer<\n  typeof MCPProgressNotificationSchema\n>;\n\nexport function isMCPProgressNotificationType(\n  notification: Notification\n): notification is MCPProgressNotificationType {\n  return MCPProgressNotificationSchema.safeParse(notification).success;\n}\n","import moment from \"moment-timezone\";\nimport { z } from \"zod\";\n\nimport { INTERNAL_MIME_TYPES_VALUES } from \"./internal_mime_types\";\nimport {\n  MCPExternalActionIconSchema,\n  MCPInternalActionIconSchema,\n} from \"./mcp_icon_types\";\nimport { NotificationCanvasFileContentSchema } from \"./output_schemas\";\nimport { CallToolResultSchema } from \"./raw_mcp_types\";\n\ntype StringLiteral<T> = T extends string\n  ? string extends T\n    ? never\n    : T\n  : never;\n\n// Custom schema to get a string literal type and yet allow any string when parsing\nconst FlexibleEnumSchema = <T extends string>() =>\n  z.custom<StringLiteral<T>>((val) => {\n    return typeof val === \"string\";\n  });\n\nconst ModelProviderIdSchema = FlexibleEnumSchema<\n  | \"openai\"\n  | \"anthropic\"\n  | \"mistral\"\n  | \"google_ai_studio\"\n  | \"togetherai\"\n  | \"deepseek\"\n  | \"fireworks\"\n  | \"xai\"\n>();\n\nconst ModelLLMIdSchema = FlexibleEnumSchema<\n  | \"gpt-3.5-turbo\"\n  | \"gpt-4-turbo\"\n  | \"gpt-4o-2024-08-06\"\n  | \"gpt-4o\"\n  | \"gpt-4o-mini\"\n  | \"gpt-4.1-2025-04-14\"\n  | \"gpt-4.1-mini-2025-04-14\"\n  | \"gpt-5\"\n  | \"o1\"\n  | \"o1-mini\"\n  | \"o3\"\n  | \"o3-mini\"\n  | \"o4-mini\"\n  | \"claude-4-opus-20250514\"\n  | \"claude-4-sonnet-20250514\"\n  | \"claude-3-opus-20240229\"\n  | \"claude-3-5-sonnet-20240620\"\n  | \"claude-3-5-sonnet-20241022\"\n  | \"claude-3-7-sonnet-20250219\"\n  | \"claude-3-5-haiku-20241022\"\n  | \"claude-3-haiku-20240307\"\n  | \"claude-2.1\"\n  | \"claude-instant-1.2\"\n  | \"mistral-large-latest\"\n  | \"mistral-medium\"\n  | \"mistral-small-latest\"\n  | \"codestral-latest\"\n  | \"gemini-1.5-pro-latest\"\n  | \"gemini-1.5-flash-latest\"\n  | \"gemini-2.0-flash\"\n  | \"gemini-2.0-flash-lite\"\n  | \"gemini-2.5-pro-preview-03-25\"\n  | \"gemini-2.5-pro\"\n  | \"gemini-2.0-flash-exp\" // DEPRECATED\n  | \"gemini-2.0-flash-lite-preview-02-05\" // DEPRECATED\n  | \"gemini-2.0-pro-exp-02-05\" // DEPRECATED\n  | \"gemini-2.0-flash-thinking-exp-01-21\" // DEPRECATED\n  | \"meta-llama/Llama-3.3-70B-Instruct-Turbo\" // togetherai\n  | \"Qwen/Qwen2.5-Coder-32B-Instruct\" // togetherai\n  | \"Qwen/QwQ-32B-Preview\" // togetherai\n  | \"Qwen/Qwen2-72B-Instruct\" // togetherai\n  | \"deepseek-ai/DeepSeek-V3\" // togetherai\n  | \"deepseek-ai/DeepSeek-R1\" // togetherai\n  | \"deepseek-chat\" // deepseek api\n  | \"deepseek-reasoner\" // deepseek api\n  | \"accounts/fireworks/models/deepseek-r1\" // fireworks\n  | \"accounts/fireworks/models/kimi-k2-instruct\" // fireworks\n  | \"grok-3-latest\" // xAI\n  | \"grok-3-mini-latest\" // xAI\n  | \"grok-3-fast-latest\" // xAI\n  | \"grok-3-mini-fast-latest\" // xAI\n>();\n\nconst EmbeddingProviderIdSchema = FlexibleEnumSchema<\"openai\" | \"mistral\">();\n\nconst ConnectorsAPIErrorTypeSchema = FlexibleEnumSchema<\n  | \"authorization_error\"\n  | \"not_found\"\n  | \"internal_server_error\"\n  | \"unexpected_error_format\"\n  | \"unexpected_response_format\"\n  | \"unexpected_network_error\"\n  | \"unknown_connector_provider\"\n  | \"invalid_request_error\"\n  | \"connector_authorization_error\"\n  | \"connector_not_found\"\n  | \"connector_configuration_not_found\"\n  | \"connector_update_error\"\n  | \"connector_update_unauthorized\"\n  | \"connector_oauth_target_mismatch\"\n  | \"connector_oauth_error\"\n  | \"slack_channel_not_found\"\n  | \"connector_rate_limit_error\"\n  | \"slack_configuration_not_found\"\n  | \"google_drive_webhook_not_found\"\n>();\n\nconst ConnectorsAPIErrorSchema = z.object({\n  type: ConnectorsAPIErrorTypeSchema,\n  message: z.string(),\n});\n\nexport type ConnectorsAPIError = z.infer<typeof ConnectorsAPIErrorSchema>;\n\nconst ModelIdSchema = z.number();\n\nexport type ConnectorsAPIErrorType = z.infer<\n  typeof ConnectorsAPIErrorTypeSchema\n>;\n\nexport function isConnectorsAPIError(obj: unknown): obj is ConnectorsAPIError {\n  return (\n    typeof obj === \"object\" &&\n    obj !== null &&\n    \"message\" in obj &&\n    typeof obj.message === \"string\" &&\n    \"type\" in obj &&\n    typeof obj.type === \"string\" &&\n    ConnectorsAPIErrorSchema.safeParse(obj).success\n  );\n}\n\n// Supported content types that are plain text and can be sent as file-less content fragment.\nexport const supportedOtherFileFormats = {\n  \"application/msword\": [\".doc\", \".docx\"],\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\": [\n    \".doc\",\n    \".docx\",\n  ],\n  \"application/vnd.ms-powerpoint\": [\".ppt\", \".pptx\"],\n  \"application/vnd.openxmlformats-officedocument.presentationml.presentation\": [\n    \".ppt\",\n    \".pptx\",\n  ],\n  \"application/vnd.google-apps.document\": [],\n  \"application/vnd.google-apps.presentation\": [],\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\": [\n    \".xlsx\",\n  ],\n  \"application/vnd.google-apps.spreadsheet\": [],\n  \"application/vnd.ms-excel\": [\".xls\"],\n  \"application/pdf\": [\".pdf\"],\n  \"application/vnd.dust.section.json\": [\".json\"],\n  \"text/comma-separated-values\": [\".csv\"],\n  \"text/csv\": [\".csv\"],\n  \"text/markdown\": [\".md\", \".markdown\"],\n  \"text/plain\": [\".txt\", \".log\", \".cfg\", \".conf\"],\n  \"text/tab-separated-values\": [\".tsv\"],\n  \"text/tsv\": [\".tsv\"],\n  \"text/vnd.dust.attachment.slack.thread\": [\".txt\"],\n  \"text/html\": [\".html\", \".htm\", \".xhtml\", \".xhtml+xml\"],\n  \"text/xml\": [\".xml\"],\n  \"text/calendar\": [\".ics\"],\n  \"text/css\": [\".css\"],\n  \"text/javascript\": [\".js\", \".mjs\", \".jsx\"],\n  \"text/typescript\": [\".ts\", \".tsx\"],\n  \"application/json\": [\".json\"],\n  \"application/xml\": [\".xml\"],\n  \"application/x-sh\": [\".sh\"],\n  \"text/x-sh\": [\".sh\"],\n  \"text/x-python\": [\".py\"],\n  \"text/x-python-script\": [\".py\"],\n  \"application/x-yaml\": [\".yaml\", \".yml\"],\n  \"text/yaml\": [\".yaml\", \".yml\"],\n  \"text/vnd.yaml\": [\".yaml\", \".yml\"],\n  \"text/x-c\": [\".c\", \".cc\", \".cpp\", \".cxx\", \".dic\", \".h\", \".hh\"],\n  \"text/x-csharp\": [\".cs\"],\n  \"text/x-java-source\": [\".java\"],\n  \"text/x-php\": [\".php\"],\n  \"text/x-ruby\": [\".rb\"],\n  \"text/x-sql\": [\".sql\"],\n  \"text/x-swift\": [\".swift\"],\n  \"text/x-rust\": [\".rs\"],\n  \"text/x-go\": [\".go\"],\n  \"text/x-kotlin\": [\".kt\", \".kts\"],\n  \"text/x-scala\": [\".scala\"],\n  \"text/x-groovy\": [\".groovy\"],\n  \"text/x-perl\": [\".pl\", \".pm\"],\n  \"text/x-perl-script\": [\".pl\", \".pm\"],\n  \"application/octet-stream\": [],\n} as const;\n\n// Supported content types for images.\nexport const supportedImageFileFormats = {\n  \"image/jpeg\": [\".jpg\", \".jpeg\"],\n  \"image/png\": [\".png\"],\n  \"image/gif\": [\".gif\"],\n  \"image/webp\": [\".webp\"],\n} as const;\n\ntype OtherContentType = keyof typeof supportedOtherFileFormats;\ntype ImageContentType = keyof typeof supportedImageFileFormats;\n\nconst supportedOtherContentTypes = Object.keys(\n  supportedOtherFileFormats\n) as OtherContentType[];\nconst supportedImageContentTypes = Object.keys(\n  supportedImageFileFormats\n) as ImageContentType[];\n\nexport const supportedFileExtensions = [\n  ...Object.keys(supportedOtherFileFormats),\n  ...Object.keys(supportedImageFileFormats),\n];\n\nexport type SupportedFileContentType = OtherContentType | ImageContentType;\nconst supportedUploadableContentType = [\n  ...supportedOtherContentTypes,\n  ...supportedImageContentTypes,\n] as SupportedFileContentType[];\n\nconst SupportedContentFragmentTypeSchema = FlexibleEnumSchema<\n  | keyof typeof supportedOtherFileFormats\n  | keyof typeof supportedImageFileFormats\n  | (typeof INTERNAL_MIME_TYPES_VALUES)[number]\n  // Legacy content types still retuned by the API when rendering old messages.\n  | \"dust-application/slack\"\n>();\n\nconst SupportedFileContentFragmentTypeSchema = FlexibleEnumSchema<\n  | keyof typeof supportedOtherFileFormats\n  | keyof typeof supportedImageFileFormats\n>();\n\nexport function isSupportedFileContentType(\n  contentType: string\n): contentType is SupportedFileContentType {\n  return supportedUploadableContentType.includes(\n    contentType as SupportedFileContentType\n  );\n}\n\nexport function isSupportedPlainTextContentType(\n  contentType: string\n): contentType is OtherContentType {\n  return supportedOtherContentTypes.includes(contentType as OtherContentType);\n}\n\nexport function isSupportedImageContentType(\n  contentType: string\n): contentType is ImageContentType {\n  return supportedImageContentTypes.includes(contentType as ImageContentType);\n}\n\nconst UserMessageOriginSchema = FlexibleEnumSchema<\n  | \"api\"\n  | \"email\"\n  | \"extension\"\n  | \"github-copilot-chat\"\n  | \"gsheet\"\n  | \"make\"\n  | \"n8n\"\n  | \"raycast\"\n  | \"slack\"\n  | \"web\"\n  | \"zapier\"\n  | \"zendesk\"\n  | \"run_agent\"\n>()\n  .or(z.null())\n  .or(z.undefined());\n\nconst VisibilitySchema = FlexibleEnumSchema<\"visible\" | \"deleted\">();\n\nconst RankSchema = z.object({\n  rank: z.number(),\n});\n\nexport class Ok<T> {\n  constructor(public value: T) {}\n\n  isOk(): this is Ok<T> {\n    return true;\n  }\n\n  isErr(): this is Err<never> {\n    return false;\n  }\n}\n\nexport class Err<E> {\n  constructor(public error: E) {}\n\n  isOk(): this is Ok<never> {\n    return false;\n  }\n\n  isErr(): this is Err<E> {\n    return true;\n  }\n}\n\nexport type Result<T, E> = Ok<T> | Err<E>;\n\n// Custom codec to validate the timezone\nconst Timezone = z.string().refine((s) => moment.tz.names().includes(s), {\n  message: \"Invalid timezone\",\n});\n\nconst ConnectorProvidersSchema = FlexibleEnumSchema<\n  | \"confluence\"\n  | \"github\"\n  | \"google_drive\"\n  | \"intercom\"\n  | \"notion\"\n  | \"slack\"\n  | \"slack_bot\"\n  | \"microsoft\"\n  | \"webcrawler\"\n  | \"snowflake\"\n  | \"zendesk\"\n  | \"bigquery\"\n  | \"salesforce\"\n  | \"gong\"\n>();\nexport type ConnectorProvider = z.infer<typeof ConnectorProvidersSchema>;\n\nexport const isConnectorProvider = (\n  provider: string\n): provider is ConnectorProvider =>\n  ConnectorProvidersSchema.safeParse(provider).success;\n\nconst EditedByUserSchema = z.object({\n  editedAt: z.number().nullable(),\n  fullName: z.string().nullable(),\n  imageUrl: z.string().nullable(),\n  email: z.string().nullable(),\n  userId: z.string().nullable(),\n});\n\nconst DataSourceTypeSchema = z.object({\n  id: ModelIdSchema,\n  sId: z.string(),\n  createdAt: z.number(),\n  name: z.string(),\n  description: z.string().nullable(),\n  assistantDefaultSelected: z.boolean(),\n  dustAPIProjectId: z.string(),\n  dustAPIDataSourceId: z.string(),\n  connectorId: z.string().nullable(),\n  connectorProvider: ConnectorProvidersSchema.nullable(),\n  editedByUser: EditedByUserSchema.nullable().optional(),\n});\n\nexport type DataSourceType = z.infer<typeof DataSourceTypeSchema>;\n\nexport function isFolder(\n  ds: DataSourceType\n): ds is DataSourceType & { connectorProvider: null } {\n  // If there is no connectorProvider, it's a folder.\n  return !ds.connectorProvider;\n}\n\nexport function isWebsite(\n  ds: DataSourceType\n): ds is DataSourceType & { connectorProvider: \"webcrawler\" } {\n  return ds.connectorProvider === \"webcrawler\";\n}\n\nconst CoreAPIDocumentChunkSchema = z.object({\n  text: z.string(),\n  hash: z.string(),\n  offset: z.number(),\n  vector: z.array(z.number()).nullable().optional(),\n  score: z.number().nullable().optional(),\n});\n\nconst CoreAPIDocumentSchema = z.object({\n  data_source_id: z.string(),\n  created: z.number(),\n  document_id: z.string(),\n  timestamp: z.number(),\n  parent_id: z.string().nullable().optional(),\n  tags: z.array(z.string()),\n  source_url: z.string().nullable().optional(),\n  hash: z.string(),\n  text_size: z.number(),\n  chunk_count: z.number(),\n  chunks: z.array(CoreAPIDocumentChunkSchema),\n  text: z.string().nullable().optional(),\n});\n\nconst CoreAPILightDocumentSchema = z.object({\n  hash: z.string(),\n  text_size: z.number(),\n  chunk_count: z.number(),\n  token_count: z.number(),\n  created: z.number(),\n});\n\nconst CoreAPIRowValueSchema = z.union([\n  z.number(),\n  z.string(),\n  z.boolean(),\n  z.object({\n    type: z.literal(\"datetime\"),\n    epoch: z.number(),\n    string_value: z.string().optional(),\n  }),\n  z.null(),\n]);\n\nconst CoreAPIRowSchema = z.object({\n  row_id: z.string(),\n  value: z.record(CoreAPIRowValueSchema),\n});\n\nexport type CoreAPIRowType = z.infer<typeof CoreAPIRowSchema>;\n\nconst CoreAPITableSchema = z.array(\n  z.object({\n    name: z.string(),\n    value_type: z.enum([\"int\", \"float\", \"text\", \"bool\", \"datetime\"]),\n    possible_values: z.array(z.string()).nullable().optional(),\n  })\n);\n\nconst CoreAPITablePublicSchema = z.object({\n  table_id: z.string(),\n  name: z.string(),\n  description: z.string(),\n  schema: CoreAPITableSchema.nullable(),\n  timestamp: z.number(),\n  tags: z.array(z.string()),\n  parents: z.array(z.string()),\n  parent_id: z.string().nullable().optional(),\n  mime_type: z.string().optional(),\n  title: z.string().optional(),\n});\n\nexport type CoreAPITablePublic = z.infer<typeof CoreAPITablePublicSchema>;\n\nexport interface LoggerInterface {\n  error: (args: Record<string, unknown>, message: string) => void;\n  info: (args: Record<string, unknown>, message: string) => void;\n  trace: (args: Record<string, unknown>, message: string) => void;\n  warn: (args: Record<string, unknown>, message: string) => void;\n}\n\nconst DataSourceViewCategoriesSchema = FlexibleEnumSchema<\n  \"managed\" | \"folder\" | \"website\" | \"apps\" | \"actions\"\n>();\n\nconst BlockTypeSchema = FlexibleEnumSchema<\n  | \"input\"\n  | \"data\"\n  | \"data_source\"\n  | \"code\"\n  | \"llm\"\n  | \"chat\"\n  | \"map\"\n  | \"reduce\"\n  | \"while\"\n  | \"end\"\n  | \"search\"\n  | \"curl\"\n  | \"browser\"\n  | \"database_schema\"\n  | \"database\"\n>();\n\nconst StatusSchema = z.enum([\"running\", \"succeeded\", \"errored\"]);\n\nconst BlockRunConfigSchema = z.record(z.any());\n\nconst BlockStatusSchema = z.object({\n  block_type: BlockTypeSchema,\n  name: z.string(),\n  status: StatusSchema,\n  success_count: z.number(),\n  error_count: z.number(),\n});\n\nconst RunConfigSchema = z.object({\n  blocks: BlockRunConfigSchema,\n});\n\nconst TraceTypeSchema = z.object({\n  value: z.unknown().nullable(),\n  error: z.string().nullable(),\n  meta: z.unknown().nullable(),\n});\n\nconst RunStatusSchema = z.object({\n  run: StatusSchema,\n  blocks: z.array(BlockStatusSchema),\n});\n\nconst RunTypeSchema = z.object({\n  run_id: z.string(),\n  created: z.number(),\n  run_type: z.enum([\"deploy\", \"local\", \"execute\"]),\n  app_hash: z.string().nullable().optional(),\n  specification_hash: z.string().nullable().optional(),\n  config: RunConfigSchema,\n  status: RunStatusSchema,\n  traces: z.array(\n    z.tuple([\n      z.tuple([BlockTypeSchema, z.string()]),\n      z.array(z.array(TraceTypeSchema)),\n    ])\n  ),\n  results: z\n    .array(\n      z.array(\n        z.object({\n          value: z.unknown().nullable().optional(),\n          error: z.string().nullable().optional(),\n        })\n      )\n    )\n    .nullable()\n    .optional(),\n});\n\nconst TokensClassificationSchema = FlexibleEnumSchema<\n  \"tokens\" | \"chain_of_thought\"\n>();\n\nexport const GenerationTokensEventSchema = z.object({\n  type: z.literal(\"generation_tokens\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  text: z.string(),\n  classification: z.union([\n    TokensClassificationSchema,\n    z.enum([\"opening_delimiter\", \"closing_delimiter\"]),\n  ]),\n  delimiterClassification: TokensClassificationSchema.nullable().optional(),\n});\nexport type GenerationTokensEvent = z.infer<typeof GenerationTokensEventSchema>;\n\nconst DataSourceViewKindSchema = FlexibleEnumSchema<\"default\" | \"custom\">();\n\nconst DataSourceViewSchema = z.object({\n  category: DataSourceViewCategoriesSchema,\n  createdAt: z.number(),\n  dataSource: DataSourceTypeSchema,\n  editedByUser: EditedByUserSchema.nullable().optional(),\n  id: ModelIdSchema,\n  kind: DataSourceViewKindSchema,\n  parentsIn: z.array(z.string()).nullable(),\n  sId: z.string(),\n  updatedAt: z.number(),\n  spaceId: z.string(),\n});\nexport type DataSourceViewType = z.infer<typeof DataSourceViewSchema>;\n\nconst RetrievalDocumentChunkTypeSchema = z.object({\n  offset: z.number(),\n  score: z.number().nullable(),\n  text: z.string(),\n});\n\nexport const RetrievalDocumentTypeSchema = z.object({\n  chunks: z.array(RetrievalDocumentChunkTypeSchema),\n  documentId: z.string(),\n  dataSourceView: DataSourceViewSchema.nullable(),\n  id: ModelIdSchema,\n  reference: z.string(),\n  score: z.number().nullable(),\n  sourceUrl: z.string().nullable(),\n  tags: z.array(z.string()),\n  timestamp: z.number(),\n});\n\nexport type RetrievalDocumentPublicType = z.infer<\n  typeof RetrievalDocumentTypeSchema\n>;\n\nconst WhitelistableFeaturesSchema = FlexibleEnumSchema<\n  | \"advanced_notion_management\"\n  | \"advanced_search\"\n  | \"agent_builder_instructions_autocomplete\"\n  | \"agent_builder_v2\"\n  | \"agent_management_tool\"\n  | \"agent_to_yaml\"\n  | \"anthropic_vertex_fallback\"\n  | \"claude_4_opus_feature\"\n  | \"co_edition\"\n  | \"data_warehouses_tool\"\n  | \"deepseek_feature\"\n  | \"deepseek_r1_global_agent_feature\"\n  | \"dev_mcp_actions\"\n  | \"disable_run_logs\"\n  | \"disallow_agent_creation_to_users\"\n  | \"exploded_tables_query\"\n  | \"freshservice_tool\"\n  | \"google_ai_studio_experimental_models_feature\"\n  | \"google_sheets_tool\"\n  | \"hootl\"\n  | \"index_private_slack_channel\"\n  | \"interactive_content_server\"\n  | \"jira_tool\"\n  | \"labs_mcp_actions_dashboard\"\n  | \"labs_trackers\"\n  | \"labs_transcripts\"\n  | \"monday_tool\"\n  | \"notion_private_integration\"\n  | \"openai_o1_custom_assistants_feature\"\n  | \"openai_o1_feature\"\n  | \"openai_o1_high_reasoning_custom_assistants_feature\"\n  | \"openai_o1_high_reasoning_feature\"\n  | \"research_agent\"\n  | \"salesforce_synced_queries\"\n  | \"salesforce_tool\"\n  | \"show_debug_tools\"\n  | \"slack_semantic_search\"\n  | \"slack_enhanced_default_agent\"\n  | \"toolsets_tool\"\n  | \"usage_data_api\"\n  | \"xai_feature\"\n>();\n\nexport type WhitelistableFeature = z.infer<typeof WhitelistableFeaturesSchema>;\n\nconst WorkspaceSegmentationSchema =\n  FlexibleEnumSchema<\"interesting\">().nullable();\n\nconst RoleSchema = z.enum([\"admin\", \"builder\", \"user\", \"none\"]);\n\nconst LightWorkspaceSchema = z.object({\n  id: ModelIdSchema,\n  sId: z.string(),\n  name: z.string(),\n  role: RoleSchema,\n  segmentation: WorkspaceSegmentationSchema,\n  whiteListedProviders: ModelProviderIdSchema.array().nullable(),\n  defaultEmbeddingProvider: EmbeddingProviderIdSchema.nullable(),\n});\n\nexport type LightWorkspaceType = z.infer<typeof LightWorkspaceSchema>;\nexport type WorkspaceType = z.infer<typeof WorkspaceSchema>;\nexport type ExtensionWorkspaceType = z.infer<typeof ExtensionWorkspaceSchema>;\n\nconst WorkspaceSchema = LightWorkspaceSchema.extend({\n  ssoEnforced: z.boolean().optional(),\n});\n\nconst ExtensionWorkspaceSchema = WorkspaceSchema.extend({\n  blacklistedDomains: z.array(z.string()).nullable(),\n});\n\nconst UserProviderSchema = FlexibleEnumSchema<\n  \"auth0\" | \"github\" | \"google\" | \"okta\" | \"samlp\" | \"waad\"\n>().nullable();\n\nconst UserSchema = z.object({\n  sId: z.string(),\n  id: ModelIdSchema,\n  createdAt: z.number(),\n  provider: UserProviderSchema,\n  username: z.string(),\n  email: z.string(),\n  firstName: z.string(),\n  lastName: z.string().nullable(),\n  fullName: z.string(),\n  image: z.string().nullable(),\n});\n\nexport type UserType = z.infer<typeof UserSchema>;\n\nexport const WebsearchResultSchema = z.object({\n  title: z.string(),\n  snippet: z.string(),\n  link: z.string(),\n  reference: z.string(),\n});\n\nexport type WebsearchResultPublicType = z.infer<typeof WebsearchResultSchema>;\n\nconst MCPActionTypeSchema = z.object({\n  id: ModelIdSchema,\n  mcpServerId: z.string().nullable(),\n  internalMCPServerName: z.string().nullable(),\n  agentMessageId: ModelIdSchema,\n  functionCallName: z.string().nullable(),\n  status: z.string(),\n  params: z.record(z.any()),\n  output: CallToolResultSchema.shape.content.nullable(),\n});\n\nconst GlobalAgentStatusSchema = FlexibleEnumSchema<\n  | \"active\"\n  | \"disabled_by_admin\"\n  | \"disabled_missing_datasource\"\n  | \"disabled_free_workspace\"\n>();\n\nconst AgentStatusSchema = FlexibleEnumSchema<\"active\" | \"archived\" | \"draft\">();\n\nconst AgentConfigurationStatusSchema = z.union([\n  AgentStatusSchema,\n  GlobalAgentStatusSchema,\n]);\n\nconst AgentConfigurationScopeSchema = FlexibleEnumSchema<\n  \"global\" | \"workspace\" | \"published\" | \"private\" | \"hidden\" | \"visible\"\n>();\n\nexport const AgentConfigurationViewSchema = FlexibleEnumSchema<\n  \"all\" | \"list\" | \"workspace\" | \"published\" | \"global\" | \"favorites\"\n>();\n\nexport type AgentConfigurationViewType = z.infer<\n  typeof AgentConfigurationViewSchema\n>;\n\nconst AgentUsageTypeSchema = z.object({\n  messageCount: z.number(),\n  conversationCount: z.number(),\n  userCount: z.number(),\n  timePeriodSec: z.number(),\n});\n\nconst AgentRecentAuthorsSchema = z.array(z.string()).readonly();\n\nconst AgentModelConfigurationSchema = z.object({\n  providerId: ModelProviderIdSchema,\n  modelId: ModelLLMIdSchema,\n  temperature: z.number(),\n});\n\nconst LightAgentConfigurationSchema = z.object({\n  id: ModelIdSchema,\n  versionCreatedAt: z.string().nullable(),\n  sId: z.string(),\n  version: z.number(),\n  versionAuthorId: ModelIdSchema.nullable(),\n  instructions: z.string().nullable(),\n  model: AgentModelConfigurationSchema,\n  status: AgentConfigurationStatusSchema,\n  scope: AgentConfigurationScopeSchema,\n  userFavorite: z.boolean(),\n  name: z.string(),\n  description: z.string(),\n  pictureUrl: z.string(),\n  lastAuthors: AgentRecentAuthorsSchema.optional(),\n  usage: AgentUsageTypeSchema.optional(),\n  maxStepsPerRun: z.number(),\n  visualizationEnabled: z.boolean(),\n  templateId: z.string().nullable(),\n  groupIds: z.array(z.string()).optional(),\n  requestedGroupIds: z.array(z.array(z.string())),\n});\n\nexport type LightAgentConfigurationType = z.infer<\n  typeof LightAgentConfigurationSchema\n>;\n\nconst ContentFragmentContextSchema = z.object({\n  username: z.string().optional().nullable(),\n  fullName: z.string().optional().nullable(),\n  email: z.string().optional().nullable(),\n  profilePictureUrl: z.string().optional().nullable(),\n});\n\nexport const ContentNodeTypeSchema = z.union([\n  z.literal(\"document\"),\n  z.literal(\"table\"),\n  z.literal(\"folder\"),\n]);\n\nexport const ContentNodesViewTypeSchema = z.union([\n  z.literal(\"table\"),\n  z.literal(\"document\"),\n  z.literal(\"all\"),\n]);\n\nexport type ContentNodesViewType = z.infer<typeof ContentNodesViewTypeSchema>;\n\nconst ContentFragmentNodeData = z.object({\n  nodeId: z.string(),\n  nodeDataSourceViewId: z.string(),\n  nodeType: ContentNodeTypeSchema,\n  provider: ConnectorProvidersSchema.nullable(),\n  spaceName: z.string(),\n});\n\nconst BaseContentFragmentSchema = z.object({\n  type: z.literal(\"content_fragment\"),\n  id: ModelIdSchema,\n  sId: z.string(),\n  created: z.number(),\n  visibility: VisibilitySchema,\n  version: z.number(),\n  sourceUrl: z.string().nullable(),\n  title: z.string(),\n  contentType: SupportedContentFragmentTypeSchema,\n  context: ContentFragmentContextSchema,\n  contentFragmentId: z.string(),\n  contentFragmentVersion: z.union([\n    z.literal(\"latest\"),\n    z.literal(\"superseded\"),\n  ]),\n});\n\nconst FileContentFragmentSchema = BaseContentFragmentSchema.extend({\n  contentFragmentType: z.literal(\"file\"),\n  fileId: z.string().nullable(),\n  snippet: z.string().nullable(),\n  generatedTables: z.array(z.string()),\n  textUrl: z.string(),\n  textBytes: z.number().nullable(),\n});\n\nconst ContentNodeContentFragmentSchema = BaseContentFragmentSchema.extend({\n  contentFragmentType: z.literal(\"content_node\"),\n  nodeId: z.string(),\n  nodeDataSourceViewId: z.string(),\n  nodeType: ContentNodeTypeSchema,\n  contentNodeData: ContentFragmentNodeData,\n});\n\nconst ContentFragmentSchema = z.union([\n  FileContentFragmentSchema,\n  ContentNodeContentFragmentSchema,\n]);\n\nexport type ContentFragmentType = z.infer<typeof ContentFragmentSchema>;\n\nexport type UploadedContentFragmentType = {\n  fileId: string;\n  title: string;\n  url?: string;\n};\n\nconst AgentMentionSchema = z.object({\n  configurationId: z.string(),\n});\n\nexport type AgentMentionType = z.infer<typeof AgentMentionSchema>;\n\nconst UserMessageContextSchema = z.object({\n  username: z.string(),\n  timezone: Timezone,\n  fullName: z.string().optional().nullable(),\n  email: z.string().optional().nullable(),\n  profilePictureUrl: z.string().optional().nullable(),\n  origin: UserMessageOriginSchema,\n  clientSideMCPServerIds: z.array(z.string()).optional().nullable(),\n  selectedMCPServerViewIds: z.array(z.string()).optional().nullable(),\n});\n\nconst UserMessageSchema = z.object({\n  id: ModelIdSchema,\n  created: z.number(),\n  type: z.literal(\"user_message\"),\n  sId: z.string(),\n  visibility: VisibilitySchema,\n  version: z.number(),\n  user: UserSchema.nullable(),\n  mentions: z.array(AgentMentionSchema),\n  content: z.string(),\n  context: UserMessageContextSchema,\n});\nexport type UserMessageType = z.infer<typeof UserMessageSchema>;\n\nconst UserMessageWithRankTypeSchema = UserMessageSchema.and(RankSchema);\n\nexport type UserMessageWithRankType = z.infer<\n  typeof UserMessageWithRankTypeSchema\n>;\n\nexport type AgentActionPublicType = z.infer<typeof MCPActionTypeSchema>;\n\nconst AgentMessageStatusSchema = FlexibleEnumSchema<\n  \"created\" | \"succeeded\" | \"failed\" | \"cancelled\"\n>();\n\nconst AgentMessageTypeSchema = z.object({\n  id: ModelIdSchema,\n  agentMessageId: ModelIdSchema,\n  created: z.number(),\n  type: z.literal(\"agent_message\"),\n  sId: z.string(),\n  visibility: VisibilitySchema,\n  version: z.number(),\n  parentMessageId: z.string().nullable(),\n  configuration: LightAgentConfigurationSchema,\n  status: AgentMessageStatusSchema,\n  actions: z.array(MCPActionTypeSchema),\n  content: z.string().nullable(),\n  chainOfThought: z.string().nullable(),\n  rawContents: z.array(\n    z.object({\n      step: z.number(),\n      content: z.string(),\n    })\n  ),\n  error: z\n    .object({\n      code: z.string(),\n      message: z.string(),\n      metadata: z.record(z.any()).nullable(),\n    })\n    .nullable(),\n});\nexport type AgentMessagePublicType = z.infer<typeof AgentMessageTypeSchema>;\n\nconst AgentMessageFeedbackSchema = z.object({\n  messageId: z.string(),\n  agentMessageId: z.number(),\n  userId: z.number(),\n  thumbDirection: z.union([z.literal(\"up\"), z.literal(\"down\")]),\n  content: z.string().nullable(),\n  createdAt: z.number(),\n  agentConfigurationId: z.string(),\n  agentConfigurationVersion: z.number(),\n  isConversationShared: z.boolean(),\n});\n\nconst ConversationVisibilitySchema = FlexibleEnumSchema<\n  \"unlisted\" | \"workspace\" | \"deleted\" | \"test\"\n>();\n\nexport type ConversationVisibility = z.infer<\n  typeof ConversationVisibilitySchema\n>;\n\nconst ConversationWithoutContentSchema = z.object({\n  id: ModelIdSchema,\n  created: z.number(),\n  updated: z.number().optional(),\n  owner: WorkspaceSchema,\n  sId: z.string(),\n  title: z.string().nullable(),\n  visibility: ConversationVisibilitySchema,\n  groupIds: z.array(z.string()).optional(),\n  requestedGroupIds: z.array(z.array(z.string())),\n});\n\nexport const ConversationSchema = ConversationWithoutContentSchema.extend({\n  content: z.array(\n    z.union([\n      z.array(UserMessageSchema),\n      z.array(AgentMessageTypeSchema),\n      z.array(ContentFragmentSchema),\n    ])\n  ),\n});\n\nexport type ConversationWithoutContentPublicType = z.infer<\n  typeof ConversationWithoutContentSchema\n>;\nexport type ConversationPublicType = z.infer<typeof ConversationSchema>;\n\nconst ConversationMessageReactionsSchema = z.array(\n  z.object({\n    messageId: z.string(),\n    reactions: z.array(\n      z.object({\n        emoji: z.string(),\n        users: z.array(\n          z.object({\n            userId: ModelIdSchema.nullable(),\n            username: z.string(),\n            fullName: z.string().nullable(),\n          })\n        ),\n      })\n    ),\n  })\n);\n\nexport type ConversationMessageReactionsType = z.infer<\n  typeof ConversationMessageReactionsSchema\n>;\n\nconst MCPStakeLevelSchema = z.enum([\"low\", \"high\", \"never_ask\"]).optional();\n\nconst MCPValidationMetadataSchema = z.object({\n  mcpServerName: z.string(),\n  toolName: z.string(),\n  agentName: z.string(),\n  pubsubMessageId: z.string().optional(),\n  icon: z\n    .union([MCPInternalActionIconSchema, MCPExternalActionIconSchema])\n    .optional(),\n});\n\nconst MCPParamsEventSchema = z.object({\n  type: z.literal(\"tool_params\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  action: MCPActionTypeSchema,\n});\n\nconst NotificationImageContentSchema = z.object({\n  type: z.literal(\"image\"),\n  mimeType: z.string(),\n});\n\nconst NotificationTextContentSchema = z.object({\n  type: z.literal(\"text\"),\n  text: z.string(),\n});\n\nconst NotificationToolApproveBubbleUpContentSchema = z.object({\n  type: z.literal(\"tool_approval_bubble_up\"),\n  configurationId: z.string(),\n  conversationId: z.string(),\n  messageId: z.string(),\n  actionId: z.string(),\n  inputs: z.record(z.any()),\n  stake: MCPStakeLevelSchema,\n  metadata: MCPValidationMetadataSchema,\n});\n\nconst NotificationRunAgentContentSchema = z.object({\n  type: z.literal(\"run_agent\"),\n  childAgentId: z.string(),\n  conversationId: z.string(),\n  query: z.string(),\n});\n\nconst NotificationRunAgentChainOfThoughtSchema = z.object({\n  type: z.literal(\"run_agent_chain_of_thought\"),\n  childAgentId: z.string(),\n  conversationId: z.string(),\n  chainOfThought: z.string(),\n});\n\nconst NotificationRunAgentGenerationTokensSchema = z.object({\n  type: z.literal(\"run_agent_generation_tokens\"),\n  childAgentId: z.string(),\n  conversationId: z.string(),\n  text: z.string(),\n});\n\nconst NotificationContentSchema = z.union([\n  NotificationCanvasFileContentSchema,\n  NotificationImageContentSchema,\n  NotificationRunAgentChainOfThoughtSchema,\n  NotificationRunAgentContentSchema,\n  NotificationRunAgentGenerationTokensSchema,\n  NotificationTextContentSchema,\n  NotificationToolApproveBubbleUpContentSchema,\n]);\n\nconst ToolNotificationProgressSchema = z.object({\n  progress: z.number(),\n  total: z.number(),\n  data: z.object({\n    label: z.string(),\n    output: NotificationContentSchema.optional(),\n  }),\n});\n\nexport type ToolNotificationProgress = z.infer<\n  typeof ToolNotificationProgressSchema\n>;\n\nconst ToolNotificationEventSchema = z.object({\n  type: z.literal(\"tool_notification\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  action: MCPActionTypeSchema,\n  notification: ToolNotificationProgressSchema,\n});\n\nexport type ToolNotificationEvent = z.infer<typeof ToolNotificationEventSchema>;\n\nexport type MCPValidationMetadataPublicType = z.infer<\n  typeof MCPValidationMetadataSchema\n>;\n\nconst ToolExecutionBlockedStatusSchema = z.enum([\n  \"blocked_authentication_required\",\n  \"blocked_validation_required\",\n  \"blocked_child_action_input_required\",\n]);\n\nexport type ToolExecutionBlockedStatusType = z.infer<\n  typeof ToolExecutionBlockedStatusSchema\n>;\n\nconst ToolExecutionMetadataSchema = z.object({\n  actionId: z.string(),\n  inputs: z.record(z.any()),\n  stake: MCPStakeLevelSchema,\n  metadata: MCPValidationMetadataSchema,\n});\n\nconst BlockedActionExecutionSchema = ToolExecutionMetadataSchema.extend({\n  messageId: z.string(),\n  conversationId: z.string(),\n  status: ToolExecutionBlockedStatusSchema,\n});\n\nexport type BlockedActionExecutionType = z.infer<\n  typeof BlockedActionExecutionSchema\n>;\n\nconst MCPApproveExecutionEventSchema = ToolExecutionMetadataSchema.extend({\n  type: z.literal(\"tool_approve_execution\"),\n  configurationId: z.string(),\n  conversationId: z.string(),\n  created: z.number(),\n  isLastBlockingEventForStep: z.boolean().optional(),\n  messageId: z.string(),\n});\n\nexport type MCPApproveExecutionEvent = z.infer<\n  typeof MCPApproveExecutionEventSchema\n>;\n\nconst ToolErrorEventSchema = z.object({\n  type: z.literal(\"tool_error\"),\n  created: z.number(),\n  configurationId: z.string(),\n  isLastBlockingEventForStep: z.boolean().optional(),\n  messageId: z.string(),\n  error: z.object({\n    code: z.string(),\n    message: z.string(),\n    metadata: z.record(z.any()).nullable(),\n  }),\n});\nexport type ToolErrorEvent = z.infer<typeof ToolErrorEventSchema>;\n\nexport function isMCPServerPersonalAuthRequiredError(\n  error: ToolErrorEvent[\"error\"]\n) {\n  return (\n    error.code === \"mcp_server_personal_authentication_required\" &&\n    error.metadata &&\n    \"mcpServerId\" in error.metadata\n  );\n}\n\nconst AgentErrorEventSchema = z.object({\n  type: z.literal(\"agent_error\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  error: z.object({\n    code: z.string(),\n    message: z.string(),\n    metadata: z.record(z.any()).nullable(),\n  }),\n});\nexport type AgentErrorEvent = z.infer<typeof AgentErrorEventSchema>;\n\nconst AgentActionSpecificEventSchema = z.union([\n  MCPParamsEventSchema,\n  ToolNotificationEventSchema,\n  MCPApproveExecutionEventSchema,\n]);\nexport type AgentActionSpecificEvent = z.infer<\n  typeof AgentActionSpecificEventSchema\n>;\n\nconst AgentActionSuccessEventSchema = z.object({\n  type: z.literal(\"agent_action_success\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  action: MCPActionTypeSchema,\n});\nexport type AgentActionSuccessEvent = z.infer<\n  typeof AgentActionSuccessEventSchema\n>;\n\nconst AgentMessageSuccessEventSchema = z.object({\n  type: z.literal(\"agent_message_success\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  message: AgentMessageTypeSchema,\n  runIds: z.array(z.string()),\n});\nexport type AgentMessageSuccessEvent = z.infer<\n  typeof AgentMessageSuccessEventSchema\n>;\n\nconst AgentGenerationCancelledEventSchema = z.object({\n  type: z.literal(\"agent_generation_cancelled\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n});\nexport type AgentGenerationCancelledEvent = z.infer<\n  typeof AgentGenerationCancelledEventSchema\n>;\n\nconst UserMessageErrorEventSchema = z.object({\n  type: z.literal(\"user_message_error\"),\n  created: z.number(),\n  error: z.object({\n    code: z.string(),\n    message: z.string(),\n  }),\n});\nexport type UserMessageErrorEvent = z.infer<typeof UserMessageErrorEventSchema>;\n\n// Event sent when the user message is created.\nconst UserMessageNewEventSchema = z.object({\n  type: z.literal(\"user_message_new\"),\n  created: z.number(),\n  messageId: z.string(),\n  message: UserMessageSchema.and(RankSchema),\n});\nexport type UserMessageNewEvent = z.infer<typeof UserMessageNewEventSchema>;\n\n// Event sent when a new message is created (empty) and the agent is about to be executed.\nconst AgentMessageNewEventSchema = z.object({\n  type: z.literal(\"agent_message_new\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  message: AgentMessageTypeSchema.and(RankSchema),\n});\nexport type AgentMessageNewEvent = z.infer<typeof AgentMessageNewEventSchema>;\n\n// Event sent when the conversation title is updated.\nconst ConversationTitleEventSchema = z.object({\n  type: z.literal(\"conversation_title\"),\n  created: z.number(),\n  title: z.string(),\n});\nexport type ConversationTitleEvent = z.infer<\n  typeof ConversationTitleEventSchema\n>;\n\nconst ConversationEventTypeSchema = z.object({\n  eventId: z.string(),\n  data: z.union([\n    UserMessageNewEventSchema,\n    AgentMessageNewEventSchema,\n    AgentGenerationCancelledEventSchema,\n    ConversationTitleEventSchema,\n  ]),\n});\n\nexport type ConversationEventType = z.infer<typeof ConversationEventTypeSchema>;\n\nconst AgentMessageEventTypeSchema = z.object({\n  eventId: z.string(),\n  data: z.union([\n    AgentErrorEventSchema,\n    AgentActionSpecificEventSchema,\n    AgentActionSuccessEventSchema,\n    AgentGenerationCancelledEventSchema,\n    GenerationTokensEventSchema,\n  ]),\n});\n\nexport type AgentMessageEventType = z.infer<typeof AgentMessageEventTypeSchema>;\n\nexport const CoreAPIErrorSchema = z.object({\n  message: z.string(),\n  code: z.string(),\n});\n\nexport type CoreAPIError = z.infer<typeof CoreAPIErrorSchema>;\n\nexport const CoreAPITokenTypeSchema = z.tuple([z.number(), z.string()]);\nexport type CoreAPITokenType = z.infer<typeof CoreAPITokenTypeSchema>;\n\nconst APIErrorTypeSchema = FlexibleEnumSchema<\n  | \"action_api_error\"\n  | \"action_failed\"\n  | \"action_unknown_error\"\n  | \"agent_configuration_not_found\"\n  | \"agent_message_error\"\n  | \"app_auth_error\"\n  | \"app_not_found\"\n  | \"assistant_saving_error\"\n  | \"chat_message_not_found\"\n  | \"connector_credentials_error\"\n  | \"connector_not_found_error\"\n  | \"connector_oauth_target_mismatch\"\n  | \"connector_provider_not_supported\"\n  | \"connector_update_error\"\n  | \"connector_update_unauthorized\"\n  | \"content_too_large\"\n  | \"conversation_access_restricted\"\n  | \"conversation_not_found\"\n  | \"data_source_auth_error\"\n  | \"data_source_document_not_found\"\n  | \"data_source_error\"\n  | \"data_source_not_found\"\n  | \"data_source_not_managed\"\n  | \"data_source_quota_error\"\n  | \"data_source_view_not_found\"\n  | \"dataset_not_found\"\n  | \"dust_app_secret_not_found\"\n  | \"expired_oauth_token_error\"\n  | \"feature_flag_already_exists\"\n  | \"feature_flag_not_found\"\n  | \"file_not_found\"\n  | \"file_too_large\"\n  | \"file_type_not_supported\"\n  | \"global_agent_error\"\n  | \"group_not_found\"\n  | \"internal_server_error\"\n  | \"invalid_api_key_error\"\n  | \"invalid_oauth_token_error\"\n  | \"invalid_pagination_parameters\"\n  | \"invalid_request_error\"\n  | \"invalid_rows_request_error\"\n  | \"invitation_already_sent_recently\"\n  | \"invitation_not_found\"\n  | \"key_not_found\"\n  | \"malformed_authorization_header_error\"\n  | \"membership_not_found\"\n  | \"message_not_found\"\n  | \"method_not_supported_error\"\n  | \"missing_authorization_header_error\"\n  | \"not_authenticated\"\n  | \"personal_workspace_not_found\"\n  | \"plan_limit_error\"\n  | \"plan_message_limit_exceeded\"\n  | \"plugin_execution_failed\"\n  | \"plugin_not_found\"\n  | \"provider_auth_error\"\n  | \"provider_not_found\"\n  | \"rate_limit_error\"\n  | \"run_error\"\n  | \"run_not_found\"\n  | \"space_already_exists\"\n  | \"space_not_found\"\n  | \"stripe_invalid_product_id_error\"\n  | \"subscription_not_found\"\n  | \"subscription_payment_failed\"\n  | \"subscription_state_invalid\"\n  | \"table_not_found\"\n  | \"template_not_found\"\n  | \"transcripts_configuration_already_exists\"\n  | \"transcripts_configuration_default_not_allowed\"\n  | \"transcripts_configuration_not_found\"\n  | \"unexpected_action_response\"\n  | \"unexpected_error_format\"\n  | \"unexpected_network_error\"\n  | \"unexpected_response_format\"\n  | \"user_not_found\"\n  | \"workspace_auth_error\"\n  | \"workspace_not_found\"\n  | \"workspace_user_not_found\"\n>();\n\nexport const APIErrorSchema = z.object({\n  type: APIErrorTypeSchema,\n  message: z.string(),\n  data_source_error: CoreAPIErrorSchema.optional(),\n  run_error: CoreAPIErrorSchema.optional(),\n  app_error: CoreAPIErrorSchema.optional(),\n  connectors_error: ConnectorsAPIErrorSchema.optional(),\n});\nexport type APIError = z.infer<typeof APIErrorSchema>;\n\nexport const WorkspaceDomainSchema = z.object({\n  domain: z.string(),\n  domainAutoJoinEnabled: z.boolean(),\n});\n\nexport type WorkspaceDomainType = z.infer<typeof WorkspaceDomainSchema>;\n\nexport const DustAppTypeSchema = z.object({\n  appHash: z.string(),\n  appId: z.string(),\n  workspaceId: z.string(),\n});\n\nexport type DustAppType = z.infer<typeof DustAppTypeSchema>;\n\nexport const DustAppConfigTypeSchema = z.record(z.unknown());\nexport type DustAppConfigType = z.infer<typeof DustAppConfigTypeSchema>;\n\nexport const DustAppRunErroredEventSchema = z.object({\n  type: z.literal(\"error\"),\n  content: z.object({\n    code: z.string(),\n    message: z.string(),\n  }),\n});\nexport type DustAppRunErroredEvent = z.infer<\n  typeof DustAppRunErroredEventSchema\n>;\n\nexport const DustAppRunRunStatusEventSchema = z.object({\n  type: z.literal(\"run_status\"),\n  content: z.object({\n    status: z.enum([\"running\", \"succeeded\", \"errored\"]),\n    run_id: z.string(),\n  }),\n});\nexport type DustAppRunRunStatusEvent = z.infer<\n  typeof DustAppRunRunStatusEventSchema\n>;\n\nexport const DustAppRunBlockStatusEventSchema = z.object({\n  type: z.literal(\"block_status\"),\n  content: z.object({\n    block_type: BlockTypeSchema,\n    name: z.string(),\n    status: StatusSchema,\n    success_count: z.number(),\n    error_count: z.number(),\n  }),\n});\nexport type DustAppRunBlockStatusEvent = z.infer<\n  typeof DustAppRunBlockStatusEventSchema\n>;\n\nexport const DustAppRunBlockExecutionEventSchema = z.object({\n  type: z.literal(\"block_execution\"),\n  content: z.object({\n    block_type: BlockTypeSchema,\n    block_name: z.string(),\n    execution: z.array(\n      z.array(\n        z.object({\n          value: z.unknown().nullable(),\n          error: z.string().nullable(),\n          meta: z.unknown().nullable(),\n        })\n      )\n    ),\n  }),\n});\nexport type DustAppRunBlockExecutionEvent = z.infer<\n  typeof DustAppRunBlockExecutionEventSchema\n>;\nexport const DustAppRunFinalEventSchema = z.object({\n  type: z.literal(\"final\"),\n});\nexport type DustAppRunFinalEvent = z.infer<typeof DustAppRunFinalEventSchema>;\n\nexport const DustAppRunTokensEventSchema = z.object({\n  type: z.literal(\"tokens\"),\n  content: z.object({\n    block_type: z.string(),\n    block_name: z.string(),\n    input_index: z.number(),\n    map: z\n      .object({\n        name: z.string(),\n        iteration: z.number(),\n      })\n      .nullable(),\n    tokens: z.object({\n      text: z.string(),\n      tokens: z.array(z.string()).optional(),\n      logprobs: z.array(z.number()).optional(),\n    }),\n  }),\n});\nexport type DustAppRunTokensEvent = z.infer<typeof DustAppRunTokensEventSchema>;\n\nexport const DustAppRunReasoningTokensEventSchema = z.object({\n  type: z.literal(\"reasoning_tokens\"),\n  content: z.object({\n    block_type: z.string(),\n    block_name: z.string(),\n    input_index: z.number(),\n    map: z\n      .object({\n        name: z.string(),\n        iteration: z.number(),\n      })\n      .nullable(),\n    tokens: z.object({\n      text: z.string(),\n    }),\n  }),\n});\nexport type DustAppRunReasoningTokensEvent = z.infer<\n  typeof DustAppRunReasoningTokensEventSchema\n>;\n\nexport const DustAppRunReasoningItemEventSchema = z.object({\n  type: z.literal(\"reasoning_item\"),\n  content: z.object({\n    block_type: z.string(),\n    block_name: z.string(),\n    input_index: z.number(),\n    map: z\n      .object({\n        name: z.string(),\n        iteration: z.number(),\n      })\n      .nullable(),\n    item: z.unknown(),\n  }),\n});\nexport type DustAppRunReasoningItemEvent = z.infer<\n  typeof DustAppRunReasoningItemEventSchema\n>;\n\nexport const DustAppRunFunctionCallEventSchema = z.object({\n  type: z.literal(\"function_call\"),\n  content: z.object({\n    block_type: z.string(),\n    block_name: z.string(),\n    input_index: z.number(),\n    map: z\n      .object({\n        name: z.string(),\n        iteration: z.number(),\n      })\n      .nullable(),\n    function_call: z.object({\n      name: z.string(),\n    }),\n  }),\n});\nexport type DustAppRunFunctionCallEvent = z.infer<\n  typeof DustAppRunFunctionCallEventSchema\n>;\n\nexport const DustAppRunFunctionCallArgumentsTokensEventSchema = z.object({\n  type: z.literal(\"function_call_arguments_tokens\"),\n  content: z.object({\n    block_type: z.string(),\n    block_name: z.string(),\n    input_index: z.number(),\n    map: z\n      .object({\n        name: z.string(),\n        iteration: z.number(),\n      })\n      .nullable(),\n    tokens: z.object({\n      text: z.string(),\n    }),\n  }),\n});\nexport type DustAppRunFunctionCallArgumentsTokensEvent = z.infer<\n  typeof DustAppRunFunctionCallArgumentsTokensEventSchema\n>;\nexport type DustAPICredentials = {\n  apiKey: string | (() => string | null | Promise<string | null>);\n  workspaceId: string;\n  extraHeaders?: Record<string, string>;\n};\n\nconst SpaceKindSchema = FlexibleEnumSchema<\n  \"regular\" | \"global\" | \"system\" | \"public\" | \"conversations\"\n>();\n\nconst SpaceTypeSchema = z.object({\n  createdAt: z.number(),\n  groupIds: z.array(z.string()),\n  isRestricted: z.boolean(),\n  kind: SpaceKindSchema,\n  name: z.string(),\n  sId: z.string(),\n  updatedAt: z.number(),\n});\n\nexport type SpaceType = z.infer<typeof SpaceTypeSchema>;\n\nconst DatasetSchemaEntryType = FlexibleEnumSchema<\n  \"string\" | \"number\" | \"boolean\" | \"json\"\n>();\n\nconst DatasetSchema = z.object({\n  name: z.string(),\n  description: z.string().nullable(),\n  data: z.array(z.record(z.any())).nullable().optional(),\n  schema: z\n    .array(\n      z.object({\n        key: z.string(),\n        type: DatasetSchemaEntryType,\n        description: z.string().nullable(),\n      })\n    )\n    .nullable()\n    .optional(),\n});\n\nconst AppTypeSchema = z.object({\n  id: ModelIdSchema,\n  sId: z.string(),\n  name: z.string(),\n  description: z.string().nullable(),\n  savedSpecification: z.string().nullable(),\n  savedConfig: z.string().nullable(),\n  savedRun: z.string().nullable(),\n  dustAPIProjectId: z.string(),\n  space: SpaceTypeSchema,\n  datasets: z.array(DatasetSchema).optional(),\n  coreSpecifications: z.record(z.string()).optional(),\n});\n\nexport type ApiAppType = z.infer<typeof AppTypeSchema>;\n\nconst AppImportTypeSchema = z.object({\n  id: ModelIdSchema.optional(),\n  sId: z.string(),\n  name: z.string(),\n  description: z.string().nullable(),\n  savedSpecification: z.string().nullable(),\n  savedConfig: z.string().nullable(),\n  savedRun: z.string().nullable(),\n  dustAPIProjectId: z.string(),\n  datasets: z.array(DatasetSchema).optional(),\n  coreSpecifications: z.record(z.string()).optional(),\n});\n\nexport type ApiAppImportType = z.infer<typeof AppImportTypeSchema>;\n\nexport const RunAppResponseSchema = z.object({\n  run: RunTypeSchema,\n});\n\nexport type RunAppResponseType = z.infer<typeof RunAppResponseSchema>;\n\nexport const GetDataSourcesResponseSchema = z.object({\n  data_sources: DataSourceTypeSchema.array(),\n});\n\nexport type GetDataSourcesResponseType = z.infer<\n  typeof GetDataSourcesResponseSchema\n>;\n\nexport const GetOrPatchAgentConfigurationResponseSchema = z.object({\n  agentConfiguration: LightAgentConfigurationSchema,\n});\n\nexport type GetOrPatchAgentConfigurationResponseType = z.infer<\n  typeof GetOrPatchAgentConfigurationResponseSchema\n>;\n\nexport const PatchAgentConfigurationRequestSchema = z.object({\n  userFavorite: z.boolean().optional(),\n});\n\nexport type PatchAgentConfigurationRequestType = z.infer<\n  typeof PatchAgentConfigurationRequestSchema\n>;\n\nexport const GetAgentConfigurationsResponseSchema = z.object({\n  agentConfigurations: LightAgentConfigurationSchema.array(),\n});\n\nexport type GetAgentConfigurationsResponseType = z.infer<\n  typeof GetAgentConfigurationsResponseSchema\n>;\n\nexport const CreateGenericAgentConfigurationRequestSchema = z.object({\n  name: z.string(),\n  description: z.string(),\n  instructions: z.string(),\n  emoji: z.string().optional(),\n  subAgentName: z.string().optional(),\n  subAgentDescription: z.string().optional(),\n  subAgentInstructions: z.string().optional(),\n  subAgentEmoji: z.string().optional(),\n});\n\nexport type CreateAgentConfigurationWithDefaultsRequestType = z.infer<\n  typeof CreateGenericAgentConfigurationRequestSchema\n>;\n\nexport const CreateGenericAgentConfigurationResponseSchema = z.object({\n  agentConfiguration: LightAgentConfigurationSchema,\n  subAgentConfiguration: LightAgentConfigurationSchema.optional(),\n});\n\nexport type CreateGenericAgentConfigurationResponseType = z.infer<\n  typeof CreateGenericAgentConfigurationResponseSchema\n>;\n\nexport const PostContentFragmentResponseSchema = z.object({\n  contentFragment: ContentFragmentSchema,\n});\n\nexport type PostContentFragmentResponseType = z.infer<\n  typeof PostContentFragmentResponseSchema\n>;\n\nexport const CreateConversationResponseSchema = z.object({\n  conversation: ConversationSchema,\n  message: UserMessageSchema.optional(),\n});\n\nexport type CreateConversationResponseType = z.infer<\n  typeof CreateConversationResponseSchema\n>;\n\nexport const GetFeedbacksResponseSchema = z.object({\n  feedbacks: z.array(AgentMessageFeedbackSchema),\n});\n\nexport type GetFeedbacksResponseType = z.infer<\n  typeof GetFeedbacksResponseSchema\n>;\n\nexport const PublicPostMessageFeedbackRequestBodySchema = z.object({\n  thumbDirection: z.string(),\n  feedbackContent: z.string().nullable().optional(),\n  isConversationShared: z.boolean().optional(),\n});\n\nexport type PublicPostMessageFeedbackRequestBody = z.infer<\n  typeof PublicPostMessageFeedbackRequestBodySchema\n>;\n\nexport const PostMessageFeedbackResponseSchema = z.object({\n  success: z.literal(true),\n});\n\nexport const PostUserMessageResponseSchema = z.object({\n  message: UserMessageSchema,\n});\n\nexport type PostUserMessageResponseType = z.infer<\n  typeof PostUserMessageResponseSchema\n>;\n\nexport const RetryMessageResponseSchema = z.object({\n  message: AgentMessageTypeSchema,\n});\nexport type RetryMessageResponseType = z.infer<\n  typeof RetryMessageResponseSchema\n>;\n\nexport const GetConversationResponseSchema = z.object({\n  conversation: ConversationSchema,\n});\n\nexport type GetConversationResponseType = z.infer<\n  typeof GetConversationResponseSchema\n>;\n\nexport const TokenizeResponseSchema = z.object({\n  tokens: CoreAPITokenTypeSchema.array(),\n});\n\nexport type TokenizeResponseType = z.infer<typeof TokenizeResponseSchema>;\n\nexport const GetActiveMemberEmailsInWorkspaceResponseSchema = z.object({\n  emails: z.array(z.string()),\n});\n\nexport type GetActiveMemberEmailsInWorkspaceResponseType = z.infer<\n  typeof GetActiveMemberEmailsInWorkspaceResponseSchema\n>;\n\nexport const GetWorkspaceVerifiedDomainsResponseSchema = z.object({\n  verified_domains: WorkspaceDomainSchema.array(),\n});\n\nexport type GetWorkspaceVerifiedDomainsResponseType = z.infer<\n  typeof GetWorkspaceVerifiedDomainsResponseSchema\n>;\n\nexport const GetWorkspaceFeatureFlagsResponseSchema = z.object({\n  feature_flags: WhitelistableFeaturesSchema.array(),\n});\n\nexport type GetWorkspaceFeatureFlagsResponseType = z.infer<\n  typeof GetWorkspaceFeatureFlagsResponseSchema\n>;\n\nexport const PublicPostMessagesRequestBodySchema = z.intersection(\n  z.object({\n    content: z.string().min(1),\n    mentions: z.array(\n      z.object({\n        configurationId: z.string(),\n      })\n    ),\n    context: UserMessageContextSchema.extend({\n      clientSideMCPServerIds: z.array(z.string()).optional().nullable(),\n    }),\n  }),\n  z\n    .object({\n      blocking: z.boolean().optional(),\n      skipToolsValidation: z.boolean().optional(),\n    })\n    .partial()\n);\n\nexport type PublicPostMessagesRequestBody = z.infer<\n  typeof PublicPostMessagesRequestBodySchema\n>;\n\nexport type PostMessagesResponseBody = {\n  message: UserMessageType;\n  agentMessages?: AgentMessagePublicType[];\n};\n\nexport const PublicPostEditMessagesRequestBodySchema = z.object({\n  content: z.string(),\n  mentions: z.array(\n    z.object({\n      configurationId: z.string(),\n    })\n  ),\n  skipToolsValidation: z.boolean().optional().default(false),\n});\n\nexport type PublicPostEditMessagesRequestBody = z.infer<\n  typeof PublicPostEditMessagesRequestBodySchema\n>;\n\nexport const PublicContentFragmentWithContentSchema = z.object({\n  title: z.string(),\n  url: z.string().optional().nullable(),\n  content: z.string(),\n  contentType: z.string(),\n  fileId: z.undefined().nullable(),\n  nodeId: z.undefined().nullable(),\n  nodeDataSourceViewId: z.undefined().nullable(),\n  context: ContentFragmentContextSchema.optional().nullable(),\n  // Undocumented for now -- allows to supersede an existing content fragment.\n  supersededContentFragmentId: z.string().optional().nullable(),\n});\n\nexport type PublicContentFragmentWithContent = z.infer<\n  typeof PublicContentFragmentWithContentSchema\n>;\n\nexport const PublicContentFragmentWithFileIdSchema = z.object({\n  title: z.string(),\n  fileId: z.string(),\n  url: z.string().optional().nullable(),\n  content: z.undefined().nullable(),\n  contentType: z.undefined().nullable(),\n  nodeId: z.undefined().nullable(),\n  nodeDataSourceViewId: z.undefined().nullable(),\n  context: ContentFragmentContextSchema.optional().nullable(),\n  // Undocumented for now -- allows to supersede an existing content fragment.\n  supersededContentFragmentId: z.string().optional().nullable(),\n});\n\nexport type PublicContentFragmentWithFileId = z.infer<\n  typeof PublicContentFragmentWithFileIdSchema\n>;\n\nconst PublicContentFragmentWithContentNodeSchema = z.object({\n  title: z.string(),\n  nodeId: z.string(),\n  nodeDataSourceViewId: z.string(),\n  url: z.undefined().nullable(),\n  content: z.undefined().nullable(),\n  contentType: z.undefined().nullable(),\n  fileId: z.undefined().nullable(),\n  context: ContentFragmentContextSchema.optional().nullable(),\n  supersededContentFragmentId: z.string().optional().nullable(),\n});\n\nexport const PublicPostContentFragmentRequestBodySchema = z.union([\n  PublicContentFragmentWithContentSchema,\n  PublicContentFragmentWithFileIdSchema,\n  PublicContentFragmentWithContentNodeSchema,\n]);\n\nexport type PublicPostContentFragmentRequestBody = z.infer<\n  typeof PublicPostContentFragmentRequestBodySchema\n>;\n\nexport const PublicPostConversationsRequestBodySchema = z.intersection(\n  z.object({\n    title: z.string().nullable().optional(),\n    visibility: z\n      .enum([\"workspace\", \"unlisted\", \"deleted\", \"test\"])\n      .optional()\n      .default(\"unlisted\"),\n    depth: z.number().optional(),\n    message: z.union([\n      z.intersection(\n        z.object({\n          content: z.string().min(1),\n          mentions: z.array(\n            z.object({\n              configurationId: z.string(),\n            })\n          ),\n          context: UserMessageContextSchema,\n        }),\n        z\n          .object({\n            blocking: z.boolean().optional(),\n          })\n          .partial()\n      ),\n      z.undefined(),\n    ]),\n    contentFragment: z.union([\n      PublicContentFragmentWithContentSchema,\n      PublicContentFragmentWithFileIdSchema,\n      PublicContentFragmentWithContentNodeSchema,\n      z.undefined(),\n    ]),\n    contentFragments: z.union([\n      z\n        .union([\n          PublicContentFragmentWithContentSchema,\n          PublicContentFragmentWithFileIdSchema,\n          PublicContentFragmentWithContentNodeSchema,\n        ])\n        .array(),\n      z.undefined(),\n    ]),\n  }),\n  z\n    .object({\n      blocking: z.boolean().optional(),\n      skipToolsValidation: z.boolean().optional(),\n    })\n    .partial()\n);\n\nexport type PublicPostConversationsRequestBody = z.infer<\n  typeof PublicPostConversationsRequestBodySchema\n>;\n\nexport const PostConversationsResponseSchema = z.object({\n  conversation: ConversationSchema,\n  message: UserMessageSchema.optional(),\n  contentFragment: ContentFragmentSchema.optional(),\n});\n\nexport type PostConversationsResponseType = z.infer<\n  typeof PostConversationsResponseSchema\n>;\n\nexport const GetConversationsResponseSchema = z.object({\n  conversations: ConversationWithoutContentSchema.array(),\n});\nexport type GetConversationsResponseType = z.infer<\n  typeof GetConversationsResponseSchema\n>;\n\nexport const SearchDataSourceViewsRequestSchema = z.object({\n  dataSourceId: z.string().optional(),\n  kind: z.string().optional(),\n  vaultId: z.string().optional(),\n  vaultKind: z.string().optional(),\n});\n\nexport const SearchDataSourceViewsResponseSchema = z.object({\n  data_source_views: DataSourceViewSchema.array(),\n});\n\nexport type SearchDataSourceViewsResponseType = z.infer<\n  typeof SearchDataSourceViewsResponseSchema\n>;\n\nconst ListMemberEmailsResponseSchema = z.object({\n  emails: z.array(z.string()),\n});\n\nexport type ListMemberEmailsResponseType = z.infer<\n  typeof ListMemberEmailsResponseSchema\n>;\n\nexport const ValidateMemberRequestSchema = z.object({\n  email: z.string(),\n});\n\nconst ValidateMemberResponseSchema = z.object({\n  valid: z.boolean(),\n});\n\nexport type ValidateMemberResponseType = z.infer<\n  typeof ValidateMemberResponseSchema\n>;\n\nexport const GetAppsResponseSchema = z.object({\n  apps: AppTypeSchema.array(),\n});\n\nexport const PostAppsRequestSchema = z.object({\n  apps: AppImportTypeSchema.array(),\n});\n\nexport type GetAppsResponseType = z.infer<typeof GetAppsResponseSchema>;\n\nexport const ImportAppsResponseSchema = z.object({\n  apps: z\n    .object({\n      sId: z.string(),\n      name: z.string(),\n      error: z.string().optional(),\n    })\n    .array(),\n});\n\nexport type ImportAppsResponseType = z.infer<typeof ImportAppsResponseSchema>;\n\nexport const DataSourceViewResponseSchema = z.object({\n  dataSourceView: DataSourceViewSchema,\n});\n\nexport type DataSourceViewResponseType = z.infer<\n  typeof DataSourceViewResponseSchema\n>;\n\nexport const PatchDataSourceViewRequestSchema = z.union([\n  z\n    .object({\n      parentsToAdd: z.union([z.array(z.string()), z.undefined()]),\n      parentsToRemove: z.array(z.string()).optional(),\n    })\n    // For the fields to be not optional, see:\n    // https://stackoverflow.com/questions/71477015/specify-a-zod-schema-with-a-non-optional-but-possibly-undefined-field\n    .transform((o) => ({\n      parentsToAdd: o.parentsToAdd,\n      parentsToRemove: o.parentsToRemove,\n    })),\n  z.object({\n    parentsIn: z.array(z.string()),\n  }),\n]);\n\nexport type PatchDataSourceViewRequestType = z.infer<\n  typeof PatchDataSourceViewRequestSchema\n>;\n\nexport const DataSourceSearchQuerySchema = z.object({\n  query: z.string(),\n  top_k: z.coerce.number(),\n  full_text: z.coerce.boolean(),\n  target_document_tokens: z.coerce.number().optional(),\n  timestamp_gt: z.coerce.number().optional(),\n  timestamp_lt: z.coerce.number().optional(),\n  tags_in: z.array(z.string()).optional(),\n  tags_not: z.array(z.string()).optional(),\n  parents_in: z.array(z.string()).optional(),\n  parents_not: z.array(z.string()).optional(),\n});\n\nexport type DataSourceSearchQuery = z.infer<typeof DataSourceSearchQuerySchema>;\n\nconst DataSourceSearchResponseSchema = z.object({\n  documents: CoreAPIDocumentSchema.array(),\n});\n\nexport type DataSourceSearchResponseType = z.infer<\n  typeof DataSourceSearchResponseSchema\n>;\n\nconst DataSourceViewsListResponseSchema = z.object({\n  dataSourceViews: DataSourceViewSchema.array(),\n});\n\nexport type DataSourceViewsListResponseType = z.infer<\n  typeof DataSourceViewsListResponseSchema\n>;\n\ntype FrontDataSourceDocumentSection = {\n  prefix: string | null;\n  content: string | null;\n  sections: FrontDataSourceDocumentSection[];\n};\n\nconst FrontDataSourceDocumentSectionSchema: z.ZodSchema<FrontDataSourceDocumentSection> =\n  z.lazy(() =>\n    z.object({\n      prefix: z.string().nullable(),\n      content: z.string().nullable(),\n      sections: z.array(FrontDataSourceDocumentSectionSchema),\n    })\n  );\n\nexport const PostDataSourceDocumentRequestSchema = z.object({\n  timestamp: z.number().nullable().optional(),\n  tags: z.array(z.string()).nullable().optional(),\n  parent_id: z.string().nullable().optional(),\n  parents: z.array(z.string()).nullable().optional(),\n  source_url: z.string().nullable().optional(),\n  upsert_context: z\n    .object({\n      sync_type: z.union([z.enum([\"batch\", \"incremental\"]), z.undefined()]),\n    })\n    // For the fields to be not optional, see:\n    // https://stackoverflow.com/questions/71477015/specify-a-zod-schema-with-a-non-optional-but-possibly-undefined-field\n    .transform((o) => ({\n      sync_type: o.sync_type,\n    }))\n    .optional(),\n  text: z.string().nullable().optional(),\n  section: FrontDataSourceDocumentSectionSchema.nullable().optional(),\n  light_document_output: z.boolean().optional(),\n  async: z.boolean().nullable().optional(),\n  mime_type: z.string().nullable().optional(),\n  title: z.string().nullable().optional(),\n});\n\nexport type PostDataSourceDocumentRequestType = z.infer<\n  typeof PostDataSourceDocumentRequestSchema\n>;\n\nconst GetDocumentResponseSchema = z.object({\n  document: CoreAPIDocumentSchema,\n});\nexport type GetDocumentResponseType = z.infer<typeof GetDocumentResponseSchema>;\n\nconst CoreAPIDataSourceDocumentBlobSchema = z.object({\n  document_id: z.string(),\n  mime_type: z.string(),\n  parent_id: z.string().nullable(),\n  parents: z.array(z.string()),\n  section: FrontDataSourceDocumentSectionSchema,\n  source_url: z.string().nullable(),\n  tags: z.array(z.string()),\n  timestamp: z.number(),\n  title: z.string(),\n});\n\nexport type CoreAPIDataSourceDocumentBlob = z.infer<\n  typeof CoreAPIDataSourceDocumentBlobSchema\n>;\n\nconst GetDocumentBlobResponseSchema = z.object({\n  blob: CoreAPIDataSourceDocumentBlobSchema,\n});\nexport type GetDocumentBlobResponseType = z.infer<\n  typeof GetDocumentBlobResponseSchema\n>;\n\nconst DeleteDocumentResponseSchema = z.object({\n  document: z.object({\n    document_id: z.string(),\n  }),\n});\nexport type DeleteDocumentResponseType = z.infer<\n  typeof DeleteDocumentResponseSchema\n>;\n\nconst UpsertDocumentResponseSchema = z.object({\n  document: z.union([\n    CoreAPIDocumentSchema,\n    CoreAPILightDocumentSchema,\n    z.object({\n      document_id: z.string(),\n    }),\n  ]),\n  data_source: DataSourceTypeSchema,\n});\nexport type UpsertDocumentResponseType = z.infer<\n  typeof UpsertDocumentResponseSchema\n>;\n\nconst PostParentsResponseSchema = z.object({\n  updated: z.boolean(),\n});\nexport type PostParentsResponseType = z.infer<typeof PostParentsResponseSchema>;\n\nconst GetDocumentsResponseSchema = z.object({\n  documents: z.array(CoreAPIDocumentSchema),\n  total: z.number(),\n});\n\nexport type GetDocumentsResponseType = z.infer<\n  typeof GetDocumentsResponseSchema\n>;\n\nconst GetTableRowsResponseSchema = z.object({\n  row: CoreAPIRowSchema,\n});\n\nexport type GetTableRowsResponseType = z.infer<\n  typeof GetTableRowsResponseSchema\n>;\nexport const UpsertTableRowsRequestSchema = z.object({\n  rows: z.array(\n    z.object({\n      row_id: z.string(),\n      value: z.record(\n        z\n          .union([\n            z.string(),\n            z.number(),\n            z.boolean(),\n            z.object({\n              type: z.literal(\"datetime\"),\n              epoch: z.number(),\n            }),\n          ])\n          .nullable()\n      ),\n    })\n  ),\n  truncate: z.boolean().optional(),\n});\n\nexport type CellValueType = z.infer<\n  typeof UpsertTableRowsRequestSchema\n>[\"rows\"][number][\"value\"][string];\n\nconst UpsertTableRowsResponseSchema = z.object({\n  table: z.object({\n    name: z.string(),\n    table_id: z.string(),\n    description: z.string(),\n    schema: CoreAPITableSchema.nullable(),\n  }),\n});\n\nexport type UpsertTableRowsResponseType = z.infer<\n  typeof UpsertTableRowsResponseSchema\n>;\n\nconst ListTableRowsResponseSchema = z.object({\n  rows: z.array(CoreAPIRowSchema),\n  offset: z.number(),\n  limit: z.number(),\n  total: z.number(),\n});\nexport type ListTableRowsResponseType = z.infer<\n  typeof ListTableRowsResponseSchema\n>;\n\nconst GetTableResponseSchema = z.object({\n  table: CoreAPITablePublicSchema,\n});\nexport type GetTableResponseType = z.infer<typeof GetTableResponseSchema>;\n\nexport const PostTableParentsRequestSchema = z.object({\n  parent_id: z.string().nullable().optional(),\n  parents: z.array(z.string()),\n});\n\nconst PostTableParentsResponseSchema = z.object({\n  updated: z.literal(true),\n});\nexport type PostTableParentsResponseType = z.infer<\n  typeof PostTableParentsResponseSchema\n>;\n\nexport const UpsertTableFromCsvRequestSchema = z.object({\n  name: z.string(),\n  description: z.string(),\n  timestamp: z.number().nullable().optional(),\n  tags: z.array(z.string()).nullable().optional(),\n  parentId: z.string().nullable().optional(),\n  parents: z.array(z.string()).nullable().optional(),\n  truncate: z.boolean(),\n  async: z.boolean().optional(),\n  title: z.string(),\n  mimeType: z.string(),\n  sourceUrl: z.string().nullable().optional(),\n  tableId: z.string(),\n  fileId: z.string(),\n  allowEmptySchema: z.boolean().optional(),\n});\n\nexport type UpsertTableFromCsvRequestType = z.infer<\n  typeof UpsertTableFromCsvRequestSchema\n>;\n\nconst PostTableCSVAsyncResponseSchema = z.object({\n  table: z.object({\n    table_id: z.string(),\n  }),\n});\nexport type PostTableCSVAsyncResponseType = z.infer<\n  typeof PostTableCSVAsyncResponseSchema\n>;\n\nconst PostTableCSVResponseSchema = z.object({\n  table: CoreAPITableSchema,\n});\nexport type PostTableCSVResponseType = z.infer<\n  typeof PostTableCSVResponseSchema\n>;\n\nconst ListTablesResponseSchema = z.object({\n  tables: z.array(CoreAPITablePublicSchema),\n});\nexport type ListTablesResponseType = z.infer<typeof ListTablesResponseSchema>;\n\nexport const UpsertDatabaseTableRequestSchema = z.object({\n  table_id: z.string().optional(),\n  name: z.string(),\n  description: z.string(),\n  timestamp: z.number().nullable().optional(),\n  tags: z.array(z.string()).nullable().optional(),\n  parent_id: z.string().nullable().optional(),\n  parents: z.array(z.string()).nullable().optional(),\n  remote_database_table_id: z.string().nullable().optional(),\n  remote_database_secret_id: z.string().nullable().optional(),\n  title: z.string(),\n  mime_type: z.string().nullable().optional(),\n  source_url: z.string().nullable().optional(),\n});\n\nexport type UpsertDatabaseTableRequestType = z.infer<\n  typeof UpsertDatabaseTableRequestSchema\n>;\n\nconst UpsertTableResponseSchema = z.object({\n  table: CoreAPITablePublicSchema,\n});\nexport type UpsertTableResponseType = z.infer<typeof UpsertTableResponseSchema>;\n\nconst SupportedUsageTablesSchema = FlexibleEnumSchema<\n  | \"users\"\n  | \"assistant_messages\"\n  | \"builders\"\n  | \"assistants\"\n  | \"feedback\"\n  | \"all\"\n>();\n\nexport type UsageTableType = z.infer<typeof SupportedUsageTablesSchema>;\n\n// Folders\nconst CoreAPIFolderSchema = z.object({\n  data_source_id: z.string(),\n  folder_id: z.string(),\n  title: z.string(),\n  parents: z.array(z.string()),\n  timestamp: z.number(),\n});\n\nexport const GetFoldersResponseSchema = z.object({\n  folders: z.array(CoreAPIFolderSchema),\n  total: z.number(),\n});\nexport type GetFoldersResponseType = z.infer<typeof GetFoldersResponseSchema>;\n\nexport const GetFolderResponseSchema = z.object({\n  folder: CoreAPIFolderSchema,\n});\nexport type GetFolderResponseType = z.infer<typeof GetFolderResponseSchema>;\n\nexport const DeleteFolderResponseSchema = z.object({\n  folder: z.object({\n    folder_id: z.string(),\n  }),\n});\nexport type DeleteFolderResponseType = z.infer<\n  typeof DeleteFolderResponseSchema\n>;\nexport const UpsertFolderResponseSchema = z.object({\n  folder: CoreAPIFolderSchema,\n  data_source: DataSourceTypeSchema,\n});\nexport type UpsertFolderResponseType = z.infer<\n  typeof UpsertFolderResponseSchema\n>;\n\nconst ProviderVisibilitySchema = FlexibleEnumSchema<\"public\" | \"private\">();\n\nexport const UpsertDataSourceFolderRequestSchema = z.object({\n  timestamp: z.number(),\n  parents: z.array(z.string()).nullable().optional(),\n  parent_id: z.string().nullable().optional(),\n  title: z.string(),\n  mime_type: z.string(),\n  source_url: z.string().nullable().optional(),\n  provider_visibility: ProviderVisibilitySchema.nullable().optional(),\n});\nexport type UpsertDataSourceFolderRequestType = z.infer<\n  typeof UpsertDataSourceFolderRequestSchema\n>;\n\nconst DateSchema = z\n  .string()\n  .refine(\n    (s): s is string => /^\\d{4}-(0[1-9]|1[0-2])(-([0-2]\\d|3[01]))?$/.test(s),\n    \"YYYY-MM or YYYY-MM-DD\"\n  );\n\nexport const GetWorkspaceUsageRequestSchema = z.union([\n  z.object({\n    start: DateSchema,\n    end: z.undefined(),\n    mode: z.literal(\"month\"),\n    table: SupportedUsageTablesSchema,\n    format: z.enum([\"csv\", \"json\"]).optional().default(\"csv\"),\n  }),\n  z.object({\n    start: DateSchema,\n    end: DateSchema,\n    mode: z.literal(\"range\"),\n    table: SupportedUsageTablesSchema,\n    format: z.enum([\"csv\", \"json\"]).optional().default(\"csv\"),\n  }),\n]);\n\nexport type GetWorkspaceUsageRequestType = z.infer<\n  typeof GetWorkspaceUsageRequestSchema\n>;\n\nexport const FileUploadUrlRequestSchema = z.object({\n  contentType: SupportedFileContentFragmentTypeSchema,\n  fileName: z.string().max(4096, \"File name must be less than 4096 characters\"),\n  fileSize: z.number(),\n  useCase: z.union([z.literal(\"conversation\"), z.literal(\"upsert_table\")]),\n  useCaseMetadata: z\n    .object({\n      conversationId: z.string(),\n    })\n    .optional(),\n});\nexport type FileUploadUrlRequestType = z.infer<\n  typeof FileUploadUrlRequestSchema\n>;\n\nconst FileTypeStatusSchema = FlexibleEnumSchema<\n  \"created\" | \"failed\" | \"ready\"\n>();\n\nconst FileTypeUseCaseSchema = FlexibleEnumSchema<\n  | \"conversation\"\n  | \"avatar\"\n  | \"tool_output\"\n  | \"upsert_document\"\n  | \"upsert_table\"\n  // See also front/types/files.ts.\n  | \"folders_document\"\n>();\n\nexport const FileTypeSchema = z.object({\n  // TODO(spolu): move this to ModelIdSchema\n  id: z.string(),\n  sId: z.string(),\n  contentType: z.string(),\n  downloadUrl: z.string().optional(),\n  fileName: z.string(),\n  fileSize: z.number(),\n  status: FileTypeStatusSchema,\n  uploadUrl: z.string().optional(),\n  publicUrl: z.string().optional(),\n  useCase: FileTypeUseCaseSchema,\n});\nexport type FileType = z.infer<typeof FileTypeSchema>;\n\nexport const FileTypeWithUploadUrlSchema = FileTypeSchema.extend({\n  uploadUrl: z.string(),\n});\n\nexport const FileUploadRequestResponseSchema = z.object({\n  file: FileTypeWithUploadUrlSchema,\n});\nexport type FileUploadRequestResponseType = z.infer<\n  typeof FileUploadRequestResponseSchema\n>;\nexport const FileUploadedRequestResponseSchema = z.object({\n  file: FileTypeSchema,\n});\nexport type FileUploadedRequestResponseType = z.infer<\n  typeof FileUploadedRequestResponseSchema\n>;\n\nexport const MeResponseSchema = z.object({\n  user: UserSchema.and(\n    z.object({\n      workspaces: WorkspaceSchema.array().or(ExtensionWorkspaceSchema.array()),\n    })\n  ),\n});\n\nexport type MeResponseType = z.infer<typeof MeResponseSchema>;\n\nexport const CancelMessageGenerationResponseSchema = z.object({\n  success: z.literal(true),\n});\n\nexport type CancelMessageGenerationResponseType = z.infer<\n  typeof CancelMessageGenerationResponseSchema\n>;\n\nexport const CancelMessageGenerationRequestSchema = z.object({\n  messageIds: z.array(z.string()),\n});\n\nexport type CancelMessageGenerationRequestType = z.infer<\n  typeof CancelMessageGenerationRequestSchema\n>;\n\n// Typeguards.\n\nexport function isAgentMention(arg: AgentMentionType): arg is AgentMentionType {\n  return (arg as AgentMentionType).configurationId !== undefined;\n}\n\nexport function assertNever(x: never): never {\n  throw new Error(\n    `${\n      typeof x === \"object\" ? JSON.stringify(x) : x\n    } is not of type never. This should never happen.`\n  );\n}\n\nexport function removeNulls<T>(arr: (T | null | undefined)[]): T[] {\n  return arr.filter((v): v is T => v !== null && v !== undefined);\n}\n\ntype ConnectorProviderDocumentType =\n  | Exclude<ConnectorProvider, \"webcrawler\">\n  | \"document\";\n\nexport function getProviderFromRetrievedDocument(\n  document: RetrievalDocumentPublicType\n): ConnectorProviderDocumentType {\n  if (document.dataSourceView) {\n    if (document.dataSourceView.dataSource.connectorProvider === \"webcrawler\") {\n      return \"document\";\n    }\n    return document.dataSourceView.dataSource.connectorProvider || \"document\";\n  }\n  return \"document\";\n}\n\nexport function getTitleFromRetrievedDocument(\n  document: RetrievalDocumentPublicType\n): string {\n  const provider = getProviderFromRetrievedDocument(document);\n\n  if (provider === \"slack\") {\n    for (const t of document.tags) {\n      if (t.startsWith(\"channelName:\")) {\n        return `#${t.substring(12)}`;\n      }\n    }\n  }\n\n  for (const t of document.tags) {\n    if (t.startsWith(\"title:\")) {\n      return t.substring(6);\n    }\n  }\n\n  return document.documentId;\n}\n\nexport const AppsCheckRequestSchema = z.object({\n  apps: z.array(\n    z.object({\n      appId: z.string(),\n      appHash: z.string(),\n    })\n  ),\n});\n\nexport type AppsCheckRequestType = z.infer<typeof AppsCheckRequestSchema>;\n\nexport const AppsCheckResponseSchema = z.object({\n  apps: z.array(\n    z.object({\n      appId: z.string(),\n      appHash: z.string(),\n      deployed: z.boolean(),\n    })\n  ),\n});\n\nexport type AppsCheckResponseType = z.infer<typeof AppsCheckResponseSchema>;\n\nexport const GetSpacesResponseSchema = z.object({\n  spaces: z.array(SpaceTypeSchema),\n});\n\nexport type GetSpacesResponseType = z.infer<typeof GetSpacesResponseSchema>;\n\nconst OAuthProviderSchema = FlexibleEnumSchema<\n  | \"confluence\"\n  | \"freshservice\"\n  | \"github\"\n  | \"google_drive\"\n  | \"gmail\"\n  | \"intercom\"\n  | \"jira\"\n  | \"monday\"\n  | \"notion\"\n  | \"slack\"\n  | \"gong\"\n  | \"microsoft\"\n  | \"microsoft_tools\"\n  | \"zendesk\"\n  | \"salesforce\"\n  | \"hubspot\"\n  | \"mcp\"\n  | \"mcp_static\"\n>();\n\nconst InternalAllowedIconSchema = FlexibleEnumSchema<\n  | \"ActionBrainIcon\"\n  | \"ActionCloudArrowLeftRightIcon\"\n  | \"ActionDocumentTextIcon\"\n  | \"ActionEmotionLaughIcon\"\n  | \"ActionGitBranchIcon\"\n  | \"ActionGlobeAltIcon\"\n  | \"ActionImageIcon\"\n  | \"ActionLightbulbIcon\"\n  | \"ActionLockIcon\"\n  | \"ActionMagnifyingGlassIcon\"\n  | \"ActionRobotIcon\"\n  | \"ActionScanIcon\"\n  | \"ActionTableIcon\"\n  | \"ActionTimeIcon\"\n  | \"CommandLineIcon\"\n  | \"GcalLogo\"\n  | \"GithubLogo\"\n  | \"GmailLogo\"\n  | \"GoogleSpreadsheetLogo\"\n  | \"FreshserviceLogo\"\n  | \"HubspotLogo\"\n  | \"OutlookLogo\"\n  | \"JiraLogo\"\n  | \"LinearLogo\"\n  | \"MondayLogo\"\n  | \"NotionLogo\"\n  | \"SalesforceLogo\"\n  | \"SlackLogo\"\n  | \"StripeLogo\"\n>();\n\nconst CustomServerIconSchema = FlexibleEnumSchema<\n  | \"ActionArmchairIcon\"\n  | \"ActionArrowDownOnSquareIcon\"\n  | \"ActionArrowUpOnSquareIcon\"\n  | \"ActionAttachmentIcon\"\n  | \"ActionBankIcon\"\n  | \"ActionBarcodeIcon\"\n  | \"ActionBeerIcon\"\n  | \"ActionBookOpenIcon\"\n  | \"ActionBracesIcon\"\n  | \"ActionBrainIcon\"\n  | \"ActionBriefcaseIcon\"\n  | \"ActionBuildingIcon\"\n  | \"ActionCalculatorIcon\"\n  | \"ActionCalendarIcon\"\n  | \"ActionCalendarCheckIcon\"\n  | \"ActionCameraIcon\"\n  | \"ActionCarIcon\"\n  | \"ActionCardIcon\"\n  | \"ActionCheckCircleIcon\"\n  | \"ActionClipboardIcon\"\n  | \"ActionCloudArrowDownIcon\"\n  | \"ActionCloudArrowLeftRightIcon\"\n  | \"ActionCloudArrowUpIcon\"\n  | \"ActionCodeBlockIcon\"\n  | \"ActionCodeBoxIcon\"\n  | \"ActionCommandIcon\"\n  | \"ActionCommand1Icon\"\n  | \"ActionCommunityIcon\"\n  | \"ActionCompanyIcon\"\n  | \"ActionCubeIcon\"\n  | \"ActionCupIcon\"\n  | \"ActionCustomerServiceIcon\"\n  | \"ActionDashboardIcon\"\n  | \"ActionDatabaseIcon\"\n  | \"ActionDocumentIcon\"\n  | \"ActionDocumentPileIcon\"\n  | \"ActionDocumentPlusIcon\"\n  | \"ActionDocumentTextIcon\"\n  | \"ActionDoubleQuotesIcon\"\n  | \"ActionEmotionLaughIcon\"\n  | \"ActionExternalLinkIcon\"\n  | \"ActionEyeIcon\"\n  | \"ActionEyeSlashIcon\"\n  | \"ActionFilmIcon\"\n  | \"ActionFilterIcon\"\n  | \"ActionFingerprintIcon\"\n  | \"ActionFireIcon\"\n  | \"ActionFlagIcon\"\n  | \"ActionFlightLandIcon\"\n  | \"ActionFlightTakeoffIcon\"\n  | \"ActionFolderIcon\"\n  | \"ActionFolderAddIcon\"\n  | \"ActionFolderOpenIcon\"\n  | \"ActionFullscreenIcon\"\n  | \"ActionFullscreenExitIcon\"\n  | \"ActionGamepadIcon\"\n  | \"ActionGitBranchIcon\"\n  | \"ActionGitForkIcon\"\n  | \"ActionGlobeIcon\"\n  | \"ActionGlobeAltIcon\"\n  | \"ActionGraduationCapIcon\"\n  | \"ActionHandHeartIcon\"\n  | \"ActionHandThumbDownIcon\"\n  | \"ActionHandThumbUpIcon\"\n  | \"ActionHeartIcon\"\n  | \"ActionHomeIcon\"\n  | \"ActionHospitalIcon\"\n  | \"ActionImageIcon\"\n  | \"ActionInboxIcon\"\n  | \"ActionIncludeIcon\"\n  | \"ActionLayoutIcon\"\n  | \"ActionLightbulbIcon\"\n  | \"ActionListIcon\"\n  | \"ActionListCheckIcon\"\n  | \"ActionLockIcon\"\n  | \"ActionLogoutIcon\"\n  | \"ActionMagicIcon\"\n  | \"ActionMagnifyingGlassIcon\"\n  | \"ActionMailIcon\"\n  | \"ActionMailAiIcon\"\n  | \"ActionMailCloseIcon\"\n  | \"ActionMapIcon\"\n  | \"ActionMapPinIcon\"\n  | \"ActionMarkPenIcon\"\n  | \"ActionMedalIcon\"\n  | \"ActionMegaphoneIcon\"\n  | \"ActionMenuIcon\"\n  | \"ActionMicIcon\"\n  | \"ActionMoonIcon\"\n  | \"ActionMovieIcon\"\n  | \"ActionNumbersIcon\"\n  | \"ActionPaintIcon\"\n  | \"ActionPencilSquareIcon\"\n  | \"ActionPieChartIcon\"\n  | \"ActionPinDistanceIcon\"\n  | \"ActionPingPongIcon\"\n  | \"ActionPlanetIcon\"\n  | \"ActionPlusIcon\"\n  | \"ActionPlusCircleIcon\"\n  | \"ActionPrinterIcon\"\n  | \"ActionPushpinIcon\"\n  | \"ActionRainbowIcon\"\n  | \"ActionRobotIcon\"\n  | \"ActionRocketIcon\"\n  | \"ActionSafeIcon\"\n  | \"ActionSaveIcon\"\n  | \"ActionScalesIcon\"\n  | \"ActionScanIcon\"\n  | \"ActionSeedlingIcon\"\n  | \"ActionServerIcon\"\n  | \"ActionShakeHandsIcon\"\n  | \"ActionShipIcon\"\n  | \"ActionShirtIcon\"\n  | \"ActionShoppingBasketIcon\"\n  | \"ActionSlideshowIcon\"\n  | \"ActionSparklesIcon\"\n  | \"ActionSquare3Stack3DIcon\"\n  | \"ActionStopSignIcon\"\n  | \"ActionStoreIcon\"\n  | \"ActionSunIcon\"\n  | \"ActionSwordIcon\"\n  | \"ActionTableIcon\"\n  | \"ActionTagIcon\"\n  | \"ActionTestTubeIcon\"\n  | \"ActionTimeIcon\"\n  | \"ActionTrainIcon\"\n  | \"ActionTranslateIcon\"\n  | \"ActionTrashIcon\"\n  | \"ActionTrophyIcon\"\n  | \"ActionTShirtIcon\"\n  | \"ActionUmbrellaIcon\"\n  | \"ActionUserIcon\"\n  | \"ActionUserGroupIcon\"\n  | \"ActionVidiconIcon\"\n  | \"ActionVolumeUpIcon\"\n  | \"ActionXCircleIcon\"\n>();\n\nconst MCPServerTypeSchema = z.object({\n  sId: z.string(),\n  name: z.string(),\n  version: z.string(),\n  description: z.string(),\n  icon: z.union([InternalAllowedIconSchema, CustomServerIconSchema]),\n  authorization: z\n    .object({\n      provider: OAuthProviderSchema,\n      supported_use_cases: z.array(\n        z.enum([\"personal_actions\", \"platform_actions\"])\n      ),\n      scope: z.string().optional(),\n    })\n    .nullable(),\n  tools: z.array(\n    z.object({\n      name: z.string(),\n      description: z.string(),\n      inputSchema: z.any().optional(),\n    })\n  ),\n  availability: z.enum([\"manual\", \"auto\", \"auto_hidden_builder\"]),\n  allowMultipleInstances: z.boolean(),\n  documentationUrl: z.string().nullable(),\n});\n\nconst MCPServerViewTypeSchema = z.object({\n  id: z.number(),\n  sId: z.string(),\n  name: z.string().nullable(),\n  description: z.string().nullable(),\n  createdAt: z.number(),\n  updatedAt: z.number(),\n  spaceId: z.string(),\n  serverType: z.enum([\"remote\", \"internal\"]),\n  server: MCPServerTypeSchema,\n  oAuthUseCase: z.enum([\"personal_actions\", \"platform_actions\"]).nullable(),\n  editedByUser: EditedByUserSchema.nullable(),\n});\n\nexport type MCPServerViewType = z.infer<typeof MCPServerViewTypeSchema>;\n\nexport const GetMCPServerViewsResponseSchema = z.object({\n  success: z.literal(true),\n  serverViews: z.array(MCPServerViewTypeSchema),\n});\n\nexport type GetMCPServerViewsResponseType = z.infer<\n  typeof GetMCPServerViewsResponseSchema\n>;\n\nexport const GetMCPServerViewsQuerySchema = z.object({\n  includeAuto: z\n    .enum([\"true\", \"false\"])\n    .transform((val) => val === \"true\")\n    .optional(),\n});\n\nexport type GetMCPServerViewsQueryType = z.infer<\n  typeof GetMCPServerViewsQuerySchema\n>;\n\nexport const BaseSearchBodySchema = z.object({\n  viewType: ContentNodesViewTypeSchema,\n  spaceIds: z.array(z.string()),\n  includeDataSources: z.boolean(),\n  limit: z.number(),\n});\n\nconst TextSearchBodySchema = z.intersection(\n  BaseSearchBodySchema,\n  z.object({\n    query: z.string(),\n    nodeIds: z.undefined().optional(),\n    searchSourceUrls: z.boolean().optional(),\n  })\n);\n\nconst NodeIdSearchBodySchema = z.intersection(\n  BaseSearchBodySchema,\n  z.object({\n    nodeIds: z.array(z.string()),\n    query: z.undefined().optional(),\n  })\n);\n\nexport const SearchRequestBodySchema = z.union([\n  TextSearchBodySchema,\n  NodeIdSearchBodySchema,\n]);\n\nexport type SearchRequestBodyType = z.infer<typeof SearchRequestBodySchema>;\n\nexport const ContentNodeSchema = z.object({\n  expandable: z.boolean(),\n  internalId: z.string(),\n  lastUpdatedAt: z.number().nullable(),\n  mimeType: z.string(),\n  // The direct parent ID of this content node\n  parentInternalId: z.string().nullable(),\n  // permission: ConnectorPermissionSchema,\n  preventSelection: z.boolean().optional(),\n  providerVisibility: ProviderVisibilitySchema.nullable().optional(),\n  sourceUrl: z.string().nullable().optional(),\n  title: z.string(),\n  type: ContentNodeTypeSchema,\n});\n\nexport type ContentNodeType = z.infer<typeof ContentNodeSchema>;\n\nexport const ContentNodeWithParentSchema = z.intersection(\n  ContentNodeSchema,\n  z.object({\n    parentsInternalIds: z.array(z.string()).optional(),\n    parentTitle: z.string().optional().nullable(),\n  })\n);\n\nexport const DataSourceContentNodeSchema = z.intersection(\n  ContentNodeWithParentSchema,\n  z.object({\n    dataSource: DataSourceTypeSchema,\n    dataSourceViews: DataSourceViewSchema.array(),\n  })\n);\n\nexport type DataSourceContentNodeType = z.infer<\n  typeof DataSourceContentNodeSchema\n>;\n\nexport const DataSourceViewContentNodeSchema = z.intersection(\n  ContentNodeWithParentSchema,\n  z.object({\n    dataSourceView: DataSourceViewSchema,\n  })\n);\n\nexport type DataSourceViewContentNodeType = z.infer<\n  typeof DataSourceViewContentNodeSchema\n>;\n\nexport const SearchWarningCodeSchema = z.literal(\"truncated-query-clauses\");\n\nexport type SearchWarningCode = z.infer<typeof SearchWarningCodeSchema>;\n\nexport const PostWorkspaceSearchResponseBodySchema = z.object({\n  nodes: DataSourceContentNodeSchema.array(),\n  warningCode: SearchWarningCodeSchema.optional().nullable(),\n});\n\nexport type PostWorkspaceSearchResponseBodyType = z.infer<\n  typeof PostWorkspaceSearchResponseBodySchema\n>;\n\nexport const TOOL_RUNNING_LABEL = \"Using a tool\";\n\n// MCP Related.\n\nexport const ValidateActionResponseSchema = z.object({\n  success: z.boolean(),\n});\n\nexport type ValidateActionResponseType = z.infer<\n  typeof ValidateActionResponseSchema\n>;\n\nexport const ActionApprovalStateSchema = z.enum([\n  \"approved\",\n  \"rejected\",\n  \"always_approved\",\n]);\nexport type ActionApprovalStateType = z.infer<typeof ActionApprovalStateSchema>;\n\nexport const ValidateActionRequestBodySchema = z.object({\n  actionId: z.string(),\n  approved: ActionApprovalStateSchema,\n});\n\nexport type ValidateActionRequestBodyType = z.infer<\n  typeof ValidateActionRequestBodySchema\n>;\n\nexport const ClientSideMCPServerNameSchema = z.string().min(5).max(30);\n\nexport const PublicRegisterMCPRequestBodySchema = z.object({\n  serverName: ClientSideMCPServerNameSchema,\n});\n\nexport type PublicRegisterMCPRequestBody = z.infer<\n  typeof PublicRegisterMCPRequestBodySchema\n>;\n\nexport const PublicHeartbeatMCPRequestBodySchema = z.object({\n  serverId: z.string(),\n});\n\nexport type PublicHeartbeatMCPRequestBody = z.infer<\n  typeof PublicHeartbeatMCPRequestBodySchema\n>;\n\nexport const RegisterMCPResponseSchema = z.object({\n  expiresAt: z.string(),\n  serverId: z.string(),\n});\n\nexport type RegisterMCPResponseType = z.infer<typeof RegisterMCPResponseSchema>;\n\nexport const HeartbeatMCPResponseSchema = z.object({\n  success: z.boolean(),\n  expiresAt: z.string(),\n});\n\nexport type HeartbeatMCPResponseType = z.infer<\n  typeof HeartbeatMCPResponseSchema\n>;\n\nexport const PublicPostMCPResultsRequestBodySchema = z.object({\n  result: z.unknown(),\n  serverId: z.string(),\n});\n\nexport type PublicPostMCPResultsRequestBody = z.infer<\n  typeof PublicPostMCPResultsRequestBodySchema\n>;\n\nexport const PostMCPRequestsRequestQuerySchema = z.object({\n  serverId: z.string(),\n  lastEventId: z.string().optional(),\n});\n\nexport type PostMCPRequestsRequestQueryType = z.infer<\n  typeof PostMCPRequestsRequestQuerySchema\n>;\n\nexport const PostMCPResultsResponseSchema = z.object({\n  success: z.boolean(),\n});\n\nexport type PostMCPResultsResponseType = z.infer<\n  typeof PostMCPResultsResponseSchema\n>;\n\nconst REMOTE_MCP_TOOL_STAKE_LEVELS = [\"high\", \"low\"] as const;\nexport type RemoteMCPToolStakeLevelPublicType =\n  (typeof REMOTE_MCP_TOOL_STAKE_LEVELS)[number];\nconst MCP_TOOL_STAKE_LEVELS = [\n  ...REMOTE_MCP_TOOL_STAKE_LEVELS,\n  \"never_ask\",\n] as const;\nexport type MCPToolStakeLevelPublicType =\n  (typeof MCP_TOOL_STAKE_LEVELS)[number];\n\nconst MCP_VALIDATION_OUTPUTS = [\n  \"approved\",\n  \"rejected\",\n  \"always_approved\",\n] as const;\n\nexport type MCPValidationOutputPublicType =\n  (typeof MCP_VALIDATION_OUTPUTS)[number];\n\nexport const BlockedActionsResponseSchema = z.object({\n  blockedActions: z.array(BlockedActionExecutionSchema),\n});\n\nexport type BlockedActionsResponseType = z.infer<\n  typeof BlockedActionsResponseSchema\n>;\n\nconst MCPViewsRequestAvailabilitySchema = z.enum([\"manual\", \"auto\"]);\nexport type MCPViewsRequestAvailabilityType = z.infer<\n  typeof MCPViewsRequestAvailabilitySchema\n>;\n\nexport const GetMCPViewsRequestSchema = z.object({\n  spaceIds: z.array(z.string()),\n  availabilities: z.array(MCPViewsRequestAvailabilitySchema),\n});\n\nexport type GetMCPViewsRequestType = z.infer<typeof GetMCPViewsRequestSchema>;\n\nexport const PostSpaceMembersRequestBodySchema = z.object({\n  userIds: z.array(z.string()),\n});\n\nexport interface PostSpaceMembersResponseBody {\n  space: SpaceType;\n  users: Pick<UserType, \"sId\" | \"id\" | \"email\">[];\n}\n\nexport interface GetSpaceMembersResponseBody {\n  users: Pick<UserType, \"sId\" | \"email\">[];\n}\n\nexport interface GetWorkspaceMembersResponseBody {\n  users: Pick<UserType, \"sId\" | \"id\" | \"email\">[];\n}\n","import type { Transport } from \"@modelcontextprotocol/sdk/shared/transport\";\nimport { JSONRPCMessage } from \"@modelcontextprotocol/sdk/types\";\nimport { EventSourcePolyfill } from \"event-source-polyfill\";\n\nimport { DustAPI } from \".\";\n\nconst logger = console;\n\nconst HEARTBEAT_INTERVAL_MS = 15 * 60 * 1000; // 15 minutes.\nconst RECONNECT_DELAY_MS = 5 * 1000; // 5 seconds.\n\n/**\n * Custom transport implementation for MCP\n * - Uses EventSource (SSE) to receive requests from Dust\n * - Uses fetch (HTTP POST) to send results back to Dust\n * - Supports workspace-scoped MCP registration only\n */\nexport class DustMcpServerTransport implements Transport {\n  private eventSource: EventSource | null = null;\n  private lastEventId: string | null = null;\n  private heartbeatTimer: NodeJS.Timeout | null = null;\n  private serverId: string | null = null;\n\n  // Required by Transport interface.\n  public onmessage?: (message: JSONRPCMessage) => void;\n  public onclose?: () => void;\n  public onerror?: (error: Error) => void;\n  public sessionId?: string;\n\n  constructor(\n    private readonly dustAPI: DustAPI,\n    private readonly onServerIdReceived: (serverId: string) => void,\n    private readonly serverName: string = \"Dust Extension\",\n    private readonly verbose: boolean = false,\n    private readonly eventSourceHeartbeat = 45000\n  ) {}\n\n  /**\n   * Register the MCP server with the Dust backend\n   */\n  private async registerServer(): Promise<boolean> {\n    const registerRes = await this.dustAPI.registerMCPServer({\n      serverName: this.serverName,\n    });\n    if (registerRes.isErr()) {\n      this.logError(`Failed to register MCP server: ${registerRes.error}`);\n      return false;\n    }\n\n    const { serverId } = registerRes.value;\n    this.serverId = serverId;\n    // Notify the parent that the serverId has been updated.\n    this.onServerIdReceived(serverId);\n\n    // Setup heartbeat to keep the server registration alive.\n    this.setupHeartbeat(serverId);\n\n    return true;\n  }\n\n  /**\n   * Send periodic heartbeats to keep the server registration alive.\n   */\n  private setupHeartbeat(serverId: string): void {\n    // Clear any existing heartbeat timer.\n    if (this.heartbeatTimer) {\n      clearInterval(this.heartbeatTimer);\n    }\n\n    // Set up a new heartbeat timer (every HEARTBEAT_INTERVAL_MS).\n    this.heartbeatTimer = setInterval(async () => {\n      const heartbeatRes = await this.dustAPI.heartbeatMCPServer({\n        serverId,\n      });\n\n      if (heartbeatRes.isErr() || heartbeatRes.value.success === false) {\n        const error = heartbeatRes.isErr()\n          ? heartbeatRes.error\n          : new Error(\"Server not registered\");\n\n        this.logError(`Failed to heartbeat MCP server: ${error}`);\n        await this.registerServer();\n      }\n    }, HEARTBEAT_INTERVAL_MS);\n  }\n\n  /**\n   * Start the transport and connect to the SSE endpoint\n   * This method is required by the Transport interface\n   */\n  async start(): Promise<void> {\n    try {\n      // First, register the server (or ensure it's registered).\n      const registered = await this.registerServer();\n      if (!registered) {\n        throw new Error(\"Failed to register MCP server\");\n      }\n\n      // Connect to the workspace-scoped requests endpoint.\n      await this.connectToRequestsStream();\n\n      this.logInfo(\"MCP transport started successfully\");\n    } catch (error) {\n      this.logError(\"Failed to start MCP transport:\", error);\n      this.onerror?.(error instanceof Error ? error : new Error(String(error)));\n      throw error;\n    }\n  }\n\n  /**\n   * Connect to the SSE stream for the workspace\n   */\n  private async connectToRequestsStream(): Promise<void> {\n    if (!this.serverId) {\n      this.logError(\"Server ID is not set\");\n      return;\n    }\n\n    // Close any existing connection.\n    if (this.eventSource) {\n      this.eventSource.close();\n      this.eventSource = null;\n    }\n\n    const connectionResult = await this.dustAPI.getMCPRequestsConnectionDetails(\n      {\n        serverId: this.serverId,\n        lastEventId: this.lastEventId,\n      }\n    );\n\n    if (connectionResult.isErr()) {\n      throw new Error(\n        `Failed to get connection details: ${connectionResult.error.message}`\n      );\n    }\n\n    const { url, headers } = connectionResult.value;\n\n    this.eventSource = new EventSourcePolyfill(url, {\n      headers,\n      heartbeatTimeout: this.eventSourceHeartbeat,\n    });\n\n    this.eventSource.onmessage = (event) => {\n      try {\n        if (event.data === \"done\") {\n          // Ignore this event.\n          return;\n        }\n\n        const eventData = JSON.parse(event.data);\n\n        // Save the eventId for reconnection purposes.\n        if (eventData.eventId) {\n          this.lastEventId = eventData.eventId;\n        }\n\n        // The actual request is in the data property.\n        const { data } = eventData;\n        if (!data) {\n          this.logError(\"No data field found in the event\");\n          return;\n        }\n\n        // Forward the message to the handler.\n        if (this.onmessage) {\n          this.onmessage(data);\n        } else {\n          this.logError(\n            \"ERROR: onmessage handler not set - MCP response won't be sent\"\n          );\n        }\n      } catch (error) {\n        this.logError(\"Failed to parse MCP request:\", error);\n        this.onerror?.(new Error(`Failed to parse MCP request: ${error}`));\n      }\n    };\n\n    this.eventSource.onerror = (error) => {\n      this.logError(\"Error in MCP EventSource connection:\", error);\n      this.onerror?.(new Error(`SSE connection error: ${error}`));\n\n      // Attempt to reconnect after a delay.\n      setTimeout(() => {\n        if (this.eventSource) {\n          this.logInfo(\"Attempting to reconnect to SSE...\");\n          void this.connectToRequestsStream().catch((reconnectError) => {\n            this.logError(\"Failed to reconnect:\", reconnectError);\n          });\n        }\n      }, RECONNECT_DELAY_MS); // Wait before reconnecting.\n    };\n\n    this.eventSource.onopen = () => {\n      this.logInfo(\"MCP SSE connection established\");\n    };\n\n    this.eventSource.addEventListener(\"close\", () => {\n      this.logInfo(\"MCP SSE connection closed\");\n      this.onclose?.();\n    });\n  }\n\n  /**\n   * Send a message to the server\n   * This method is required by the Transport interface\n   */\n  async send(message: JSONRPCMessage): Promise<void> {\n    if (!this.serverId) {\n      this.logError(\"Server ID is not set\");\n      return;\n    }\n\n    // Send tool results back to Dust via HTTP POST.\n    const postResultsRes = await this.dustAPI.postMCPResults({\n      serverId: this.serverId,\n      result: message,\n    });\n\n    if (postResultsRes.isErr()) {\n      this.logError(\"Failed to send MCP result:\", postResultsRes.error);\n      this.onerror?.(\n        new Error(`Failed to send MCP result: ${postResultsRes.error}`)\n      );\n    }\n  }\n\n  /**\n   * Close the transport and disconnect from the SSE endpoint\n   * This method is required by the Transport interface\n   */\n  async close(): Promise<void> {\n    // Clear heartbeat timer.\n    if (this.heartbeatTimer) {\n      clearInterval(this.heartbeatTimer);\n      this.heartbeatTimer = null;\n    }\n\n    // Close SSE connection.\n    if (this.eventSource) {\n      this.logInfo(\"Closing MCP SSE connection\");\n      this.eventSource.close();\n      this.eventSource = null;\n    }\n\n    // Trigger onclose callback.\n    this.onclose?.();\n  }\n\n  logError(...args: unknown[]): void {\n    if (this.verbose) {\n      logger.error(...args);\n    }\n  }\n\n  logInfo(...args: unknown[]): void {\n    if (this.verbose) {\n      logger.log(...args);\n    }\n  }\n\n  /**\n   * Get the current server ID\n   */\n  getServerId(): string | undefined {\n    return this.serverId ?? undefined;\n  }\n}\n","import { createParser } from \"eventsource-parser\";\nimport { z } from \"zod\";\n\nimport {\n  AgentActionSpecificEvent,\n  AgentActionSuccessEvent,\n  AgentConfigurationViewType,\n  AgentErrorEvent,\n  AgentGenerationCancelledEvent,\n  AgentMessagePublicType,\n  AgentMessageSuccessEvent,\n  APIError,\n  AppsCheckRequestType,\n  BlockedActionsResponseType,\n  CancelMessageGenerationRequestType,\n  ConversationPublicType,\n  CreateConversationResponseType,\n  DataSourceViewType,\n  DustAPICredentials,\n  DustAppConfigType,\n  DustAppRunBlockExecutionEvent,\n  DustAppRunBlockStatusEvent,\n  DustAppRunErroredEvent,\n  DustAppRunFinalEvent,\n  DustAppRunFunctionCallArgumentsTokensEvent,\n  DustAppRunFunctionCallEvent,\n  DustAppRunReasoningItemEvent,\n  DustAppRunReasoningTokensEvent,\n  DustAppRunRunStatusEvent,\n  DustAppRunTokensEvent,\n  FileUploadUrlRequestType,\n  GenerationTokensEvent,\n  GetMCPServerViewsResponseSchema,\n  HeartbeatMCPResponseType,\n  LoggerInterface,\n  PatchDataSourceViewRequestType,\n  PostMCPResultsResponseType,\n  PublicHeartbeatMCPRequestBody,\n  PublicPostContentFragmentRequestBody,\n  PublicPostConversationsRequestBody,\n  PublicPostMCPResultsRequestBody,\n  PublicPostMessageFeedbackRequestBody,\n  PublicPostMessagesRequestBody,\n  PublicRegisterMCPRequestBody,\n  RegisterMCPResponseType,\n  SearchRequestBodyType,\n  ToolErrorEvent,\n  UserMessageErrorEvent,\n  ValidateActionRequestBodyType,\n  ValidateActionResponseType,\n} from \"./types\";\nimport {\n  APIErrorSchema,\n  AppsCheckResponseSchema,\n  BlockedActionsResponseSchema,\n  CancelMessageGenerationResponseSchema,\n  CreateConversationResponseSchema,\n  CreateGenericAgentConfigurationResponseSchema,\n  DataSourceViewResponseSchema,\n  DeleteFolderResponseSchema,\n  Err,\n  FileUploadRequestResponseSchema,\n  GetActiveMemberEmailsInWorkspaceResponseSchema,\n  GetAgentConfigurationsResponseSchema,\n  GetAppsResponseSchema,\n  GetConversationResponseSchema,\n  GetConversationsResponseSchema,\n  GetDataSourcesResponseSchema,\n  GetFeedbacksResponseSchema,\n  GetSpacesResponseSchema,\n  GetWorkspaceFeatureFlagsResponseSchema,\n  GetWorkspaceVerifiedDomainsResponseSchema,\n  HeartbeatMCPResponseSchema,\n  MeResponseSchema,\n  Ok,\n  PostContentFragmentResponseSchema,\n  PostMCPResultsResponseSchema,\n  PostMessageFeedbackResponseSchema,\n  PostUserMessageResponseSchema,\n  PostWorkspaceSearchResponseBodySchema,\n  RegisterMCPResponseSchema,\n  RetryMessageResponseSchema,\n  Result,\n  RunAppResponseSchema,\n  SearchDataSourceViewsResponseSchema,\n  TokenizeResponseSchema,\n  UpsertFolderResponseSchema,\n  ValidateActionResponseSchema,\n} from \"./types\";\n\nexport * from \"./internal_mime_types\";\nexport * from \"./mcp_transport\";\nexport * from \"./output_schemas\";\nexport * from \"./types\";\n\ninterface DustResponse {\n  status: number;\n  ok: boolean;\n  url: string;\n  body: ReadableStream<Uint8Array> | string;\n}\n\n// Copied from front/hooks/useEventSource.ts\nconst DEFAULT_MAX_RECONNECT_ATTEMPTS = 10;\nconst DEFAULT_RECONNECT_DELAY = 5000;\n\ntype AgentEvent =\n  | AgentActionSpecificEvent\n  | AgentActionSuccessEvent\n  | AgentErrorEvent\n  | AgentGenerationCancelledEvent\n  | AgentMessageSuccessEvent\n  | GenerationTokensEvent\n  | UserMessageErrorEvent\n  | ToolErrorEvent;\n\nconst textFromResponse = async (response: DustResponse): Promise<string> => {\n  if (typeof response.body === \"string\") {\n    return response.body;\n  }\n\n  // Convert ReadableStream to string\n  const reader = response.body.getReader();\n  const decoder = new TextDecoder();\n  let result = \"\";\n\n  try {\n    let done = false;\n    while (!done) {\n      const { value, done: doneReading } = await reader.read();\n      done = doneReading;\n      if (value) {\n        result += decoder.decode(value, { stream: true });\n      }\n    }\n\n    result += decoder.decode();\n  } finally {\n    reader.releaseLock();\n  }\n\n  return result;\n};\n\ntype RequestMethod = \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\";\n\ntype RequestArgsType = {\n  method: RequestMethod;\n  path: string;\n  query?: URLSearchParams;\n  body?: Record<string, unknown>;\n  overrideWorkspaceId?: string;\n  signal?: AbortSignal;\n  headers?: Record<string, string>;\n  stream?: boolean;\n};\n\nexport class DustAPI {\n  _url: string;\n  _credentials: DustAPICredentials;\n  _logger: LoggerInterface;\n  _urlOverride: string | undefined | null;\n\n  /**\n   * @param credentials DustAPICrededentials\n   */\n  constructor(\n    config: {\n      url: string;\n    },\n    credentials: DustAPICredentials,\n    logger: LoggerInterface,\n    urlOverride?: string | undefined | null\n  ) {\n    this._url = config.url;\n    this._credentials = credentials;\n    this._logger = logger;\n    this._urlOverride = urlOverride;\n  }\n\n  workspaceId(): string {\n    return this._credentials.workspaceId;\n  }\n\n  setWorkspaceId(workspaceId: string) {\n    this._credentials.workspaceId = workspaceId;\n  }\n\n  apiUrl(): string {\n    return this._urlOverride ? this._urlOverride : this._url;\n  }\n\n  async getApiKey(): Promise<string | null> {\n    if (typeof this._credentials.apiKey === \"function\") {\n      return this._credentials.apiKey();\n    }\n    return this._credentials.apiKey;\n  }\n\n  async baseHeaders() {\n    const headers: RequestInit[\"headers\"] = {\n      Authorization: `Bearer ${await this.getApiKey()}`,\n    };\n    if (this._credentials.extraHeaders) {\n      Object.assign(headers, this._credentials.extraHeaders);\n    }\n    return headers;\n  }\n\n  /**\n   * Fetches the current user's information from the API.\n   *\n   * This method sends a GET request to the `/api/v1/me` endpoint with the necessary authorization\n   * headers. It then processes the response to extract the user information.  Note that this will\n   * only work if you are using an OAuth2 token. It will always fail with a workspace API key.\n   *\n   * @returns {Promise<Result<User, Error>>} A promise that resolves to a Result object containing\n   * either the user information or an error.\n   */\n  async me() {\n    // This method call directly _fetchWithError and _resultFromResponse as it's a little special:\n    // it doesn't live under the workspace resource.\n    const headers: RequestInit[\"headers\"] = {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${await this.getApiKey()}`,\n    };\n\n    const res = await this._fetchWithError(`${this.apiUrl()}/api/v1/me`, {\n      method: \"GET\",\n      headers,\n    });\n\n    const r = await this._resultFromResponse(MeResponseSchema, res);\n\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.user);\n  }\n\n  async request(args: RequestArgsType) {\n    // Conveniently clean path from any leading \"/\" just in case\n    args.path = args.path.replace(/^\\/+/, \"\");\n\n    let url = `${this.apiUrl()}/api/v1/w/${\n      args.overrideWorkspaceId ?? this.workspaceId()\n    }/${args.path}`;\n\n    if (args.query) {\n      url += `?${args.query.toString()}`;\n    }\n\n    const headers = { ...(await this.baseHeaders()), ...args.headers };\n    headers[\"Content-Type\"] = \"application/json\";\n\n    if (args.stream) {\n      headers[\"Accept\"] = \"text/event-stream\";\n    }\n\n    const res = await this._fetchWithError(url, {\n      method: args.method,\n      headers,\n      body: args.body ? JSON.stringify(args.body) : undefined,\n      signal: args.signal,\n      stream: args.stream,\n    });\n\n    return res;\n  }\n\n  /**\n   * This functions talks directly to the Dust production API to create a run.\n   *\n   * @param app DustAppType the app to run streamed\n   * @param config DustAppConfigType the app config\n   * @param inputs any[] the app inputs\n   */\n  async runApp(\n    {\n      workspaceId,\n      appId,\n      appHash,\n      appSpaceId,\n    }: {\n      workspaceId: string;\n      appId: string;\n      appSpaceId: string;\n      appHash: string;\n    },\n    config: DustAppConfigType,\n    inputs: unknown[],\n    { useWorkspaceCredentials }: { useWorkspaceCredentials: boolean } = {\n      useWorkspaceCredentials: false,\n    }\n  ) {\n    const res = await this.request({\n      overrideWorkspaceId: workspaceId,\n      path: `spaces/${appSpaceId}/apps/${appId}/runs`,\n      query: new URLSearchParams({\n        use_workspace_credentials: useWorkspaceCredentials ? \"true\" : \"false\",\n      }),\n      method: \"POST\",\n      body: {\n        specification_hash: appHash,\n        config,\n        stream: false,\n        blocking: true,\n        inputs,\n      },\n    });\n\n    const r = await this._resultFromResponse(RunAppResponseSchema, res);\n\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.run);\n  }\n\n  /**\n   * This functions talks directly to the Dust production API to create a streamed run.\n   *\n   * @param app DustAppType the app to run streamed\n   * @param config DustAppConfigType the app config\n   * @param inputs any[] the app inputs\n   */\n  async runAppStreamed(\n    {\n      workspaceId,\n      appId,\n      appHash,\n      appSpaceId,\n    }: {\n      workspaceId: string;\n      appId: string;\n      appSpaceId: string;\n      appHash: string;\n    },\n    config: DustAppConfigType,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    inputs: any[],\n    { useWorkspaceCredentials }: { useWorkspaceCredentials: boolean } = {\n      useWorkspaceCredentials: false,\n    }\n  ) {\n    const res = await this.request({\n      overrideWorkspaceId: workspaceId,\n      path: `spaces/${appSpaceId}/apps/${appId}/runs`,\n      query: new URLSearchParams({\n        use_workspace_credentials: useWorkspaceCredentials ? \"true\" : \"false\",\n      }),\n      method: \"POST\",\n      body: {\n        specification_hash: appHash,\n        config,\n        stream: true,\n        blocking: false,\n        inputs,\n      },\n      stream: true,\n    });\n\n    if (res.isErr()) {\n      return res;\n    }\n\n    /**\n     * This help functions process a streamed response in the format of the Dust API for running\n     * streamed apps.\n     *\n     * @param res an HTTP response ready to be consumed as a stream\n     */\n    async function processStreamedRunResponse(\n      res: DustResponse,\n      logger: LoggerInterface\n    ) {\n      if (!res.ok || !res.body) {\n        const text = await textFromResponse(res);\n        return new Err({\n          type: \"dust_api_error\",\n          message: `Error running streamed app: status_code=${res.status} body=${text}`,\n        });\n      }\n\n      let hasRunId = false;\n      let rejectDustRunIdPromise: (err: Error) => void;\n      let resolveDustRunIdPromise: (runId: string) => void;\n      const dustRunIdPromise = new Promise<string>((resolve, reject) => {\n        rejectDustRunIdPromise = reject;\n        resolveDustRunIdPromise = resolve;\n      });\n\n      let pendingEvents: (\n        | DustAppRunErroredEvent\n        | DustAppRunRunStatusEvent\n        | DustAppRunBlockStatusEvent\n        | DustAppRunBlockExecutionEvent\n        | DustAppRunTokensEvent\n        | DustAppRunReasoningTokensEvent\n        | DustAppRunReasoningItemEvent\n        | DustAppRunFunctionCallEvent\n        | DustAppRunFunctionCallArgumentsTokensEvent\n        | DustAppRunFinalEvent\n      )[] = [];\n\n      const parser = createParser((event) => {\n        if (event.type === \"event\") {\n          if (event.data) {\n            try {\n              const data = JSON.parse(event.data);\n\n              switch (data.type) {\n                case \"error\": {\n                  pendingEvents.push({\n                    type: \"error\",\n                    content: {\n                      code: data.content.code,\n                      message: data.content.message,\n                    },\n                  } as DustAppRunErroredEvent);\n                  break;\n                }\n                case \"run_status\": {\n                  pendingEvents.push({\n                    type: data.type,\n                    content: data.content,\n                  });\n                  break;\n                }\n                case \"block_status\": {\n                  pendingEvents.push({\n                    type: data.type,\n                    content: data.content,\n                  });\n                  break;\n                }\n                case \"block_execution\": {\n                  pendingEvents.push({\n                    type: data.type,\n                    content: data.content,\n                  });\n                  break;\n                }\n                case \"tokens\": {\n                  pendingEvents.push({\n                    type: \"tokens\",\n                    content: data.content,\n                  } as DustAppRunTokensEvent);\n                  break;\n                }\n\n                case \"reasoning_tokens\": {\n                  pendingEvents.push({\n                    type: \"reasoning_tokens\",\n                    content: data.content,\n                  } as DustAppRunReasoningTokensEvent);\n                  break;\n                }\n\n                case \"reasoning_item\": {\n                  pendingEvents.push({\n                    type: \"reasoning_item\",\n                    content: data.content,\n                  } as DustAppRunReasoningItemEvent);\n                  break;\n                }\n\n                case \"function_call\": {\n                  pendingEvents.push({\n                    type: \"function_call\",\n                    content: data.content,\n                  } as DustAppRunFunctionCallEvent);\n                  break;\n                }\n                case \"function_call_arguments_tokens\": {\n                  pendingEvents.push({\n                    type: \"function_call_arguments_tokens\",\n                    content: data.content,\n                  } as DustAppRunFunctionCallArgumentsTokensEvent);\n                  break;\n                }\n                case \"final\": {\n                  pendingEvents.push({\n                    type: \"final\",\n                  } as DustAppRunFinalEvent);\n                  break;\n                }\n              }\n              if (data.content?.run_id && !hasRunId) {\n                hasRunId = true;\n                resolveDustRunIdPromise(data.content.run_id);\n              }\n            } catch (err) {\n              logger.error(\n                { error: err },\n                \"Failed parsing chunk from Dust API\"\n              );\n            }\n          }\n        }\n      });\n\n      const streamEvents = async function* () {\n        if (!res.body || typeof res.body === \"string\") {\n          throw new Error(\n            \"Expected a stream response, but got a string or null\"\n          );\n        }\n\n        const reader = res.body.getReader();\n        const decoder = new TextDecoder();\n\n        try {\n          for (;;) {\n            const { value, done } = await reader.read();\n\n            if (value) {\n              parser.feed(decoder.decode(value, { stream: true }));\n\n              for (const event of pendingEvents) {\n                yield event;\n              }\n\n              pendingEvents = [];\n            }\n\n            if (done) {\n              break;\n            }\n          }\n\n          if (!hasRunId) {\n            // Once the stream is entirely consumed, if we haven't received a run id, reject the\n            // promise.\n            setImmediate(() => {\n              logger.error({}, \"No run id received.\");\n              rejectDustRunIdPromise(new Error(\"No run id received\"));\n            });\n          }\n        } catch (e) {\n          logger.error(\n            {\n              error: e,\n              errorStr: JSON.stringify(e),\n              errorSource: \"processStreamedRunResponse\",\n            },\n            \"DustAPI error: streaming chunks\"\n          );\n          yield {\n            type: \"error\",\n            content: {\n              code: \"stream_error\",\n              message: \"Error streaming chunks\",\n            },\n          } as DustAppRunErroredEvent;\n        }\n      };\n\n      return new Ok({\n        eventStream: streamEvents(),\n        dustRunId: dustRunIdPromise,\n      });\n    }\n\n    return processStreamedRunResponse(res.value.response, this._logger);\n  }\n\n  /**\n   * This actions talks to the Dust production API to retrieve the list of data sources of the\n   * current workspace.\n   */\n  async getDataSources() {\n    const res = await this.request({\n      method: \"GET\",\n      path: \"data_sources\",\n    });\n\n    const r = await this._resultFromResponse(GetDataSourcesResponseSchema, res);\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.data_sources);\n  }\n\n  async getAgentConfigurations({\n    view,\n    includes = [],\n  }: {\n    view?: AgentConfigurationViewType;\n    includes?: \"authors\"[];\n  }) {\n    // Function to generate query parameters.\n    function getQueryString() {\n      const params = new URLSearchParams();\n      if (typeof view === \"string\") {\n        params.append(\"view\", view);\n      }\n      if (includes.includes(\"authors\")) {\n        params.append(\"withAuthors\", \"true\");\n      }\n\n      return params.toString();\n    }\n\n    const queryString = view || includes.length > 0 ? getQueryString() : null;\n    const path = queryString\n      ? `assistant/agent_configurations?${queryString}`\n      : \"assistant/agent_configurations\";\n\n    const res = await this.request({\n      path,\n      method: \"GET\",\n    });\n\n    const r = await this._resultFromResponse(\n      GetAgentConfigurationsResponseSchema,\n      res\n    );\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.agentConfigurations);\n  }\n\n  async postContentFragment({\n    conversationId,\n    contentFragment,\n  }: {\n    conversationId: string;\n    contentFragment: PublicPostContentFragmentRequestBody;\n  }) {\n    const res = await this.request({\n      method: \"POST\",\n      path: `assistant/conversations/${conversationId}/content_fragments`,\n      body: { ...contentFragment },\n    });\n\n    const r = await this._resultFromResponse(\n      PostContentFragmentResponseSchema,\n      res\n    );\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.contentFragment);\n  }\n\n  async createGenericAgentConfiguration({\n    name,\n    description,\n    instructions,\n    emoji,\n    subAgentName,\n    subAgentDescription,\n    subAgentInstructions,\n    subAgentEmoji,\n  }: {\n    name: string;\n    description: string;\n    instructions: string;\n    emoji?: string;\n    subAgentName?: string;\n    subAgentDescription?: string;\n    subAgentInstructions?: string;\n    subAgentEmoji?: string;\n  }) {\n    const res = await this.request({\n      method: \"POST\",\n      path: \"assistant/generic_agents\",\n      body: {\n        name,\n        description,\n        instructions,\n        emoji,\n        subAgentName,\n        subAgentDescription,\n        subAgentInstructions,\n        subAgentEmoji,\n      },\n    });\n\n    const r = await this._resultFromResponse(\n      CreateGenericAgentConfigurationResponseSchema,\n      res\n    );\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value);\n  }\n\n  // When creating a conversation with a user message, the API returns only after the user message\n  // was created (and if applicable the associated agent messages).\n  async createConversation({\n    title,\n    visibility,\n    depth,\n    message,\n    contentFragment,\n    contentFragments,\n    blocking = false,\n    skipToolsValidation = false,\n    params,\n  }: PublicPostConversationsRequestBody & {\n    params?: Record<string, string>;\n  }): Promise<Result<CreateConversationResponseType, APIError>> {\n    const queryParams = new URLSearchParams(params);\n\n    const res = await this.request({\n      method: \"POST\",\n      path: \"assistant/conversations\",\n      query: queryParams.toString() ? queryParams : undefined,\n      body: {\n        title,\n        visibility,\n        depth,\n        message,\n        contentFragment,\n        contentFragments,\n        blocking,\n        skipToolsValidation,\n      },\n    });\n\n    return this._resultFromResponse(CreateConversationResponseSchema, res);\n  }\n\n  async postUserMessage({\n    conversationId,\n    message,\n  }: {\n    conversationId: string;\n    message: PublicPostMessagesRequestBody;\n  }) {\n    const res = await this.request({\n      method: \"POST\",\n      path: `assistant/conversations/${conversationId}/messages`,\n      body: { ...message },\n    });\n\n    const r = await this._resultFromResponse(\n      PostUserMessageResponseSchema,\n      res\n    );\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.message);\n  }\n\n  async streamAgentAnswerEvents({\n    conversation,\n    userMessageId,\n    signal,\n    options = {\n      maxReconnectAttempts: DEFAULT_MAX_RECONNECT_ATTEMPTS,\n      reconnectDelay: DEFAULT_RECONNECT_DELAY,\n      autoReconnect: true,\n    },\n  }: {\n    conversation: ConversationPublicType;\n    userMessageId: string;\n    signal?: AbortSignal;\n    options?: {\n      maxReconnectAttempts?: number;\n      reconnectDelay?: number;\n      autoReconnect?: boolean;\n    };\n  }): Promise<\n    Result<\n      {\n        eventStream: AsyncGenerator<AgentEvent, void, unknown>;\n      },\n      { type: string; message: string } | Error\n    >\n  > {\n    const agentMessages = conversation.content\n      .map((versions) => {\n        const m = versions[versions.length - 1];\n        return m;\n      })\n      .filter((m): m is AgentMessagePublicType => {\n        return (\n          m && m.type === \"agent_message\" && m.parentMessageId === userMessageId\n        );\n      });\n\n    if (agentMessages.length === 0) {\n      return new Err(new Error(\"Failed to retrieve agent message\"));\n    }\n\n    const agentMessage = agentMessages[0];\n    return this.streamAgentMessageEvents({\n      conversation,\n      agentMessage,\n      signal,\n      options: {\n        maxReconnectAttempts:\n          options.maxReconnectAttempts ?? DEFAULT_MAX_RECONNECT_ATTEMPTS,\n        reconnectDelay: options.reconnectDelay ?? DEFAULT_RECONNECT_DELAY,\n        autoReconnect: options.autoReconnect ?? true,\n      },\n    });\n  }\n\n  async streamAgentMessageEvents({\n    conversation,\n    agentMessage,\n    signal,\n    options,\n  }: {\n    conversation: ConversationPublicType;\n    agentMessage: AgentMessagePublicType;\n    signal?: AbortSignal;\n    options: {\n      maxReconnectAttempts: number;\n      reconnectDelay: number;\n      autoReconnect: boolean;\n    };\n  }): Promise<\n    Result<\n      {\n        eventStream: AsyncGenerator<AgentEvent, void, unknown>;\n      },\n      { type: string; message: string }\n    >\n  > {\n    const { maxReconnectAttempts, reconnectDelay, autoReconnect } = options;\n\n    let lastEventId: string | null = null;\n\n    const terminalEventTypes: AgentEvent[\"type\"][] = [\n      \"agent_message_success\",\n      \"agent_error\",\n      \"agent_generation_cancelled\",\n      \"user_message_error\",\n    ];\n\n    const createRequest = async (lastId?: string | null) => {\n      let path = `assistant/conversations/${conversation.sId}/messages/${agentMessage.sId}/events`;\n      if (lastId) {\n        path += `?lastEventId=${lastId}`;\n      }\n\n      return this.request({\n        method: \"GET\",\n        path,\n        signal,\n        stream: true,\n      });\n    };\n\n    const logger = this._logger;\n    let reconnectAttempts = 0;\n    let receivedTerminalEvent = false;\n\n    const streamEventsWithReconnection = async function* () {\n      while (true) {\n        if (signal?.aborted) {\n          return;\n        }\n\n        const res = await createRequest(lastEventId);\n\n        if (res.isErr()) {\n          const error = res.error;\n          throw new Error(`Error requesting event stream: ${error.message}`);\n        }\n\n        if (!res.value.response.ok || !res.value.response.body) {\n          throw new Error(\n            `Error requesting event stream: status_code=${res.value.response.status}`\n          );\n        }\n\n        let pendingEvents: AgentEvent[] = [];\n\n        const parser = createParser((event) => {\n          if (event.type === \"event\") {\n            if (event.data) {\n              try {\n                const eventData = JSON.parse(event.data);\n                if (eventData.eventId) {\n                  lastEventId = eventData.eventId;\n                }\n                pendingEvents.push(eventData.data);\n              } catch (err) {\n                logger.error(\n                  { error: err },\n                  \"Failed parsing chunk from Dust API\"\n                );\n              }\n            }\n          }\n        });\n\n        if (\n          !res.value.response.body ||\n          typeof res.value.response.body === \"string\"\n        ) {\n          throw new Error(\n            \"Expected a stream response, but got a string or null\"\n          );\n        }\n\n        const reader = res.value.response.body.getReader();\n        const decoder = new TextDecoder();\n\n        try {\n          for (;;) {\n            const { value, done } = await reader.read();\n            if (value) {\n              parser.feed(decoder.decode(value, { stream: true }));\n\n              for (const event of pendingEvents) {\n                yield event;\n\n                if (terminalEventTypes.includes(event.type)) {\n                  receivedTerminalEvent = true;\n                }\n              }\n              pendingEvents = [];\n            }\n\n            if (done) {\n              break;\n            }\n          }\n        } catch (e) {\n          logger.error({ error: e }, \"Failed processing event stream\");\n          throw new Error(`Error processing event stream: ${e}`);\n        } finally {\n          reader.releaseLock();\n        }\n\n        // Stream ended - check if we need to reconnect\n        if (!receivedTerminalEvent && autoReconnect) {\n          reconnectAttempts += 1;\n\n          if (reconnectAttempts >= maxReconnectAttempts) {\n            throw new Error(\"Exceeded maximum reconnection attempts\");\n          }\n\n          await new Promise((resolve) => setTimeout(resolve, reconnectDelay));\n          continue;\n        }\n\n        // terminal event or autoReconnect disabled, exit the generator\n        return;\n      }\n    };\n\n    return new Ok({ eventStream: streamEventsWithReconnection() });\n  }\n\n  async cancelMessageGeneration({\n    conversationId,\n    messageIds,\n  }: {\n    conversationId: string;\n    messageIds: string[];\n  }) {\n    const res = await this.request({\n      method: \"POST\",\n      path: `assistant/conversations/${conversationId}/cancel`,\n      body: {\n        messageIds,\n      } as CancelMessageGenerationRequestType,\n    });\n\n    const r = await this._resultFromResponse(\n      CancelMessageGenerationResponseSchema,\n      res\n    );\n\n    if (r.isErr()) {\n      return r;\n    } else {\n      return new Ok(r.value);\n    }\n  }\n\n  async getConversations() {\n    const res = await this.request({\n      method: \"GET\",\n      path: `assistant/conversations`,\n    });\n\n    const r = await this._resultFromResponse(\n      GetConversationsResponseSchema,\n      res\n    );\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.conversations);\n  }\n\n  async getConversation({ conversationId }: { conversationId: string }) {\n    const res = await this.request({\n      method: \"GET\",\n      path: `assistant/conversations/${conversationId}`,\n    });\n\n    const r = await this._resultFromResponse(\n      GetConversationResponseSchema,\n      res\n    );\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.conversation);\n  }\n\n  async getConversationFeedback({\n    conversationId,\n  }: {\n    conversationId: string;\n  }) {\n    const res = await this.request({\n      method: \"GET\",\n      path: `assistant/conversations/${conversationId}/feedbacks`,\n    });\n\n    const r = await this._resultFromResponse(GetFeedbacksResponseSchema, res);\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.feedbacks);\n  }\n\n  async postFeedback(\n    conversationId: string,\n    messageId: string,\n    feedback: PublicPostMessageFeedbackRequestBody\n  ) {\n    const res = await this.request({\n      method: \"POST\",\n      path: `assistant/conversations/${conversationId}/messages/${messageId}/feedbacks`,\n      body: feedback,\n    });\n\n    return this._resultFromResponse(PostMessageFeedbackResponseSchema, res);\n  }\n\n  async deleteFeedback(conversationId: string, messageId: string) {\n    const res = await this.request({\n      method: \"DELETE\",\n      path: `assistant/conversations/${conversationId}/messages/${messageId}/feedbacks`,\n    });\n\n    return this._resultFromResponse(PostMessageFeedbackResponseSchema, res);\n  }\n\n  async tokenize(text: string, dataSourceId: string) {\n    const res = await this.request({\n      method: \"POST\",\n      path: `data_sources/${dataSourceId}/tokenize`,\n      body: { text },\n    });\n\n    const r = await this._resultFromResponse(TokenizeResponseSchema, res);\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.tokens);\n  }\n\n  async upsertFolder({\n    dataSourceId,\n    folderId,\n    timestamp,\n    title,\n    parentId,\n    parents,\n    mimeType,\n    sourceUrl,\n    providerVisibility,\n  }: {\n    dataSourceId: string;\n    folderId: string;\n    timestamp: number;\n    title: string;\n    parentId: string | null;\n    parents: string[];\n    mimeType: string;\n    sourceUrl: string | null;\n    providerVisibility: \"public\" | \"private\" | null;\n  }) {\n    const res = await this.request({\n      method: \"POST\",\n      path: `data_sources/${dataSourceId}/folders/${encodeURIComponent(\n        folderId\n      )}`,\n      body: {\n        timestamp: Math.floor(timestamp),\n        title,\n        parent_id: parentId,\n        parents,\n        mime_type: mimeType,\n        source_url: sourceUrl,\n        provider_visibility: providerVisibility,\n      },\n    });\n\n    const r = await this._resultFromResponse(UpsertFolderResponseSchema, res);\n    if (r.isErr()) {\n      return r;\n    }\n\n    return new Ok(r.value);\n  }\n\n  async deleteFolder({\n    dataSourceId,\n    folderId,\n  }: {\n    dataSourceId: string;\n    folderId: string;\n  }) {\n    const res = await this.request({\n      method: \"DELETE\",\n      path: `data_sources/${dataSourceId}/folders/${encodeURIComponent(\n        folderId\n      )}`,\n    });\n\n    const r = await this._resultFromResponse(DeleteFolderResponseSchema, res);\n    if (r.isErr()) {\n      return r;\n    }\n\n    return new Ok(r.value);\n  }\n\n  async uploadFile({\n    contentType,\n    fileName,\n    fileSize,\n    useCase,\n    useCaseMetadata,\n    fileObject,\n  }: FileUploadUrlRequestType & { fileObject: File }) {\n    const res = await this.request({\n      method: \"POST\",\n      path: \"files\",\n      body: {\n        contentType,\n        fileName,\n        fileSize,\n        useCase,\n        useCaseMetadata,\n      },\n    });\n\n    const fileRes = await this._resultFromResponse(\n      FileUploadRequestResponseSchema,\n      res\n    );\n\n    if (fileRes.isErr()) {\n      return fileRes;\n    }\n\n    const { file } = fileRes.value;\n\n    const formData = new FormData();\n    formData.append(\"file\", fileObject);\n\n    // Upload file to the obtained URL.\n    try {\n      const headers = await this.baseHeaders();\n\n      const response = await fetch(file.uploadUrl, {\n        method: \"POST\",\n        headers,\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        return new Err(\n          new Error(\n            errorData?.error?.message ||\n              `Failed to upload file: ${response.status}`\n          )\n        );\n      }\n\n      const responseData = await response.json();\n      return new Ok(responseData.file);\n    } catch (err) {\n      return new Err(\n        new Error(err instanceof Error ? err.message : \"Unknown error\")\n      );\n    }\n  }\n\n  async deleteFile({ fileID }: { fileID: string }) {\n    const res = await this.request({\n      method: \"DELETE\",\n      path: `files/${fileID}`,\n    });\n\n    return res;\n  }\n\n  async getActiveMemberEmailsInWorkspace() {\n    const res = await this.request({\n      method: \"GET\",\n      path: \"members/emails\",\n      query: new URLSearchParams({ activeOnly: \"true\" }),\n    });\n\n    const r = await this._resultFromResponse(\n      GetActiveMemberEmailsInWorkspaceResponseSchema,\n      res\n    );\n    if (r.isErr()) {\n      return r;\n    }\n\n    return new Ok(r.value.emails);\n  }\n\n  async getWorkspaceVerifiedDomains() {\n    const res = await this.request({\n      method: \"GET\",\n      path: \"verified_domains\",\n    });\n\n    const r = await this._resultFromResponse(\n      GetWorkspaceVerifiedDomainsResponseSchema,\n      res\n    );\n    if (r.isErr()) {\n      return r;\n    }\n\n    return new Ok(r.value.verified_domains);\n  }\n\n  async getWorkspaceFeatureFlags() {\n    const res = await this.request({\n      method: \"GET\",\n      path: \"feature_flags\",\n    });\n\n    const r = await this._resultFromResponse(\n      GetWorkspaceFeatureFlagsResponseSchema,\n      res\n    );\n    if (r.isErr()) {\n      return r;\n    }\n\n    return new Ok(r.value.feature_flags);\n  }\n\n  async searchDataSourceViews(searchParams: URLSearchParams) {\n    const res = await this.request({\n      method: \"GET\",\n      path: \"data_source_views/search\",\n      query: searchParams,\n    });\n\n    const r = await this._resultFromResponse(\n      SearchDataSourceViewsResponseSchema,\n      res\n    );\n    if (r.isErr()) {\n      return r;\n    }\n\n    return new Ok(r.value.data_source_views);\n  }\n\n  async patchDataSourceView(\n    dataSourceView: DataSourceViewType,\n    patch: PatchDataSourceViewRequestType\n  ) {\n    const res = await this.request({\n      method: \"PATCH\",\n      path: `spaces/${dataSourceView.spaceId}/data_source_views/${dataSourceView.sId}`,\n      body: patch,\n    });\n\n    const r = await this._resultFromResponse(DataSourceViewResponseSchema, res);\n    if (r.isErr()) {\n      return r;\n    }\n\n    return new Ok(r.value.dataSourceView);\n  }\n\n  async exportApps({ appSpaceId }: { appSpaceId: string }) {\n    const res = await this.request({\n      method: \"GET\",\n      path: `spaces/${appSpaceId}/apps/export`,\n    });\n\n    const r = await this._resultFromResponse(GetAppsResponseSchema, res);\n\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.apps);\n  }\n\n  async checkApps(apps: AppsCheckRequestType, appSpaceId: string) {\n    const res = await this.request({\n      method: \"POST\",\n      path: `spaces/${appSpaceId}/apps/check`,\n      body: apps,\n    });\n\n    const r = await this._resultFromResponse(AppsCheckResponseSchema, res);\n\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.apps);\n  }\n\n  async getSpaces() {\n    const res = await this.request({\n      method: \"GET\",\n      path: \"spaces\",\n    });\n\n    const r = await this._resultFromResponse(GetSpacesResponseSchema, res);\n\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.spaces);\n  }\n\n  async getMCPServerViews(spaceId: string, includeAuto = false) {\n    const res = await this.request({\n      method: \"GET\",\n      path: `spaces/${spaceId}/mcp_server_views`,\n      query: new URLSearchParams({ includeAuto: includeAuto.toString() }),\n    });\n\n    const r = await this._resultFromResponse(\n      GetMCPServerViewsResponseSchema,\n      res\n    );\n\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.serverViews);\n  }\n\n  async searchNodes(searchParams: SearchRequestBodyType) {\n    const res = await this.request({\n      method: \"POST\",\n      path: \"search\",\n      body: searchParams,\n    });\n\n    const r = await this._resultFromResponse(\n      PostWorkspaceSearchResponseBodySchema,\n      res\n    );\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.nodes);\n  }\n\n  async retryMessage({\n    conversationId,\n    messageId,\n    blockedOnly = false,\n  }: {\n    conversationId: string;\n    messageId: string;\n    blockedOnly?: boolean;\n  }) {\n    const query = blockedOnly \n      ? new URLSearchParams({ blocked_only: \"true\" })\n      : undefined;\n\n    const res = await this.request({\n      method: \"POST\",\n      path: `assistant/conversations/${conversationId}/messages/${messageId}/retry`,\n      query,\n    });\n\n    const r = await this._resultFromResponse(\n      RetryMessageResponseSchema,\n      res\n    );\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.message);\n  }\n\n  private async _fetchWithError(\n    url: string,\n    {\n      method = \"GET\",\n      headers = {},\n      body,\n      signal,\n      stream = false,\n    }: {\n      method?: RequestMethod;\n      headers?: HeadersInit;\n      body?: string;\n      signal?: AbortSignal;\n      stream?: boolean;\n    } = {}\n  ): Promise<Result<{ response: DustResponse; duration: number }, APIError>> {\n    const now = Date.now();\n    try {\n      const res = await fetch(url, {\n        method,\n        headers,\n        body,\n        signal,\n      });\n\n      const responseBody = stream && res.body ? res.body : await res.text();\n\n      const response: DustResponse = {\n        status: res.status,\n        url: res.url,\n        body: responseBody,\n        ok: res.ok,\n      };\n\n      return new Ok({ response, duration: Date.now() - now });\n    } catch (e) {\n      const duration = Date.now() - now;\n      const err: APIError = {\n        type: \"unexpected_network_error\",\n        message: `Unexpected network error from DustAPI: ${e}`,\n      };\n      this._logger.error(\n        {\n          dustError: err,\n          url,\n          duration,\n          connectorsError: err,\n          error: e,\n        },\n        \"DustAPI error\"\n      );\n      return new Err(err);\n    }\n  }\n\n  // MCP Related.\n\n  async getBlockedActions({\n    conversationId,\n  }: {\n    conversationId: string;\n  }): Promise<Result<BlockedActionsResponseType, APIError>> {\n    const res = await this.request({\n      method: \"GET\",\n      path: `assistant/conversations/${conversationId}/actions/blocked`,\n    });\n\n    return this._resultFromResponse(BlockedActionsResponseSchema, res);\n  }\n\n  async validateAction({\n    conversationId,\n    messageId,\n    actionId,\n    approved,\n  }: ValidateActionRequestBodyType & {\n    conversationId: string;\n    messageId: string;\n  }): Promise<Result<ValidateActionResponseType, APIError>> {\n    const res = await this.request({\n      method: \"POST\",\n      path: `assistant/conversations/${conversationId}/messages/${messageId}/validate-action`,\n      body: {\n        actionId,\n        approved,\n      },\n    });\n\n    return this._resultFromResponse(ValidateActionResponseSchema, res);\n  }\n\n  async registerMCPServer({\n    serverName,\n  }: {\n    serverName: string;\n  }): Promise<Result<RegisterMCPResponseType, APIError>> {\n    const body: PublicRegisterMCPRequestBody = {\n      serverName,\n    };\n\n    const res = await this.request({\n      method: \"POST\",\n      path: \"mcp/register\",\n      body,\n    });\n\n    return this._resultFromResponse(RegisterMCPResponseSchema, res);\n  }\n\n  async heartbeatMCPServer({\n    serverId,\n  }: {\n    serverId: string;\n  }): Promise<Result<HeartbeatMCPResponseType, APIError>> {\n    const body: PublicHeartbeatMCPRequestBody = {\n      serverId,\n    };\n\n    const res = await this.request({\n      method: \"POST\",\n      path: \"mcp/heartbeat\",\n      body,\n    });\n\n    return this._resultFromResponse(HeartbeatMCPResponseSchema, res);\n  }\n\n  async postMCPResults({\n    result,\n    serverId,\n  }: PublicPostMCPResultsRequestBody & { serverId: string }): Promise<\n    Result<PostMCPResultsResponseType, APIError>\n  > {\n    const body: PublicPostMCPResultsRequestBody = {\n      result,\n      serverId,\n    };\n\n    const res = await this.request({\n      method: \"POST\",\n      path: \"mcp/results\",\n      body,\n    });\n\n    return this._resultFromResponse(PostMCPResultsResponseSchema, res);\n  }\n\n  async getMCPRequestsConnectionDetails({\n    serverId,\n    lastEventId,\n  }: {\n    serverId: string;\n    lastEventId?: string | null;\n  }): Promise<\n    Result<{ url: string; headers: Record<string, string> }, APIError>\n  > {\n    const url = `${this.apiUrl()}/api/v1/w/${this.workspaceId()}/mcp/requests`;\n    const params = new URLSearchParams({\n      serverId,\n      ...(lastEventId ? { lastEventId } : {}),\n    });\n\n    const headers = await this.baseHeaders();\n\n    return new Ok({\n      url: `${url}?${params.toString()}`,\n      headers,\n    });\n  }\n\n  private async _resultFromResponse<T extends z.ZodTypeAny>(\n    schema: T,\n    res: Result<\n      {\n        response: DustResponse;\n        duration: number;\n      },\n      APIError\n    >\n  ): Promise<Result<z.infer<T>, APIError>> {\n    if (res.isErr()) {\n      return res;\n    }\n\n    if (res.value.response.status === 413) {\n      const err: APIError = {\n        type: \"content_too_large\",\n        message:\n          \"Your request content is too large, please try again with a shorter content.\",\n      };\n      this._logger.error(\n        {\n          dustError: err,\n          status: res.value.response.status,\n          url: res.value.response.url,\n          duration: res.value.duration,\n        },\n        \"DustAPI error\"\n      );\n      return new Err(err);\n    }\n\n    // We get the text and attempt to parse so that we can log the raw text in case of error (the\n    // body is already consumed by response.json() if used otherwise).\n    const text = await textFromResponse(res.value.response);\n\n    try {\n      const response = JSON.parse(text);\n      const r = schema.safeParse(response);\n      // This assume that safe parsing means a 200 status.\n      if (r.success) {\n        return new Ok(r.data as z.infer<T>);\n      } else {\n        // We couldn't parse the response directly, maybe it's an error\n        const rErr = APIErrorSchema.safeParse(response[\"error\"]);\n        if (rErr.success) {\n          // Successfully parsed an error\n          this._logger.error(\n            {\n              dustError: rErr.data,\n              status: res.value.response.status,\n              url: res.value.response.url,\n              duration: res.value.duration,\n            },\n            \"DustAPI error\"\n          );\n          return new Err(rErr.data);\n        } else {\n          // Unexpected response format (neither an error nor a valid response)\n          const err: APIError = {\n            type: \"unexpected_response_format\",\n            message:\n              `Unexpected response format from DustAPI calling ` +\n              `${res.value.response.url} : ${r.error.message}`,\n          };\n          this._logger.error(\n            {\n              dustError: err,\n              parseError: r.error.message,\n              rawText: text,\n              status: res.value.response.status,\n              url: res.value.response.url,\n              duration: res.value.duration,\n            },\n            \"DustAPI error\"\n          );\n          return new Err(err);\n        }\n      }\n    } catch (e) {\n      const err: APIError = {\n        type: \"unexpected_response_format\",\n        message:\n          `Fail to parse response from DustAPI calling ` +\n          `${res.value.response.url} : ${e}`,\n      };\n      this._logger.error(\n        {\n          dustError: err,\n          error: e,\n          rawText: text,\n          status: res.value.response.status,\n          url: res.value.response.url,\n          duration: res.value.duration,\n        },\n        \"DustAPI error\"\n      );\n      return new Err(err);\n    }\n  }\n}\n"],"names":["MCPInternalActionIconSchema","z","MCPExternalActionIconSchema","generateConnectorRelativeMimeTypes","_ref","provider","resourceTypes","reduce","acc","s","_extends2","_extends","replace","toLowerCase","DATA_SOURCE_MIME_TYPE","DATA_WAREHOUSE_MIME_TYPE","DATA_SOURCE_FOLDER_SPREADSHEET_MIME_TYPE","CONTENT_NODE_MIME_TYPES","GENERIC","DATA_SOURCE","DATA_WAREHOUSE","FOLDER","SPREADSHEET","CONFLUENCE","GITHUB","GOOGLE_DRIVE","INTERCOM","MICROSOFT","NOTION","SLACK","SNOWFLAKE","WEBCRAWLER","ZENDESK","BIGQUERY","SALESFORCE","GONG","INCLUDABLE_INTERNAL_CONTENT_NODE_MIME_TYPES","PAGE","ISSUE","DISCUSSION","CONVERSATION","ARTICLE","THREAD","MESSAGES","TICKET","generateToolMimeTypes","_ref2","category","_extends3","ErrorCode","INTERNAL_MIME_TYPES","TOOL_INPUT","TOOL_OUTPUT","INTERNAL_MIME_TYPES_VALUES","Object","values","flatMap","value","map","v","INCLUDABLE_INTERNAL_MIME_TYPES_VALUES","BaseNotificationParamsSchema","object","_meta","optional","passthrough","NotificationSchema","method","string","params","ResultSchema","BaseMetadataSchema","name","title","ResourceContentsSchema","uri","mimeType","TextResourceContentsSchema","extend","text","Base64Schema","refine","val","atob","_unused","message","BlobResourceContentsSchema","blob","ResourceSchema","description","TextContentSchema","type","literal","ImageContentSchema","data","AudioContentSchema","EmbeddedResourceSchema","resource","union","CallToolResultSchema","content","array","structuredContent","isError","ToolGeneratedFileSchema","FILE","fileId","contentType","snippet","nullable","ThinkingOutputSchema","THINKING","ReasoningSuccessOutputSchema","REASONING_SUCCESS","SqlQueryOutputSchema","SQL_QUERY","DatabaseSchemaResourceSchema","DATABASE_SCHEMA","QueryWritingInstructionsResourceSchema","QUERY_WRITING_INSTRUCTIONS","ExampleRowsResourceSchema","EXAMPLE_ROWS","SearchQueryResourceSchema","DATA_SOURCE_SEARCH_QUERY","SearchResultResourceSchema","DATA_SOURCE_SEARCH_RESULT","id","tags","ref","chunks","source","IncludeQueryResourceSchema","DATA_SOURCE_INCLUDE_QUERY","WarningResourceSchema","WARNING","warningTitle","warningData","record","unknown","IncludeResultResourceSchema","DATA_SOURCE_INCLUDE_RESULT","WebsearchQueryResourceSchema","WEBSEARCH_QUERY","WebsearchResultResourceSchema","WEBSEARCH_RESULT","reference","BrowseResultResourceSchema","BROWSE_RESULT","requestedUrl","responseCode","errorMessage","RunAgentQueryResourceSchema","RUN_AGENT_QUERY","childAgentId","RunAgentResultResourceSchema","RUN_AGENT_RESULT","conversationId","refs","href","ToolsetsResultResourceSchema","TOOLSET_LIST_RESULT","ExtractQueryResourceSchema","EXTRACT_QUERY","ExtractResultResourceSchema","EXTRACT_RESULT","NotificationImageContentSchema","NotificationCanvasFileContentSchema","updatedAt","NotificationTextContentSchema","ProgressNotificationOutputSchema","query","ProgressNotificationContentSchema","progress","number","total","progressToken","label","output","MCPProgressNotificationSchema","FlexibleEnumSchema","custom","ModelProviderIdSchema","ModelLLMIdSchema","EmbeddingProviderIdSchema","ConnectorsAPIErrorSchema","ModelIdSchema","supportedOtherFileFormats","supportedImageFileFormats","supportedOtherContentTypes","keys","supportedImageContentTypes","supportedFileExtensions","concat","supportedUploadableContentType","SupportedContentFragmentTypeSchema","SupportedFileContentFragmentTypeSchema","UserMessageOriginSchema","or","undefined","VisibilitySchema","Ok","this","_proto","prototype","isOk","isErr","Err","error","_proto2","Timezone","moment","tz","names","includes","ConnectorProvidersSchema","EditedByUserSchema","editedAt","fullName","imageUrl","email","userId","DataSourceTypeSchema","sId","createdAt","assistantDefaultSelected","dustAPIProjectId","dustAPIDataSourceId","connectorId","connectorProvider","editedByUser","DataSourceViewCategoriesSchema","BlockTypeSchema","StatusSchema","BlockRunConfigSchema","any","BlockStatusSchema","block_type","status","success_count","error_count","RunConfigSchema","blocks","TraceTypeSchema","meta","RunStatusSchema","run","RunTypeSchema","run_id","created","run_type","app_hash","specification_hash","config","traces","tuple","results","TokensClassificationSchema","GenerationTokensEventSchema","configurationId","messageId","classification","delimiterClassification","DataSourceViewKindSchema","DataSourceViewSchema","dataSource","kind","parentsIn","spaceId","RetrievalDocumentTypeSchema","offset","score","documentId","dataSourceView","sourceUrl","timestamp","WhitelistableFeaturesSchema","WorkspaceSegmentationSchema","RoleSchema","WorkspaceSchema","role","segmentation","whiteListedProviders","defaultEmbeddingProvider","ssoEnforced","ExtensionWorkspaceSchema","blacklistedDomains","UserProviderSchema","UserSchema","username","firstName","lastName","image","WebsearchResultSchema","link","MCPActionTypeSchema","mcpServerId","internalMCPServerName","agentMessageId","functionCallName","shape","GlobalAgentStatusSchema","AgentConfigurationStatusSchema","AgentConfigurationScopeSchema","AgentConfigurationViewSchema","AgentUsageTypeSchema","messageCount","conversationCount","userCount","timePeriodSec","AgentRecentAuthorsSchema","readonly","AgentModelConfigurationSchema","providerId","modelId","temperature","LightAgentConfigurationSchema","versionCreatedAt","version","versionAuthorId","instructions","model","scope","userFavorite","pictureUrl","lastAuthors","usage","maxStepsPerRun","visualizationEnabled","templateId","groupIds","requestedGroupIds","ContentFragmentContextSchema","profilePictureUrl","ContentNodeTypeSchema","ContentNodesViewTypeSchema","ContentFragmentNodeData","nodeId","nodeDataSourceViewId","nodeType","spaceName","BaseContentFragmentSchema","visibility","context","contentFragmentId","contentFragmentVersion","ContentFragmentSchema","contentFragmentType","generatedTables","textUrl","textBytes","contentNodeData","AgentMentionSchema","UserMessageContextSchema","timezone","origin","clientSideMCPServerIds","selectedMCPServerViewIds","UserMessageSchema","user","mentions","AgentMessageStatusSchema","AgentMessageTypeSchema","parentMessageId","configuration","actions","chainOfThought","rawContents","step","code","metadata","AgentMessageFeedbackSchema","thumbDirection","agentConfigurationId","agentConfigurationVersion","isConversationShared","ConversationVisibilitySchema","ConversationWithoutContentSchema","updated","owner","ConversationSchema","MCPStakeLevelSchema","MCPValidationMetadataSchema","mcpServerName","toolName","agentName","pubsubMessageId","icon","ToolExecutionBlockedStatusSchema","BlockedActionExecutionSchema","actionId","inputs","stake","CoreAPIErrorSchema","CoreAPITokenTypeSchema","APIErrorSchema","data_source_error","run_error","app_error","connectors_error","WorkspaceDomainSchema","domain","domainAutoJoinEnabled","DustAppTypeSchema","appHash","appId","workspaceId","DustAppConfigTypeSchema","DustAppRunErroredEventSchema","DustAppRunRunStatusEventSchema","DustAppRunBlockStatusEventSchema","DustAppRunBlockExecutionEventSchema","block_name","execution","DustAppRunFinalEventSchema","DustAppRunTokensEventSchema","input_index","iteration","tokens","logprobs","DustAppRunReasoningTokensEventSchema","DustAppRunReasoningItemEventSchema","item","DustAppRunFunctionCallEventSchema","function_call","DustAppRunFunctionCallArgumentsTokensEventSchema","SpaceKindSchema","SpaceTypeSchema","isRestricted","DatasetSchemaEntryType","DatasetSchema","schema","key","AppTypeSchema","savedSpecification","savedConfig","savedRun","space","datasets","coreSpecifications","AppImportTypeSchema","RunAppResponseSchema","GetDataSourcesResponseSchema","data_sources","GetOrPatchAgentConfigurationResponseSchema","agentConfiguration","PatchAgentConfigurationRequestSchema","GetAgentConfigurationsResponseSchema","agentConfigurations","CreateGenericAgentConfigurationRequestSchema","emoji","subAgentName","subAgentDescription","subAgentInstructions","subAgentEmoji","CreateGenericAgentConfigurationResponseSchema","subAgentConfiguration","PostContentFragmentResponseSchema","contentFragment","CreateConversationResponseSchema","conversation","GetFeedbacksResponseSchema","feedbacks","PublicPostMessageFeedbackRequestBodySchema","feedbackContent","PostMessageFeedbackResponseSchema","success","PostUserMessageResponseSchema","RetryMessageResponseSchema","GetConversationResponseSchema","TokenizeResponseSchema","GetActiveMemberEmailsInWorkspaceResponseSchema","emails","GetWorkspaceVerifiedDomainsResponseSchema","verified_domains","GetWorkspaceFeatureFlagsResponseSchema","feature_flags","PublicPostMessagesRequestBodySchema","intersection","min","blocking","skipToolsValidation","partial","PublicPostEditMessagesRequestBodySchema","PublicContentFragmentWithContentSchema","url","supersededContentFragmentId","PublicContentFragmentWithFileIdSchema","PublicContentFragmentWithContentNodeSchema","PublicPostContentFragmentRequestBodySchema","PublicPostConversationsRequestBodySchema","depth","contentFragments","PostConversationsResponseSchema","GetConversationsResponseSchema","conversations","SearchDataSourceViewsRequestSchema","dataSourceId","vaultId","vaultKind","SearchDataSourceViewsResponseSchema","data_source_views","ValidateMemberRequestSchema","GetAppsResponseSchema","apps","PostAppsRequestSchema","ImportAppsResponseSchema","DataSourceViewResponseSchema","PatchDataSourceViewRequestSchema","parentsToAdd","parentsToRemove","transform","o","DataSourceSearchQuerySchema","top_k","coerce","full_text","target_document_tokens","timestamp_gt","timestamp_lt","tags_in","tags_not","parents_in","parents_not","FrontDataSourceDocumentSectionSchema","lazy","prefix","sections","PostDataSourceDocumentRequestSchema","parent_id","parents","source_url","upsert_context","sync_type","section","light_document_output","async","mime_type","UpsertTableRowsRequestSchema","rows","row_id","epoch","truncate","PostTableParentsRequestSchema","UpsertTableFromCsvRequestSchema","parentId","tableId","allowEmptySchema","UpsertDatabaseTableRequestSchema","table_id","remote_database_table_id","remote_database_secret_id","SupportedUsageTablesSchema","CoreAPIFolderSchema","data_source_id","folder_id","GetFoldersResponseSchema","folders","GetFolderResponseSchema","folder","DeleteFolderResponseSchema","UpsertFolderResponseSchema","data_source","ProviderVisibilitySchema","UpsertDataSourceFolderRequestSchema","provider_visibility","DateSchema","test","GetWorkspaceUsageRequestSchema","start","end","mode","table","format","FileUploadUrlRequestSchema","fileName","max","fileSize","useCase","useCaseMetadata","FileTypeStatusSchema","FileTypeUseCaseSchema","FileTypeSchema","downloadUrl","uploadUrl","publicUrl","FileTypeWithUploadUrlSchema","FileUploadRequestResponseSchema","file","FileUploadedRequestResponseSchema","MeResponseSchema","and","workspaces","CancelMessageGenerationResponseSchema","CancelMessageGenerationRequestSchema","messageIds","getProviderFromRetrievedDocument","document","AppsCheckRequestSchema","AppsCheckResponseSchema","deployed","GetSpacesResponseSchema","spaces","OAuthProviderSchema","InternalAllowedIconSchema","CustomServerIconSchema","MCPServerTypeSchema","authorization","supported_use_cases","tools","inputSchema","availability","allowMultipleInstances","documentationUrl","MCPServerViewTypeSchema","serverType","server","oAuthUseCase","GetMCPServerViewsResponseSchema","serverViews","GetMCPServerViewsQuerySchema","includeAuto","BaseSearchBodySchema","viewType","spaceIds","includeDataSources","limit","SearchRequestBodySchema","nodeIds","searchSourceUrls","ContentNodeSchema","expandable","internalId","lastUpdatedAt","parentInternalId","preventSelection","providerVisibility","ContentNodeWithParentSchema","parentsInternalIds","parentTitle","DataSourceContentNodeSchema","dataSourceViews","DataSourceViewContentNodeSchema","SearchWarningCodeSchema","PostWorkspaceSearchResponseBodySchema","nodes","warningCode","ValidateActionResponseSchema","ActionApprovalStateSchema","ValidateActionRequestBodySchema","approved","ClientSideMCPServerNameSchema","PublicRegisterMCPRequestBodySchema","serverName","PublicHeartbeatMCPRequestBodySchema","serverId","RegisterMCPResponseSchema","expiresAt","HeartbeatMCPResponseSchema","PublicPostMCPResultsRequestBodySchema","result","PostMCPRequestsRequestQuerySchema","lastEventId","PostMCPResultsResponseSchema","BlockedActionsResponseSchema","blockedActions","MCPViewsRequestAvailabilitySchema","GetMCPViewsRequestSchema","availabilities","PostSpaceMembersRequestBodySchema","userIds","logger","console","DustMcpServerTransport","dustAPI","onServerIdReceived","verbose","eventSourceHeartbeat","eventSource","heartbeatTimer","onmessage","onclose","onerror","sessionId","registerServer","_registerServer","_asyncToGenerator","_regeneratorRuntime","mark","_callee","registerRes","wrap","_context","prev","next","registerMCPServer","sent","logError","abrupt","setupHeartbeat","stop","apply","arguments","_this","clearInterval","setInterval","_callee2","heartbeatRes","_context2","heartbeatMCPServer","Error","_start","_callee3","_this$onerror","_context3","connectToRequestsStream","logInfo","t0","call","String","_connectToRequestsStream","_callee4","connectionResult","_connectionResult$val","_this2","_context4","close","getMCPRequestsConnectionDetails","EventSourcePolyfill","headers","heartbeatTimeout","event","eventData","JSON","parse","eventId","setTimeout","reconnectError","onopen","addEventListener","send","_send","_callee5","postResultsRes","_this$onerror2","_context5","postMCPResults","_x","_close","_callee6","_this$onclose","_context6","log","getServerId","_this$serverId","textFromResponse","_ref3","response","reader","decoder","done","_yield$reader$read","body","getReader","TextDecoder","read","decode","stream","releaseLock","finish","DustAPI","credentials","urlOverride","_url","_credentials","_logger","_urlOverride","setWorkspaceId","apiUrl","getApiKey","_getApiKey","apiKey","baseHeaders","_baseHeaders","t1","Authorization","extraHeaders","assign","me","_me","res","r","_fetchWithError","_resultFromResponse","request","_request","args","_args$overrideWorkspa","path","overrideWorkspaceId","toString","t2","t3","stringify","signal","_x2","runApp","_runApp","_ref4","_temp","appSpaceId","useWorkspaceCredentials","URLSearchParams","use_workspace_credentials","_x3","_x4","_x5","_x6","runAppStreamed","_runAppStreamed","_callee9","_ref6","_temp2","processStreamedRunResponse","_processStreamedRunResponse","_context9","_callee8","hasRunId","rejectDustRunIdPromise","resolveDustRunIdPromise","dustRunIdPromise","pendingEvents","parser","streamEvents","_context8","ok","Promise","resolve","reject","createParser","_data$content","push","err","_wrapAsyncGenerator","_callee7","_yield$_awaitAsyncGen","_i","_pendingEvents","_context7","_awaitAsyncGenerator","feed","length","setImmediate","errorStr","errorSource","eventStream","dustRunId","_processStreamedRunRe","_x11","_x12","_x7","_x8","_x9","_x10","getDataSources","_getDataSources","_callee10","_context10","getAgentConfigurations","_getAgentConfigurations","_callee11","_ref8","view","_ref8$includes","getQueryString","queryString","_context11","append","_x13","postContentFragment","_postContentFragment","_callee12","_ref9","_context12","_x14","createGenericAgentConfiguration","_createGenericAgentConfiguration","_callee13","_ref10","_context13","_x15","createConversation","_createConversation","_callee14","_ref11","_ref11$blocking","_ref11$skipToolsValid","queryParams","_context14","_x16","postUserMessage","_postUserMessage","_callee15","_ref12","_context15","_x17","streamAgentAnswerEvents","_streamAgentAnswerEvents","_callee16","_ref13","_options$maxReconnect","_options$reconnectDel","_options$autoReconnec","userMessageId","_ref13$options","options","agentMessages","_context16","maxReconnectAttempts","reconnectDelay","autoReconnect","versions","filter","m","streamAgentMessageEvents","agentMessage","_x18","_streamAgentMessageEvents","_callee19","_ref14","terminalEventTypes","createRequest","reconnectAttempts","receivedTerminalEvent","streamEventsWithReconnection","_context20","_ref15","_callee17","lastId","_context17","_x20","_callee18","_loop","_ret","_context19","_yield$_awaitAsyncGen2","_iterator","_step","_context18","aborted","_createForOfIteratorHelperLoose","delegateYield","_x19","cancelMessageGeneration","_cancelMessageGeneration","_callee20","_ref16","_context21","_x21","getConversations","_getConversations","_callee21","_context22","getConversation","_getConversation","_callee22","_ref17","_context23","_x22","getConversationFeedback","_getConversationFeedback","_callee23","_ref18","_context24","_x23","postFeedback","_postFeedback","_callee24","feedback","_context25","_x24","_x25","_x26","deleteFeedback","_deleteFeedback","_callee25","_context26","_x27","_x28","tokenize","_tokenize","_callee26","_context27","_x29","_x30","upsertFolder","_upsertFolder","_callee27","_ref19","folderId","_context28","encodeURIComponent","Math","floor","_x31","deleteFolder","_deleteFolder","_callee28","_ref20","_context29","_x32","uploadFile","_uploadFile","_callee29","_ref21","fileObject","fileRes","formData","_errorData$error","errorData","_context30","FormData","fetch","json","_x33","deleteFile","_deleteFile","_callee30","_ref22","fileID","_context31","_x34","getActiveMemberEmailsInWorkspace","_getActiveMemberEmailsInWorkspace","_callee31","_context32","activeOnly","getWorkspaceVerifiedDomains","_getWorkspaceVerifiedDomains","_callee32","_context33","getWorkspaceFeatureFlags","_getWorkspaceFeatureFlags","_callee33","_context34","searchDataSourceViews","_searchDataSourceViews","_callee34","searchParams","_context35","_x35","patchDataSourceView","_patchDataSourceView","_callee35","patch","_context36","_x36","_x37","exportApps","_exportApps","_callee36","_ref23","_context37","_x38","checkApps","_checkApps","_callee37","_context38","_x39","_x40","getSpaces","_getSpaces","_callee38","_context39","getMCPServerViews","_getMCPServerViews","_callee39","_context40","_x41","_x42","searchNodes","_searchNodes","_callee40","_context41","_x43","retryMessage","_retryMessage","_callee41","_ref24","_ref24$blockedOnly","_context42","blockedOnly","blocked_only","_x44","_fetchWithError2","_callee42","_temp3","_ref25","_ref25$method","_ref25$headers","_ref25$stream","now","duration","_context43","Date","dustError","connectorsError","_x45","_x46","getBlockedActions","_getBlockedActions","_callee43","_ref26","_context44","_x47","validateAction","_validateAction","_callee44","_ref27","_context45","_x48","_registerMCPServer","_callee45","_ref28","_context46","_x49","_heartbeatMCPServer","_callee46","_ref29","_context47","_x50","_postMCPResults","_callee47","_ref30","_context48","_x51","_getMCPRequestsConnectionDetails","_callee48","_ref31","_context49","_x52","_resultFromResponse2","_callee49","rErr","_err","_err2","_context50","safeParse","parseError","rawText","_x53","_x54","x","t","startsWith","substring","_step2","_iterator2","arg","outputBlock","obj","ds","notification","arr"],"mappings":"u5RAEO,IAAMA,EAA8BC,EAACA,EAAK,KAAC,CAChD,kBACA,gCACA,yBACA,yBACA,sBACA,qBACA,kBACA,sBACA,iBACA,4BACA,kBACA,iBACA,kBACA,iBACA,kBACA,WACA,YACA,aACA,wBACA,cACA,mBACA,aACA,cACA,WACA,aACA,aACA,iBACA,YACA,eAGWC,EAA8BD,EAACA,EAAK,KAAC,CAChD,qBACA,8BACA,4BACA,uBACA,iBACA,oBACA,iBACA,qBACA,mBACA,kBACA,sBACA,qBACA,uBACA,qBACA,0BACA,mBACA,gBACA,iBACA,wBACA,sBACA,2BACA,gCACA,yBACA,sBACA,oBACA,oBACA,qBACA,sBACA,oBACA,iBACA,gBACA,4BACA,sBACA,qBACA,qBACA,yBACA,yBACA,yBACA,yBACA,yBACA,yBACA,gBACA,qBACA,iBACA,mBACA,wBACA,iBACA,iBACA,uBACA,0BACA,mBACA,sBACA,uBACA,uBACA,2BACA,oBACA,sBACA,oBACA,kBACA,qBACA,0BACA,sBACA,0BACA,wBACA,kBACA,iBACA,qBACA,kBACA,kBACA,oBACA,mBACA,sBACA,iBACA,sBACA,iBACA,mBACA,kBACA,4BACA,iBACA,mBACA,sBACA,gBACA,mBACA,oBACA,kBACA,sBACA,iBACA,gBACA,iBACA,kBACA,oBACA,kBACA,yBACA,qBACA,wBACA,qBACA,mBACA,iBACA,uBACA,oBACA,oBACA,oBACA,kBACA,mBACA,iBACA,iBACA,mBACA,iBACA,qBACA,mBACA,uBACA,iBACA,kBACA,2BACA,sBACA,qBACA,2BACA,qBACA,kBACA,gBACA,kBACA,kBACA,gBACA,qBACA,iBACA,kBACA,sBACA,kBACA,mBACA,mBACA,qBACA,iBACA,sBACA,oBACA,qBACA,sBCjJF,SAASE,EAAkCC,GAS1C,IALCC,EAAQD,EAARC,SAUA,OATaD,EAAbE,cASqBC,QACnB,SAACC,EAAKC,GAAC,IAAAC,EAAA,OAAAC,EAAA,GACFH,IAAGE,EAAAA,IACLD,GAA4BJ,wBAAAA,EAAS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"}