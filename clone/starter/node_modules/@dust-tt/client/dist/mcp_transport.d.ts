import type { Transport } from "@modelcontextprotocol/sdk/shared/transport";
import { JSONRPCMessage } from "@modelcontextprotocol/sdk/types";
import { DustAPI } from ".";
/**
 * Custom transport implementation for MCP
 * - Uses EventSource (SSE) to receive requests from Dust
 * - Uses fetch (HTTP POST) to send results back to Dust
 * - Supports workspace-scoped MCP registration only
 */
export declare class DustMcpServerTransport implements Transport {
    private readonly dustAPI;
    private readonly onServerIdReceived;
    private readonly serverName;
    private readonly verbose;
    private readonly eventSourceHeartbeat;
    private eventSource;
    private lastEventId;
    private heartbeatTimer;
    private serverId;
    onmessage?: (message: JSONRPCMessage) => void;
    onclose?: () => void;
    onerror?: (error: Error) => void;
    sessionId?: string;
    constructor(dustAPI: DustAPI, onServerIdReceived: (serverId: string) => void, serverName?: string, verbose?: boolean, eventSourceHeartbeat?: number);
    /**
     * Register the MCP server with the Dust backend
     */
    private registerServer;
    /**
     * Send periodic heartbeats to keep the server registration alive.
     */
    private setupHeartbeat;
    /**
     * Start the transport and connect to the SSE endpoint
     * This method is required by the Transport interface
     */
    start(): Promise<void>;
    /**
     * Connect to the SSE stream for the workspace
     */
    private connectToRequestsStream;
    /**
     * Send a message to the server
     * This method is required by the Transport interface
     */
    send(message: JSONRPCMessage): Promise<void>;
    /**
     * Close the transport and disconnect from the SSE endpoint
     * This method is required by the Transport interface
     */
    close(): Promise<void>;
    logError(...args: unknown[]): void;
    logInfo(...args: unknown[]): void;
    /**
     * Get the current server ID
     */
    getServerId(): string | undefined;
}
//# sourceMappingURL=mcp_transport.d.ts.map