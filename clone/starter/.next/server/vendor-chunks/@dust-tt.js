"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@dust-tt";
exports.ids = ["vendor-chunks/@dust-tt"];
exports.modules = {

/***/ "(rsc)/./node_modules/@dust-tt/client/dist/client.esm.js":
/*!*********************************************************!*\
  !*** ./node_modules/@dust-tt/client/dist/client.esm.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIErrorSchema: () => (/* binding */ APIErrorSchema),\n/* harmony export */   ActionApprovalStateSchema: () => (/* binding */ ActionApprovalStateSchema),\n/* harmony export */   AgentConfigurationViewSchema: () => (/* binding */ AgentConfigurationViewSchema),\n/* harmony export */   AppsCheckRequestSchema: () => (/* binding */ AppsCheckRequestSchema),\n/* harmony export */   AppsCheckResponseSchema: () => (/* binding */ AppsCheckResponseSchema),\n/* harmony export */   BaseSearchBodySchema: () => (/* binding */ BaseSearchBodySchema),\n/* harmony export */   BlockedActionsResponseSchema: () => (/* binding */ BlockedActionsResponseSchema),\n/* harmony export */   BrowseResultResourceSchema: () => (/* binding */ BrowseResultResourceSchema),\n/* harmony export */   CONTENT_NODE_MIME_TYPES: () => (/* binding */ CONTENT_NODE_MIME_TYPES),\n/* harmony export */   CancelMessageGenerationRequestSchema: () => (/* binding */ CancelMessageGenerationRequestSchema),\n/* harmony export */   CancelMessageGenerationResponseSchema: () => (/* binding */ CancelMessageGenerationResponseSchema),\n/* harmony export */   ClientSideMCPServerNameSchema: () => (/* binding */ ClientSideMCPServerNameSchema),\n/* harmony export */   ContentNodeSchema: () => (/* binding */ ContentNodeSchema),\n/* harmony export */   ContentNodeTypeSchema: () => (/* binding */ ContentNodeTypeSchema),\n/* harmony export */   ContentNodeWithParentSchema: () => (/* binding */ ContentNodeWithParentSchema),\n/* harmony export */   ContentNodesViewTypeSchema: () => (/* binding */ ContentNodesViewTypeSchema),\n/* harmony export */   ConversationSchema: () => (/* binding */ ConversationSchema),\n/* harmony export */   CoreAPIErrorSchema: () => (/* binding */ CoreAPIErrorSchema),\n/* harmony export */   CoreAPITokenTypeSchema: () => (/* binding */ CoreAPITokenTypeSchema),\n/* harmony export */   CreateConversationResponseSchema: () => (/* binding */ CreateConversationResponseSchema),\n/* harmony export */   CreateGenericAgentConfigurationRequestSchema: () => (/* binding */ CreateGenericAgentConfigurationRequestSchema),\n/* harmony export */   CreateGenericAgentConfigurationResponseSchema: () => (/* binding */ CreateGenericAgentConfigurationResponseSchema),\n/* harmony export */   DATA_SOURCE_FOLDER_SPREADSHEET_MIME_TYPE: () => (/* binding */ DATA_SOURCE_FOLDER_SPREADSHEET_MIME_TYPE),\n/* harmony export */   DATA_SOURCE_MIME_TYPE: () => (/* binding */ DATA_SOURCE_MIME_TYPE),\n/* harmony export */   DATA_WAREHOUSE_MIME_TYPE: () => (/* binding */ DATA_WAREHOUSE_MIME_TYPE),\n/* harmony export */   DataSourceContentNodeSchema: () => (/* binding */ DataSourceContentNodeSchema),\n/* harmony export */   DataSourceSearchQuerySchema: () => (/* binding */ DataSourceSearchQuerySchema),\n/* harmony export */   DataSourceViewContentNodeSchema: () => (/* binding */ DataSourceViewContentNodeSchema),\n/* harmony export */   DataSourceViewResponseSchema: () => (/* binding */ DataSourceViewResponseSchema),\n/* harmony export */   DatabaseSchemaResourceSchema: () => (/* binding */ DatabaseSchemaResourceSchema),\n/* harmony export */   DeleteFolderResponseSchema: () => (/* binding */ DeleteFolderResponseSchema),\n/* harmony export */   DustAPI: () => (/* binding */ DustAPI),\n/* harmony export */   DustAppConfigTypeSchema: () => (/* binding */ DustAppConfigTypeSchema),\n/* harmony export */   DustAppRunBlockExecutionEventSchema: () => (/* binding */ DustAppRunBlockExecutionEventSchema),\n/* harmony export */   DustAppRunBlockStatusEventSchema: () => (/* binding */ DustAppRunBlockStatusEventSchema),\n/* harmony export */   DustAppRunErroredEventSchema: () => (/* binding */ DustAppRunErroredEventSchema),\n/* harmony export */   DustAppRunFinalEventSchema: () => (/* binding */ DustAppRunFinalEventSchema),\n/* harmony export */   DustAppRunFunctionCallArgumentsTokensEventSchema: () => (/* binding */ DustAppRunFunctionCallArgumentsTokensEventSchema),\n/* harmony export */   DustAppRunFunctionCallEventSchema: () => (/* binding */ DustAppRunFunctionCallEventSchema),\n/* harmony export */   DustAppRunReasoningItemEventSchema: () => (/* binding */ DustAppRunReasoningItemEventSchema),\n/* harmony export */   DustAppRunReasoningTokensEventSchema: () => (/* binding */ DustAppRunReasoningTokensEventSchema),\n/* harmony export */   DustAppRunRunStatusEventSchema: () => (/* binding */ DustAppRunRunStatusEventSchema),\n/* harmony export */   DustAppRunTokensEventSchema: () => (/* binding */ DustAppRunTokensEventSchema),\n/* harmony export */   DustAppTypeSchema: () => (/* binding */ DustAppTypeSchema),\n/* harmony export */   DustMcpServerTransport: () => (/* binding */ DustMcpServerTransport),\n/* harmony export */   Err: () => (/* binding */ Err),\n/* harmony export */   ExampleRowsResourceSchema: () => (/* binding */ ExampleRowsResourceSchema),\n/* harmony export */   ExtractQueryResourceSchema: () => (/* binding */ ExtractQueryResourceSchema),\n/* harmony export */   ExtractResultResourceSchema: () => (/* binding */ ExtractResultResourceSchema),\n/* harmony export */   FileTypeSchema: () => (/* binding */ FileTypeSchema),\n/* harmony export */   FileTypeWithUploadUrlSchema: () => (/* binding */ FileTypeWithUploadUrlSchema),\n/* harmony export */   FileUploadRequestResponseSchema: () => (/* binding */ FileUploadRequestResponseSchema),\n/* harmony export */   FileUploadUrlRequestSchema: () => (/* binding */ FileUploadUrlRequestSchema),\n/* harmony export */   FileUploadedRequestResponseSchema: () => (/* binding */ FileUploadedRequestResponseSchema),\n/* harmony export */   GenerationTokensEventSchema: () => (/* binding */ GenerationTokensEventSchema),\n/* harmony export */   GetActiveMemberEmailsInWorkspaceResponseSchema: () => (/* binding */ GetActiveMemberEmailsInWorkspaceResponseSchema),\n/* harmony export */   GetAgentConfigurationsResponseSchema: () => (/* binding */ GetAgentConfigurationsResponseSchema),\n/* harmony export */   GetAppsResponseSchema: () => (/* binding */ GetAppsResponseSchema),\n/* harmony export */   GetConversationResponseSchema: () => (/* binding */ GetConversationResponseSchema),\n/* harmony export */   GetConversationsResponseSchema: () => (/* binding */ GetConversationsResponseSchema),\n/* harmony export */   GetDataSourcesResponseSchema: () => (/* binding */ GetDataSourcesResponseSchema),\n/* harmony export */   GetFeedbacksResponseSchema: () => (/* binding */ GetFeedbacksResponseSchema),\n/* harmony export */   GetFolderResponseSchema: () => (/* binding */ GetFolderResponseSchema),\n/* harmony export */   GetFoldersResponseSchema: () => (/* binding */ GetFoldersResponseSchema),\n/* harmony export */   GetMCPServerViewsQuerySchema: () => (/* binding */ GetMCPServerViewsQuerySchema),\n/* harmony export */   GetMCPServerViewsResponseSchema: () => (/* binding */ GetMCPServerViewsResponseSchema),\n/* harmony export */   GetMCPViewsRequestSchema: () => (/* binding */ GetMCPViewsRequestSchema),\n/* harmony export */   GetOrPatchAgentConfigurationResponseSchema: () => (/* binding */ GetOrPatchAgentConfigurationResponseSchema),\n/* harmony export */   GetSpacesResponseSchema: () => (/* binding */ GetSpacesResponseSchema),\n/* harmony export */   GetWorkspaceFeatureFlagsResponseSchema: () => (/* binding */ GetWorkspaceFeatureFlagsResponseSchema),\n/* harmony export */   GetWorkspaceUsageRequestSchema: () => (/* binding */ GetWorkspaceUsageRequestSchema),\n/* harmony export */   GetWorkspaceVerifiedDomainsResponseSchema: () => (/* binding */ GetWorkspaceVerifiedDomainsResponseSchema),\n/* harmony export */   HeartbeatMCPResponseSchema: () => (/* binding */ HeartbeatMCPResponseSchema),\n/* harmony export */   INCLUDABLE_INTERNAL_CONTENT_NODE_MIME_TYPES: () => (/* binding */ INCLUDABLE_INTERNAL_CONTENT_NODE_MIME_TYPES),\n/* harmony export */   INCLUDABLE_INTERNAL_MIME_TYPES_VALUES: () => (/* binding */ INCLUDABLE_INTERNAL_MIME_TYPES_VALUES),\n/* harmony export */   INTERNAL_MIME_TYPES: () => (/* binding */ INTERNAL_MIME_TYPES),\n/* harmony export */   INTERNAL_MIME_TYPES_VALUES: () => (/* binding */ INTERNAL_MIME_TYPES_VALUES),\n/* harmony export */   ImportAppsResponseSchema: () => (/* binding */ ImportAppsResponseSchema),\n/* harmony export */   IncludeQueryResourceSchema: () => (/* binding */ IncludeQueryResourceSchema),\n/* harmony export */   IncludeResultResourceSchema: () => (/* binding */ IncludeResultResourceSchema),\n/* harmony export */   MCPProgressNotificationSchema: () => (/* binding */ MCPProgressNotificationSchema),\n/* harmony export */   MeResponseSchema: () => (/* binding */ MeResponseSchema),\n/* harmony export */   NotificationCanvasFileContentSchema: () => (/* binding */ NotificationCanvasFileContentSchema),\n/* harmony export */   Ok: () => (/* binding */ Ok),\n/* harmony export */   PatchAgentConfigurationRequestSchema: () => (/* binding */ PatchAgentConfigurationRequestSchema),\n/* harmony export */   PatchDataSourceViewRequestSchema: () => (/* binding */ PatchDataSourceViewRequestSchema),\n/* harmony export */   PostAppsRequestSchema: () => (/* binding */ PostAppsRequestSchema),\n/* harmony export */   PostContentFragmentResponseSchema: () => (/* binding */ PostContentFragmentResponseSchema),\n/* harmony export */   PostConversationsResponseSchema: () => (/* binding */ PostConversationsResponseSchema),\n/* harmony export */   PostDataSourceDocumentRequestSchema: () => (/* binding */ PostDataSourceDocumentRequestSchema),\n/* harmony export */   PostMCPRequestsRequestQuerySchema: () => (/* binding */ PostMCPRequestsRequestQuerySchema),\n/* harmony export */   PostMCPResultsResponseSchema: () => (/* binding */ PostMCPResultsResponseSchema),\n/* harmony export */   PostMessageFeedbackResponseSchema: () => (/* binding */ PostMessageFeedbackResponseSchema),\n/* harmony export */   PostSpaceMembersRequestBodySchema: () => (/* binding */ PostSpaceMembersRequestBodySchema),\n/* harmony export */   PostTableParentsRequestSchema: () => (/* binding */ PostTableParentsRequestSchema),\n/* harmony export */   PostUserMessageResponseSchema: () => (/* binding */ PostUserMessageResponseSchema),\n/* harmony export */   PostWorkspaceSearchResponseBodySchema: () => (/* binding */ PostWorkspaceSearchResponseBodySchema),\n/* harmony export */   ProgressNotificationContentSchema: () => (/* binding */ ProgressNotificationContentSchema),\n/* harmony export */   ProgressNotificationOutputSchema: () => (/* binding */ ProgressNotificationOutputSchema),\n/* harmony export */   PublicContentFragmentWithContentSchema: () => (/* binding */ PublicContentFragmentWithContentSchema),\n/* harmony export */   PublicContentFragmentWithFileIdSchema: () => (/* binding */ PublicContentFragmentWithFileIdSchema),\n/* harmony export */   PublicHeartbeatMCPRequestBodySchema: () => (/* binding */ PublicHeartbeatMCPRequestBodySchema),\n/* harmony export */   PublicPostContentFragmentRequestBodySchema: () => (/* binding */ PublicPostContentFragmentRequestBodySchema),\n/* harmony export */   PublicPostConversationsRequestBodySchema: () => (/* binding */ PublicPostConversationsRequestBodySchema),\n/* harmony export */   PublicPostEditMessagesRequestBodySchema: () => (/* binding */ PublicPostEditMessagesRequestBodySchema),\n/* harmony export */   PublicPostMCPResultsRequestBodySchema: () => (/* binding */ PublicPostMCPResultsRequestBodySchema),\n/* harmony export */   PublicPostMessageFeedbackRequestBodySchema: () => (/* binding */ PublicPostMessageFeedbackRequestBodySchema),\n/* harmony export */   PublicPostMessagesRequestBodySchema: () => (/* binding */ PublicPostMessagesRequestBodySchema),\n/* harmony export */   PublicRegisterMCPRequestBodySchema: () => (/* binding */ PublicRegisterMCPRequestBodySchema),\n/* harmony export */   QueryWritingInstructionsResourceSchema: () => (/* binding */ QueryWritingInstructionsResourceSchema),\n/* harmony export */   ReasoningSuccessOutputSchema: () => (/* binding */ ReasoningSuccessOutputSchema),\n/* harmony export */   RegisterMCPResponseSchema: () => (/* binding */ RegisterMCPResponseSchema),\n/* harmony export */   RetrievalDocumentTypeSchema: () => (/* binding */ RetrievalDocumentTypeSchema),\n/* harmony export */   RetryMessageResponseSchema: () => (/* binding */ RetryMessageResponseSchema),\n/* harmony export */   RunAgentQueryResourceSchema: () => (/* binding */ RunAgentQueryResourceSchema),\n/* harmony export */   RunAgentResultResourceSchema: () => (/* binding */ RunAgentResultResourceSchema),\n/* harmony export */   RunAppResponseSchema: () => (/* binding */ RunAppResponseSchema),\n/* harmony export */   SearchDataSourceViewsRequestSchema: () => (/* binding */ SearchDataSourceViewsRequestSchema),\n/* harmony export */   SearchDataSourceViewsResponseSchema: () => (/* binding */ SearchDataSourceViewsResponseSchema),\n/* harmony export */   SearchQueryResourceSchema: () => (/* binding */ SearchQueryResourceSchema),\n/* harmony export */   SearchRequestBodySchema: () => (/* binding */ SearchRequestBodySchema),\n/* harmony export */   SearchResultResourceSchema: () => (/* binding */ SearchResultResourceSchema),\n/* harmony export */   SearchWarningCodeSchema: () => (/* binding */ SearchWarningCodeSchema),\n/* harmony export */   TOOL_RUNNING_LABEL: () => (/* binding */ TOOL_RUNNING_LABEL),\n/* harmony export */   TokenizeResponseSchema: () => (/* binding */ TokenizeResponseSchema),\n/* harmony export */   ToolsetsResultResourceSchema: () => (/* binding */ ToolsetsResultResourceSchema),\n/* harmony export */   UpsertDataSourceFolderRequestSchema: () => (/* binding */ UpsertDataSourceFolderRequestSchema),\n/* harmony export */   UpsertDatabaseTableRequestSchema: () => (/* binding */ UpsertDatabaseTableRequestSchema),\n/* harmony export */   UpsertFolderResponseSchema: () => (/* binding */ UpsertFolderResponseSchema),\n/* harmony export */   UpsertTableFromCsvRequestSchema: () => (/* binding */ UpsertTableFromCsvRequestSchema),\n/* harmony export */   UpsertTableRowsRequestSchema: () => (/* binding */ UpsertTableRowsRequestSchema),\n/* harmony export */   ValidateActionRequestBodySchema: () => (/* binding */ ValidateActionRequestBodySchema),\n/* harmony export */   ValidateActionResponseSchema: () => (/* binding */ ValidateActionResponseSchema),\n/* harmony export */   ValidateMemberRequestSchema: () => (/* binding */ ValidateMemberRequestSchema),\n/* harmony export */   WarningResourceSchema: () => (/* binding */ WarningResourceSchema),\n/* harmony export */   WebsearchQueryResourceSchema: () => (/* binding */ WebsearchQueryResourceSchema),\n/* harmony export */   WebsearchResultResourceSchema: () => (/* binding */ WebsearchResultResourceSchema),\n/* harmony export */   WebsearchResultSchema: () => (/* binding */ WebsearchResultSchema),\n/* harmony export */   WorkspaceDomainSchema: () => (/* binding */ WorkspaceDomainSchema),\n/* harmony export */   assertNever: () => (/* binding */ assertNever),\n/* harmony export */   getProviderFromRetrievedDocument: () => (/* binding */ getProviderFromRetrievedDocument),\n/* harmony export */   getTitleFromRetrievedDocument: () => (/* binding */ getTitleFromRetrievedDocument),\n/* harmony export */   isAgentMention: () => (/* binding */ isAgentMention),\n/* harmony export */   isBrowseResultResourceType: () => (/* binding */ isBrowseResultResourceType),\n/* harmony export */   isCanvasFileContentOutput: () => (/* binding */ isCanvasFileContentOutput),\n/* harmony export */   isConnectorProvider: () => (/* binding */ isConnectorProvider),\n/* harmony export */   isConnectorsAPIError: () => (/* binding */ isConnectorsAPIError),\n/* harmony export */   isDatabaseSchemaResourceType: () => (/* binding */ isDatabaseSchemaResourceType),\n/* harmony export */   isDustMimeType: () => (/* binding */ isDustMimeType),\n/* harmony export */   isExampleRowsResourceType: () => (/* binding */ isExampleRowsResourceType),\n/* harmony export */   isExtractQueryResourceType: () => (/* binding */ isExtractQueryResourceType),\n/* harmony export */   isExtractResultResourceType: () => (/* binding */ isExtractResultResourceType),\n/* harmony export */   isFolder: () => (/* binding */ isFolder),\n/* harmony export */   isImageProgressOutput: () => (/* binding */ isImageProgressOutput),\n/* harmony export */   isIncludableInternalMimeType: () => (/* binding */ isIncludableInternalMimeType),\n/* harmony export */   isIncludeQueryResourceType: () => (/* binding */ isIncludeQueryResourceType),\n/* harmony export */   isIncludeResultResourceType: () => (/* binding */ isIncludeResultResourceType),\n/* harmony export */   isMCPProgressNotificationType: () => (/* binding */ isMCPProgressNotificationType),\n/* harmony export */   isMCPServerPersonalAuthRequiredError: () => (/* binding */ isMCPServerPersonalAuthRequiredError),\n/* harmony export */   isQueryWritingInstructionsResourceType: () => (/* binding */ isQueryWritingInstructionsResourceType),\n/* harmony export */   isReasoningSuccessOutput: () => (/* binding */ isReasoningSuccessOutput),\n/* harmony export */   isResourceWithName: () => (/* binding */ isResourceWithName),\n/* harmony export */   isRunAgentQueryResourceType: () => (/* binding */ isRunAgentQueryResourceType),\n/* harmony export */   isRunAgentResultResourceType: () => (/* binding */ isRunAgentResultResourceType),\n/* harmony export */   isSearchQueryResourceType: () => (/* binding */ isSearchQueryResourceType),\n/* harmony export */   isSearchResultResourceType: () => (/* binding */ isSearchResultResourceType),\n/* harmony export */   isSqlQueryOutput: () => (/* binding */ isSqlQueryOutput),\n/* harmony export */   isSupportedFileContentType: () => (/* binding */ isSupportedFileContentType),\n/* harmony export */   isSupportedImageContentType: () => (/* binding */ isSupportedImageContentType),\n/* harmony export */   isSupportedPlainTextContentType: () => (/* binding */ isSupportedPlainTextContentType),\n/* harmony export */   isThinkingOutput: () => (/* binding */ isThinkingOutput),\n/* harmony export */   isToolGeneratedFile: () => (/* binding */ isToolGeneratedFile),\n/* harmony export */   isToolsetsResultResourceType: () => (/* binding */ isToolsetsResultResourceType),\n/* harmony export */   isWarningResourceType: () => (/* binding */ isWarningResourceType),\n/* harmony export */   isWebsearchQueryResourceType: () => (/* binding */ isWebsearchQueryResourceType),\n/* harmony export */   isWebsearchResultResourceType: () => (/* binding */ isWebsearchResultResourceType),\n/* harmony export */   isWebsite: () => (/* binding */ isWebsite),\n/* harmony export */   removeNulls: () => (/* binding */ removeNulls),\n/* harmony export */   supportedFileExtensions: () => (/* binding */ supportedFileExtensions),\n/* harmony export */   supportedImageFileFormats: () => (/* binding */ supportedImageFileFormats),\n/* harmony export */   supportedOtherFileFormats: () => (/* binding */ supportedOtherFileFormats)\n/* harmony export */ });\n/* harmony import */ var eventsource_parser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! eventsource-parser */ \"(rsc)/./node_modules/eventsource-parser/dist/index.js\");\n/* harmony import */ var moment_timezone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! moment-timezone */ \"(rsc)/./node_modules/moment-timezone/index.js\");\n/* harmony import */ var moment_timezone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(moment_timezone__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/@dust-tt/client/node_modules/zod/lib/index.mjs\");\n/* harmony import */ var event_source_polyfill__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! event-source-polyfill */ \"(rsc)/./node_modules/event-source-polyfill/src/eventsource.js\");\n/* harmony import */ var event_source_polyfill__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(event_source_polyfill__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\n\n\nfunction _OverloadYield(e, d) {\n  this.v = e, this.k = d;\n}\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) {\n  try {\n    var i = n[a](c),\n      u = i.value;\n  } catch (n) {\n    return void e(n);\n  }\n  i.done ? t(u) : Promise.resolve(u).then(r, o);\n}\nfunction _asyncToGenerator(n) {\n  return function () {\n    var t = this,\n      e = arguments;\n    return new Promise(function (r, o) {\n      var a = n.apply(t, e);\n      function _next(n) {\n        asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n);\n      }\n      function _throw(n) {\n        asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n);\n      }\n      _next(void 0);\n    });\n  };\n}\nfunction _awaitAsyncGenerator(e) {\n  return new _OverloadYield(e, 0);\n}\nfunction _createForOfIteratorHelperLoose(r, e) {\n  var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (t) return (t = t.call(r)).next.bind(t);\n  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) {\n    t && (r = t);\n    var o = 0;\n    return function () {\n      return o >= r.length ? {\n        done: !0\n      } : {\n        done: !1,\n        value: r[o++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nfunction _regeneratorRuntime() {\n  _regeneratorRuntime = function () {\n    return e;\n  };\n  var t,\n    e = {},\n    r = Object.prototype,\n    n = r.hasOwnProperty,\n    o = Object.defineProperty || function (t, e, r) {\n      t[e] = r.value;\n    },\n    i = \"function\" == typeof Symbol ? Symbol : {},\n    a = i.iterator || \"@@iterator\",\n    c = i.asyncIterator || \"@@asyncIterator\",\n    u = i.toStringTag || \"@@toStringTag\";\n  function define(t, e, r) {\n    return Object.defineProperty(t, e, {\n      value: r,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), t[e];\n  }\n  try {\n    define({}, \"\");\n  } catch (t) {\n    define = function (t, e, r) {\n      return t[e] = r;\n    };\n  }\n  function wrap(t, e, r, n) {\n    var i = e && e.prototype instanceof Generator ? e : Generator,\n      a = Object.create(i.prototype),\n      c = new Context(n || []);\n    return o(a, \"_invoke\", {\n      value: makeInvokeMethod(t, r, c)\n    }), a;\n  }\n  function tryCatch(t, e, r) {\n    try {\n      return {\n        type: \"normal\",\n        arg: t.call(e, r)\n      };\n    } catch (t) {\n      return {\n        type: \"throw\",\n        arg: t\n      };\n    }\n  }\n  e.wrap = wrap;\n  var h = \"suspendedStart\",\n    l = \"suspendedYield\",\n    f = \"executing\",\n    s = \"completed\",\n    y = {};\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  var p = {};\n  define(p, a, function () {\n    return this;\n  });\n  var d = Object.getPrototypeOf,\n    v = d && d(d(values([])));\n  v && v !== r && n.call(v, a) && (p = v);\n  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);\n  function defineIteratorMethods(t) {\n    [\"next\", \"throw\", \"return\"].forEach(function (e) {\n      define(t, e, function (t) {\n        return this._invoke(e, t);\n      });\n    });\n  }\n  function AsyncIterator(t, e) {\n    function invoke(r, o, i, a) {\n      var c = tryCatch(t[r], t, o);\n      if (\"throw\" !== c.type) {\n        var u = c.arg,\n          h = u.value;\n        return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) {\n          invoke(\"next\", t, i, a);\n        }, function (t) {\n          invoke(\"throw\", t, i, a);\n        }) : e.resolve(h).then(function (t) {\n          u.value = t, i(u);\n        }, function (t) {\n          return invoke(\"throw\", t, i, a);\n        });\n      }\n      a(c.arg);\n    }\n    var r;\n    o(this, \"_invoke\", {\n      value: function (t, n) {\n        function callInvokeWithMethodAndArg() {\n          return new e(function (e, r) {\n            invoke(t, n, e, r);\n          });\n        }\n        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      }\n    });\n  }\n  function makeInvokeMethod(e, r, n) {\n    var o = h;\n    return function (i, a) {\n      if (o === f) throw Error(\"Generator is already running\");\n      if (o === s) {\n        if (\"throw\" === i) throw a;\n        return {\n          value: t,\n          done: !0\n        };\n      }\n      for (n.method = i, n.arg = a;;) {\n        var c = n.delegate;\n        if (c) {\n          var u = maybeInvokeDelegate(c, n);\n          if (u) {\n            if (u === y) continue;\n            return u;\n          }\n        }\n        if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) {\n          if (o === h) throw o = s, n.arg;\n          n.dispatchException(n.arg);\n        } else \"return\" === n.method && n.abrupt(\"return\", n.arg);\n        o = f;\n        var p = tryCatch(e, r, n);\n        if (\"normal\" === p.type) {\n          if (o = n.done ? s : l, p.arg === y) continue;\n          return {\n            value: p.arg,\n            done: n.done\n          };\n        }\n        \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg);\n      }\n    };\n  }\n  function maybeInvokeDelegate(e, r) {\n    var n = r.method,\n      o = e.iterator[n];\n    if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y;\n    var i = tryCatch(o, e.iterator, r.arg);\n    if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y;\n    var a = i.arg;\n    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y);\n  }\n  function pushTryEntry(t) {\n    var e = {\n      tryLoc: t[0]\n    };\n    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);\n  }\n  function resetTryEntry(t) {\n    var e = t.completion || {};\n    e.type = \"normal\", delete e.arg, t.completion = e;\n  }\n  function Context(t) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], t.forEach(pushTryEntry, this), this.reset(!0);\n  }\n  function values(e) {\n    if (e || \"\" === e) {\n      var r = e[a];\n      if (r) return r.call(e);\n      if (\"function\" == typeof e.next) return e;\n      if (!isNaN(e.length)) {\n        var o = -1,\n          i = function next() {\n            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;\n            return next.value = t, next.done = !0, next;\n          };\n        return i.next = i;\n      }\n    }\n    throw new TypeError(typeof e + \" is not iterable\");\n  }\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", {\n    value: GeneratorFunctionPrototype,\n    configurable: !0\n  }), o(GeneratorFunctionPrototype, \"constructor\", {\n    value: GeneratorFunction,\n    configurable: !0\n  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) {\n    var e = \"function\" == typeof t && t.constructor;\n    return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name));\n  }, e.mark = function (t) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t;\n  }, e.awrap = function (t) {\n    return {\n      __await: t\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {\n    return this;\n  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {\n    void 0 === i && (i = Promise);\n    var a = new AsyncIterator(wrap(t, r, n, o), i);\n    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {\n      return t.done ? t.value : a.next();\n    });\n  }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () {\n    return this;\n  }), define(g, \"toString\", function () {\n    return \"[object Generator]\";\n  }), e.keys = function (t) {\n    var e = Object(t),\n      r = [];\n    for (var n in e) r.push(n);\n    return r.reverse(), function next() {\n      for (; r.length;) {\n        var t = r.pop();\n        if (t in e) return next.value = t, next.done = !1, next;\n      }\n      return next.done = !0, next;\n    };\n  }, e.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function (e) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);\n    },\n    stop: function () {\n      this.done = !0;\n      var t = this.tryEntries[0].completion;\n      if (\"throw\" === t.type) throw t.arg;\n      return this.rval;\n    },\n    dispatchException: function (e) {\n      if (this.done) throw e;\n      var r = this;\n      function handle(n, o) {\n        return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o;\n      }\n      for (var o = this.tryEntries.length - 1; o >= 0; --o) {\n        var i = this.tryEntries[o],\n          a = i.completion;\n        if (\"root\" === i.tryLoc) return handle(\"end\");\n        if (i.tryLoc <= this.prev) {\n          var c = n.call(i, \"catchLoc\"),\n            u = n.call(i, \"finallyLoc\");\n          if (c && u) {\n            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n          } else if (c) {\n            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n          } else {\n            if (!u) throw Error(\"try statement without catch or finally\");\n            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function (t, e) {\n      for (var r = this.tryEntries.length - 1; r >= 0; --r) {\n        var o = this.tryEntries[r];\n        if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) {\n          var i = o;\n          break;\n        }\n      }\n      i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);\n      var a = i ? i.completion : {};\n      return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a);\n    },\n    complete: function (t, e) {\n      if (\"throw\" === t.type) throw t.arg;\n      return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y;\n    },\n    finish: function (t) {\n      for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n        var r = this.tryEntries[e];\n        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;\n      }\n    },\n    catch: function (t) {\n      for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n        var r = this.tryEntries[e];\n        if (r.tryLoc === t) {\n          var n = r.completion;\n          if (\"throw\" === n.type) {\n            var o = n.arg;\n            resetTryEntry(r);\n          }\n          return o;\n        }\n      }\n      throw Error(\"illegal catch attempt\");\n    },\n    delegateYield: function (e, r, n) {\n      return this.delegate = {\n        iterator: values(e),\n        resultName: r,\n        nextLoc: n\n      }, \"next\" === this.method && (this.arg = t), y;\n    }\n  }, e;\n}\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n  }\n}\nfunction _wrapAsyncGenerator(e) {\n  return function () {\n    return new AsyncGenerator(e.apply(this, arguments));\n  };\n}\nfunction AsyncGenerator(e) {\n  var r, t;\n  function resume(r, t) {\n    try {\n      var n = e[r](t),\n        o = n.value,\n        u = o instanceof _OverloadYield;\n      Promise.resolve(u ? o.v : o).then(function (t) {\n        if (u) {\n          var i = \"return\" === r ? \"return\" : \"next\";\n          if (!o.k || t.done) return resume(i, t);\n          t = e[i](t).value;\n        }\n        settle(n.done ? \"return\" : \"normal\", t);\n      }, function (e) {\n        resume(\"throw\", e);\n      });\n    } catch (e) {\n      settle(\"throw\", e);\n    }\n  }\n  function settle(e, n) {\n    switch (e) {\n      case \"return\":\n        r.resolve({\n          value: n,\n          done: !0\n        });\n        break;\n      case \"throw\":\n        r.reject(n);\n        break;\n      default:\n        r.resolve({\n          value: n,\n          done: !1\n        });\n    }\n    (r = r.next) ? resume(r.key, r.arg) : t = null;\n  }\n  this._invoke = function (e, n) {\n    return new Promise(function (o, u) {\n      var i = {\n        key: e,\n        arg: n,\n        resolve: o,\n        reject: u,\n        next: null\n      };\n      t ? t = t.next = i : (r = t = i, resume(e, n));\n    });\n  }, \"function\" != typeof e.return && (this.return = void 0);\n}\nAsyncGenerator.prototype[\"function\" == typeof Symbol && Symbol.asyncIterator || \"@@asyncIterator\"] = function () {\n  return this;\n}, AsyncGenerator.prototype.next = function (e) {\n  return this._invoke(\"next\", e);\n}, AsyncGenerator.prototype.throw = function (e) {\n  return this._invoke(\"throw\", e);\n}, AsyncGenerator.prototype.return = function (e) {\n  return this._invoke(\"return\", e);\n};\n\nvar MCPInternalActionIconSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"enum\"]([\"ActionBrainIcon\", \"ActionCloudArrowLeftRightIcon\", \"ActionDocumentTextIcon\", \"ActionEmotionLaughIcon\", \"ActionGitBranchIcon\", \"ActionGlobeAltIcon\", \"ActionImageIcon\", \"ActionLightbulbIcon\", \"ActionLockIcon\", \"ActionMagnifyingGlassIcon\", \"ActionRobotIcon\", \"ActionScanIcon\", \"ActionTableIcon\", \"ActionTimeIcon\", \"CommandLineIcon\", \"GcalLogo\", \"GmailLogo\", \"GithubLogo\", \"GoogleSpreadsheetLogo\", \"HubspotLogo\", \"FreshserviceLogo\", \"MondayLogo\", \"OutlookLogo\", \"JiraLogo\", \"LinearLogo\", \"NotionLogo\", \"SalesforceLogo\", \"SlackLogo\", \"StripeLogo\"]);\nvar MCPExternalActionIconSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"enum\"]([\"ActionArmchairIcon\", \"ActionArrowDownOnSquareIcon\", \"ActionArrowUpOnSquareIcon\", \"ActionAttachmentIcon\", \"ActionBankIcon\", \"ActionBarcodeIcon\", \"ActionBeerIcon\", \"ActionBookOpenIcon\", \"ActionBracesIcon\", \"ActionBrainIcon\", \"ActionBriefcaseIcon\", \"ActionBuildingIcon\", \"ActionCalculatorIcon\", \"ActionCalendarIcon\", \"ActionCalendarCheckIcon\", \"ActionCameraIcon\", \"ActionCarIcon\", \"ActionCardIcon\", \"ActionCheckCircleIcon\", \"ActionClipboardIcon\", \"ActionCloudArrowDownIcon\", \"ActionCloudArrowLeftRightIcon\", \"ActionCloudArrowUpIcon\", \"ActionCodeBlockIcon\", \"ActionCodeBoxIcon\", \"ActionCommandIcon\", \"ActionCommand1Icon\", \"ActionCommunityIcon\", \"ActionCompanyIcon\", \"ActionCubeIcon\", \"ActionCupIcon\", \"ActionCustomerServiceIcon\", \"ActionDashboardIcon\", \"ActionDatabaseIcon\", \"ActionDocumentIcon\", \"ActionDocumentPileIcon\", \"ActionDocumentPlusIcon\", \"ActionDocumentTextIcon\", \"ActionDoubleQuotesIcon\", \"ActionEmotionLaughIcon\", \"ActionExternalLinkIcon\", \"ActionEyeIcon\", \"ActionEyeSlashIcon\", \"ActionFilmIcon\", \"ActionFilterIcon\", \"ActionFingerprintIcon\", \"ActionFireIcon\", \"ActionFlagIcon\", \"ActionFlightLandIcon\", \"ActionFlightTakeoffIcon\", \"ActionFolderIcon\", \"ActionFolderAddIcon\", \"ActionFolderOpenIcon\", \"ActionFullscreenIcon\", \"ActionFullscreenExitIcon\", \"ActionGamepadIcon\", \"ActionGitBranchIcon\", \"ActionGitForkIcon\", \"ActionGlobeIcon\", \"ActionGlobeAltIcon\", \"ActionGraduationCapIcon\", \"ActionHandHeartIcon\", \"ActionHandThumbDownIcon\", \"ActionHandThumbUpIcon\", \"ActionHeartIcon\", \"ActionHomeIcon\", \"ActionHospitalIcon\", \"ActionImageIcon\", \"ActionInboxIcon\", \"ActionIncludeIcon\", \"ActionLayoutIcon\", \"ActionLightbulbIcon\", \"ActionListIcon\", \"ActionListCheckIcon\", \"ActionLockIcon\", \"ActionLogoutIcon\", \"ActionMagicIcon\", \"ActionMagnifyingGlassIcon\", \"ActionMailIcon\", \"ActionMailAiIcon\", \"ActionMailCloseIcon\", \"ActionMapIcon\", \"ActionMapPinIcon\", \"ActionMarkPenIcon\", \"ActionMedalIcon\", \"ActionMegaphoneIcon\", \"ActionMenuIcon\", \"ActionMicIcon\", \"ActionMoonIcon\", \"ActionMovieIcon\", \"ActionNumbersIcon\", \"ActionPaintIcon\", \"ActionPencilSquareIcon\", \"ActionPieChartIcon\", \"ActionPinDistanceIcon\", \"ActionPingPongIcon\", \"ActionPlanetIcon\", \"ActionPlusIcon\", \"ActionPlusCircleIcon\", \"ActionPrinterIcon\", \"ActionPushpinIcon\", \"ActionRainbowIcon\", \"ActionRobotIcon\", \"ActionRocketIcon\", \"ActionSafeIcon\", \"ActionSaveIcon\", \"ActionScalesIcon\", \"ActionScanIcon\", \"ActionSeedlingIcon\", \"ActionServerIcon\", \"ActionShakeHandsIcon\", \"ActionShipIcon\", \"ActionShirtIcon\", \"ActionShoppingBasketIcon\", \"ActionSlideshowIcon\", \"ActionSparklesIcon\", \"ActionSquare3Stack3DIcon\", \"ActionStopSignIcon\", \"ActionStoreIcon\", \"ActionSunIcon\", \"ActionSwordIcon\", \"ActionTableIcon\", \"ActionTagIcon\", \"ActionTestTubeIcon\", \"ActionTimeIcon\", \"ActionTrainIcon\", \"ActionTranslateIcon\", \"ActionTrashIcon\", \"ActionTrophyIcon\", \"ActionTShirtIcon\", \"ActionUmbrellaIcon\", \"ActionUserIcon\", \"ActionUserGroupIcon\", \"ActionVidiconIcon\", \"ActionVolumeUpIcon\", \"ActionXCircleIcon\"]);\n\n/**\n * This function generates mime types for a given provider and resource types.\n * The mime types are in the format `application/vnd.dust.PROVIDER.RESOURCE_TYPE`.\n * Notes:\n * - The underscores in the provider name are stripped in the generated mime type.\n * - The underscores in the resource type are replaced with dashes in the generated mime type.\n */\nfunction generateConnectorRelativeMimeTypes(_ref) {\n  var provider = _ref.provider,\n    resourceTypes = _ref.resourceTypes;\n  return resourceTypes.reduce(function (acc, s) {\n    var _extends2;\n    return _extends({}, acc, (_extends2 = {}, _extends2[s] = \"application/vnd.dust.\" + provider.replace(\"_\", \"\") + \".\" + s.replace(\"_\", \"-\").toLowerCase(), _extends2));\n  }, {});\n}\n// Mime type that represents a datasource.\nvar DATA_SOURCE_MIME_TYPE = \"application/vnd.dust.datasource\";\n// Mime type that represents a data warehouse, like Snowflake or BigQuery.\nvar DATA_WAREHOUSE_MIME_TYPE = \"application/vnd.dust.data-warehouse\";\nvar DATA_SOURCE_FOLDER_SPREADSHEET_MIME_TYPE = \"application/vnd.dust.folder.spreadsheet\";\nvar CONTENT_NODE_MIME_TYPES = {\n  GENERIC: {\n    DATA_SOURCE: DATA_SOURCE_MIME_TYPE,\n    DATA_WAREHOUSE: DATA_WAREHOUSE_MIME_TYPE\n  },\n  FOLDER: {\n    SPREADSHEET: DATA_SOURCE_FOLDER_SPREADSHEET_MIME_TYPE\n  },\n  CONFLUENCE: /*#__PURE__*/generateConnectorRelativeMimeTypes({\n    provider: \"confluence\",\n    resourceTypes: [\"FOLDER\", \"PAGE\", \"SPACE\"]\n  }),\n  GITHUB: /*#__PURE__*/generateConnectorRelativeMimeTypes({\n    provider: \"github\",\n    resourceTypes: [\"REPOSITORY\", \"CODE_ROOT\", \"CODE_DIRECTORY\", \"CODE_FILE\",\n    // ISSUES is the folder containing all issues.\n    \"ISSUES\",\n    // ISSUE is a single issue.\n    \"ISSUE\",\n    // DISCUSSIONS is the folder containing all discussions.\n    \"DISCUSSIONS\",\n    // DISCUSSION is a single discussion.\n    \"DISCUSSION\"]\n  }),\n  GOOGLE_DRIVE: /*#__PURE__*/generateConnectorRelativeMimeTypes({\n    provider: \"google_drive\",\n    // Spreadsheets may contain many sheets, thus resemble folders and are stored as such, but with\n    // the special mimeType below.  For files and sheets, we keep Google's mime types.\n    resourceTypes: [\"SHARED_WITH_ME\", \"FOLDER\", \"SPREADSHEET\"]\n  }),\n  INTERCOM: /*#__PURE__*/generateConnectorRelativeMimeTypes({\n    provider: \"intercom\",\n    resourceTypes: [\"COLLECTION\", \"TEAMS_FOLDER\", \"CONVERSATION\", \"TEAM\", \"ARTICLE\", \"HELP_CENTER\"]\n  }),\n  MICROSOFT: /*#__PURE__*/generateConnectorRelativeMimeTypes({\n    provider: \"microsoft\",\n    // Spreadsheets may contain many sheets, thus resemble folders and are\n    // stored as such, but with the special mimeType below.\n    // For files and sheets, we keep Microsoft's mime types.\n    resourceTypes: [\"FOLDER\", \"SPREADSHEET\"]\n  }),\n  NOTION: /*#__PURE__*/generateConnectorRelativeMimeTypes({\n    provider: \"notion\",\n    resourceTypes: [\"UNKNOWN_FOLDER\", \"SYNCING_FOLDER\", \"DATABASE\", \"PAGE\"]\n  }),\n  SLACK: /*#__PURE__*/generateConnectorRelativeMimeTypes({\n    provider: \"slack\",\n    resourceTypes: [\"CHANNEL\", \"THREAD\", \"MESSAGES\"]\n  }),\n  SNOWFLAKE: /*#__PURE__*/generateConnectorRelativeMimeTypes({\n    provider: \"snowflake\",\n    resourceTypes: [\"DATABASE\", \"SCHEMA\", \"TABLE\"]\n  }),\n  WEBCRAWLER: /*#__PURE__*/generateConnectorRelativeMimeTypes({\n    provider: \"webcrawler\",\n    resourceTypes: [\"FOLDER\"] // pages are upserted as text/html, not an internal mime type\n  }),\n  ZENDESK: /*#__PURE__*/generateConnectorRelativeMimeTypes({\n    provider: \"zendesk\",\n    resourceTypes: [\"BRAND\", \"HELP_CENTER\", \"CATEGORY\", \"ARTICLE\",\n    // TICKETS is the folder containing all tickets.\n    \"TICKETS\",\n    // TICKET is a single ticket.\n    \"TICKET\"]\n  }),\n  BIGQUERY: /*#__PURE__*/generateConnectorRelativeMimeTypes({\n    provider: \"bigquery\",\n    resourceTypes: [\"DATABASE\", \"SCHEMA\", \"TABLE\"]\n  }),\n  SALESFORCE: /*#__PURE__*/generateConnectorRelativeMimeTypes({\n    provider: \"salesforce\",\n    resourceTypes: [\"SYNCED_QUERY_FOLDER\"]\n  }),\n  GONG: /*#__PURE__*/generateConnectorRelativeMimeTypes({\n    provider: \"gong\",\n    resourceTypes: [\"TRANSCRIPT\", \"TRANSCRIPT_FOLDER\"]\n  })\n};\nvar INCLUDABLE_INTERNAL_CONTENT_NODE_MIME_TYPES = {\n  CONFLUENCE: [CONTENT_NODE_MIME_TYPES.CONFLUENCE.PAGE],\n  GITHUB: [CONTENT_NODE_MIME_TYPES.GITHUB.ISSUE, CONTENT_NODE_MIME_TYPES.GITHUB.DISCUSSION],\n  GOOGLE_DRIVE: [],\n  INTERCOM: [CONTENT_NODE_MIME_TYPES.INTERCOM.CONVERSATION, CONTENT_NODE_MIME_TYPES.INTERCOM.ARTICLE],\n  MICROSOFT: [],\n  NOTION: [CONTENT_NODE_MIME_TYPES.NOTION.PAGE],\n  SLACK: [CONTENT_NODE_MIME_TYPES.SLACK.THREAD, CONTENT_NODE_MIME_TYPES.SLACK.MESSAGES],\n  SNOWFLAKE: [],\n  WEBCRAWLER: [],\n  ZENDESK: [CONTENT_NODE_MIME_TYPES.ZENDESK.TICKET, CONTENT_NODE_MIME_TYPES.ZENDESK.ARTICLE],\n  BIGQUERY: [],\n  SALESFORCE: [],\n  GONG: []\n};\nfunction generateToolMimeTypes(_ref2) {\n  var category = _ref2.category,\n    resourceTypes = _ref2.resourceTypes;\n  return resourceTypes.reduce(function (acc, s) {\n    var _extends3;\n    return _extends({}, acc, (_extends3 = {}, _extends3[s] = \"application/vnd.dust.\" + category.replace(/_/g, \"-\").toLowerCase() + \".\" + s.replace(/_/g, \"-\").toLowerCase(), _extends3));\n  }, {});\n}\nvar TOOL_MIME_TYPES = {\n  TOOL_INPUT: /*#__PURE__*/generateToolMimeTypes({\n    category: \"TOOL_INPUT\",\n    resourceTypes: [\"DATA_SOURCE\", \"DATA_WAREHOUSE\", \"TABLE\", \"AGENT\", \"STRING\", \"NUMBER\", \"BOOLEAN\", \"ENUM\", \"LIST\", \"REASONING_MODEL\", \"DUST_APP\", \"NULLABLE_TIME_FRAME\", \"JSON_SCHEMA\"]\n  }),\n  TOOL_OUTPUT: /*#__PURE__*/generateToolMimeTypes({\n    category: \"TOOL_OUTPUT\",\n    resourceTypes: [\"BROWSE_RESULT\", \"DATA_SOURCE_SEARCH_QUERY\", \"DATA_SOURCE_SEARCH_RESULT\", \"FILESYSTEM_PATH\", \"DATA_SOURCE_NODE_LIST\", \"DATA_SOURCE_NODE_CONTENT\", \"DATA_SOURCE_INCLUDE_QUERY\", \"DATA_SOURCE_INCLUDE_RESULT\", \"EXTRACT_QUERY\", \"EXTRACT_RESULT\",\n    // File generated by the tool.\n    \"FILE\",\n    // Final output of the reasoning when successful with the non-CoT tokens.\n    \"REASONING_SUCCESS\",\n    // Content of a SQL query formulated by the model.\n    \"SQL_QUERY\",\n    // Error when executing a query.\n    \"EXECUTE_TABLES_QUERY_ERROR\",\n    // Generic thinking tokens.\n    \"THINKING\", \"DATABASE_SCHEMA\", \"QUERY_WRITING_INSTRUCTIONS\", \"EXAMPLE_ROWS\", \"TOOL_MARKER\", \"WEBSEARCH_QUERY\", \"WEBSEARCH_RESULT\", \"RUN_AGENT_RESULT\", \"RUN_AGENT_QUERY\", \"WARNING\", \"AGENT_CREATION_RESULT\", \"TOOLSET_LIST_RESULT\", \"TOOLSET_DESCRIBE_RESULT\",\n    // Legacy, kept for backwards compatibility.\n    \"GET_DATABASE_SCHEMA_MARKER\", \"EXECUTE_TABLES_QUERY_MARKER\"]\n  })\n};\nvar INTERNAL_MIME_TYPES = /*#__PURE__*/_extends({}, CONTENT_NODE_MIME_TYPES, TOOL_MIME_TYPES);\nvar INTERNAL_MIME_TYPES_VALUES = /*#__PURE__*/Object.values(CONTENT_NODE_MIME_TYPES).flatMap(function (value) {\n  return Object.values(value).map(function (v) {\n    return v;\n  });\n});\nvar INCLUDABLE_INTERNAL_MIME_TYPES_VALUES = /*#__PURE__*/Object.values(INCLUDABLE_INTERNAL_CONTENT_NODE_MIME_TYPES).flatMap(function (value) {\n  return Object.values(value).map(function (v) {\n    return v;\n  });\n});\nfunction isDustMimeType(mimeType) {\n  return INTERNAL_MIME_TYPES_VALUES.includes(mimeType);\n}\nfunction isIncludableInternalMimeType(mimeType) {\n  return INCLUDABLE_INTERNAL_MIME_TYPES_VALUES.includes(mimeType);\n}\n\nvar BaseNotificationParamsSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  /**\n   * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n   * for notes on _meta usage.\n   */\n  _meta: zod__WEBPACK_IMPORTED_MODULE_2__.z.optional(zod__WEBPACK_IMPORTED_MODULE_2__.z.object({}).passthrough())\n}).passthrough();\nvar NotificationSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  method: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  params: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.optional(BaseNotificationParamsSchema)\n});\nvar ResultSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  /**\n   * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n   * for notes on _meta usage.\n   */\n  _meta: zod__WEBPACK_IMPORTED_MODULE_2__.z.optional(zod__WEBPACK_IMPORTED_MODULE_2__.z.object({}).passthrough())\n}).passthrough();\n/**\n * Error codes defined by the JSON-RPC specification.\n */\nvar ErrorCode;\n(function (ErrorCode) {\n  // SDK error codes\n  ErrorCode[ErrorCode[\"ConnectionClosed\"] = -32000] = \"ConnectionClosed\";\n  ErrorCode[ErrorCode[\"RequestTimeout\"] = -32001] = \"RequestTimeout\";\n  // Standard JSON-RPC error codes\n  ErrorCode[ErrorCode[\"ParseError\"] = -32700] = \"ParseError\";\n  ErrorCode[ErrorCode[\"InvalidRequest\"] = -32600] = \"InvalidRequest\";\n  ErrorCode[ErrorCode[\"MethodNotFound\"] = -32601] = \"MethodNotFound\";\n  ErrorCode[ErrorCode[\"InvalidParams\"] = -32602] = \"InvalidParams\";\n  ErrorCode[ErrorCode[\"InternalError\"] = -32603] = \"InternalError\";\n})(ErrorCode || (ErrorCode = {}));\n/* Base Metadata */\n/**\n * Base metadata interface for common properties across resources, tools, prompts, and implementations.\n */\nvar BaseMetadataSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  /** Intended for programmatic or logical use, but used as a display name in past specs or fallback */\n  name: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  /**\n   * Intended for UI and end-user contexts — optimized to be human-readable and easily understood,\n   * even by those unfamiliar with domain-specific terminology.\n   *\n   * If not provided, the name should be used for display (except for Tool,\n   * where `annotations.title` should be given precedence over using `name`,\n   * if present).\n   */\n  title: zod__WEBPACK_IMPORTED_MODULE_2__.z.optional(zod__WEBPACK_IMPORTED_MODULE_2__.z.string())\n}).passthrough();\n/* Resources */\n/**\n * The contents of a specific resource or sub-resource.\n */\nvar ResourceContentsSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  /**\n   * The URI of this resource.\n   */\n  uri: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  /**\n   * The MIME type of this resource, if known.\n   */\n  mimeType: zod__WEBPACK_IMPORTED_MODULE_2__.z.optional(zod__WEBPACK_IMPORTED_MODULE_2__.z.string()),\n  /**\n   * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n   * for notes on _meta usage.\n   */\n  _meta: zod__WEBPACK_IMPORTED_MODULE_2__.z.optional(zod__WEBPACK_IMPORTED_MODULE_2__.z.object({}).passthrough())\n}).passthrough();\nvar TextResourceContentsSchema = /*#__PURE__*/ResourceContentsSchema.extend({\n  /**\n   * The text of the item. This must only be set if the item can actually be represented as text (not binary data).\n   */\n  text: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n});\n/**\n * A Zod schema for validating Base64 strings that is more performant and\n * robust for very large inputs than the default regex-based check. It avoids\n * stack overflows by using the native `atob` function for validation.\n */\nvar Base64Schema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().refine(function (val) {\n  try {\n    // atob throws a DOMException if the string contains characters\n    // that are not part of the Base64 character set.\n    atob(val);\n    return true;\n  } catch (_unused) {\n    return false;\n  }\n}, {\n  message: \"Invalid Base64 string\"\n});\nvar BlobResourceContentsSchema = /*#__PURE__*/ResourceContentsSchema.extend({\n  /**\n   * A base64-encoded string representing the binary data of the item.\n   */\n  blob: Base64Schema\n});\n/**\n * A known resource that the server is capable of reading.\n */\nvar ResourceSchema = /*#__PURE__*/BaseMetadataSchema.extend({\n  /**\n   * The URI of this resource.\n   */\n  uri: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  /**\n   * A description of what this resource represents.\n   *\n   * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a \"hint\" to the model.\n   */\n  description: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.optional(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()),\n  /**\n   * The MIME type of this resource, if known.\n   */\n  mimeType: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.optional(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()),\n  /**\n   * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n   * for notes on _meta usage.\n   */\n  _meta: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.optional(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({}).passthrough())\n});\n/**\n * Text provided to or from an LLM.\n */\nvar TextContentSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  type: zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"text\"),\n  /**\n   * The text content of the message.\n   */\n  text: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  /**\n   * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n   * for notes on _meta usage.\n   */\n  _meta: zod__WEBPACK_IMPORTED_MODULE_2__.z.optional(zod__WEBPACK_IMPORTED_MODULE_2__.z.object({}).passthrough())\n}).passthrough();\n/**\n * An image provided to or from an LLM.\n */\nvar ImageContentSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  type: zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"image\"),\n  /**\n   * The base64-encoded image data.\n   */\n  data: Base64Schema,\n  /**\n   * The MIME type of the image. Different providers may support different image types.\n   */\n  mimeType: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  /**\n   * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n   * for notes on _meta usage.\n   */\n  _meta: zod__WEBPACK_IMPORTED_MODULE_2__.z.optional(zod__WEBPACK_IMPORTED_MODULE_2__.z.object({}).passthrough())\n}).passthrough();\n/**\n * An Audio provided to or from an LLM.\n */\nvar AudioContentSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  type: zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"audio\"),\n  /**\n   * The base64-encoded audio data.\n   */\n  data: Base64Schema,\n  /**\n   * The MIME type of the audio. Different providers may support different audio types.\n   */\n  mimeType: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  /**\n   * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n   * for notes on _meta usage.\n   */\n  _meta: zod__WEBPACK_IMPORTED_MODULE_2__.z.optional(zod__WEBPACK_IMPORTED_MODULE_2__.z.object({}).passthrough())\n}).passthrough();\n/**\n * The contents of a resource, embedded into a prompt or tool call result.\n */\nvar EmbeddedResourceSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  type: zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"resource\"),\n  resource: zod__WEBPACK_IMPORTED_MODULE_2__.z.union([TextResourceContentsSchema, BlobResourceContentsSchema]),\n  /**\n   * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n   * for notes on _meta usage.\n   */\n  _meta: zod__WEBPACK_IMPORTED_MODULE_2__.z.optional(zod__WEBPACK_IMPORTED_MODULE_2__.z.object({}).passthrough())\n}).passthrough();\n/**\n * A resource that the server is capable of reading, included in a prompt or tool call result.\n *\n * Note: resource links returned by tools are not guaranteed to appear in the results of `resources/list` requests.\n */\nvar ResourceLinkSchema = /*#__PURE__*/ResourceSchema.extend({\n  type: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"resource_link\")\n});\n/**\n * A content block that can be used in prompts and tool results.\n */\nvar ContentBlockSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.union([TextContentSchema, ImageContentSchema, AudioContentSchema, ResourceLinkSchema, EmbeddedResourceSchema]);\n/**\n * The server's response to a tool call.\n */\nvar CallToolResultSchema = /*#__PURE__*/ResultSchema.extend({\n  /**\n   * A list of content objects that represent the result of the tool call.\n   *\n   * If the Tool does not define an outputSchema, this field MUST be present in the result.\n   * For backwards compatibility, this field is always present, but it may be empty.\n   */\n  content: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(ContentBlockSchema)[\"default\"]([]),\n  /**\n   * An object containing structured tool output.\n   *\n   * If the Tool defines an outputSchema, this field MUST be present in the result, and contain a JSON object that matches the schema.\n   */\n  structuredContent: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({}).passthrough().optional(),\n  /**\n   * Whether the tool call ended in an error.\n   *\n   * If not set, this is assumed to be false (the call was successful).\n   *\n   * Any errors that originate from the tool SHOULD be reported inside the result\n   * object, with `isError` set to true, _not_ as an MCP protocol-level error\n   * response. Otherwise, the LLM would not be able to see that an error occurred\n   * and self-correct.\n   *\n   * However, any errors in _finding_ the tool, an error indicating that the\n   * server does not support tool calls, or any other exceptional conditions,\n   * should be reported as an MCP error response.\n   */\n  isError: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.optional(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"boolean\"]())\n});\n\n// File generated by the tool during its execution.\nvar ToolGeneratedFileSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  text: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  uri: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  mimeType: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.FILE),\n  fileId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  title: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  contentType: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  snippet: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable()\n});\nfunction isToolGeneratedFile(outputBlock) {\n  return outputBlock.type === \"resource\" && ToolGeneratedFileSchema.safeParse(outputBlock.resource).success;\n}\n// Thinking tokens generated during the tool execution.\nvar ThinkingOutputSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  mimeType: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.THINKING),\n  text: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  uri: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"\")\n});\nfunction isThinkingOutput(outputBlock) {\n  return outputBlock.type === \"resource\" && ThinkingOutputSchema.safeParse(outputBlock.resource).success;\n}\n// Final output of the reasoning when successful with the non-CoT tokens.\nvar ReasoningSuccessOutputSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  mimeType: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.REASONING_SUCCESS),\n  text: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  uri: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"\")\n});\nfunction isReasoningSuccessOutput(outputBlock) {\n  return outputBlock.type === \"resource\" && ReasoningSuccessOutputSchema.safeParse(outputBlock.resource).success;\n}\n// SQL query generated during the tool execution.\nvar SqlQueryOutputSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  mimeType: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.SQL_QUERY),\n  text: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  uri: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"\")\n});\nfunction isSqlQueryOutput(outputBlock) {\n  return outputBlock.type === \"resource\" && SqlQueryOutputSchema.safeParse(outputBlock.resource).success;\n}\nvar isResourceWithName = function isResourceWithName(resource) {\n  return \"name\" in resource && typeof resource.name === \"string\";\n};\nvar DatabaseSchemaResourceSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  mimeType: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.DATABASE_SCHEMA),\n  text: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  uri: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n});\nvar isDatabaseSchemaResourceType = function isDatabaseSchemaResourceType(outputBlock) {\n  return outputBlock.type === \"resource\" && DatabaseSchemaResourceSchema.safeParse(outputBlock.resource).success;\n};\nvar QueryWritingInstructionsResourceSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  mimeType: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.QUERY_WRITING_INSTRUCTIONS),\n  text: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  uri: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n});\nvar isQueryWritingInstructionsResourceType = function isQueryWritingInstructionsResourceType(outputBlock) {\n  return outputBlock.type === \"resource\" && QueryWritingInstructionsResourceSchema.safeParse(outputBlock.resource).success;\n};\nvar ExampleRowsResourceSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  mimeType: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.EXAMPLE_ROWS),\n  text: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  uri: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n});\nvar isExampleRowsResourceType = function isExampleRowsResourceType(outputBlock) {\n  return outputBlock.type === \"resource\" && ExampleRowsResourceSchema.safeParse(outputBlock.resource).success;\n};\n// Data source search outputs: query and results.\nvar SearchQueryResourceSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  mimeType: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.DATA_SOURCE_SEARCH_QUERY),\n  text: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  uri: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"\")\n});\nvar isSearchQueryResourceType = function isSearchQueryResourceType(outputBlock) {\n  return outputBlock.type === \"resource\" && SearchQueryResourceSchema.safeParse(outputBlock.resource).success;\n};\nvar SearchResultResourceSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  mimeType: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.DATA_SOURCE_SEARCH_RESULT),\n  uri: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  text: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  // Document metadata\n  id: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  tags: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()),\n  ref: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  chunks: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()),\n  source: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    provider: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional()\n  })\n});\nvar isSearchResultResourceType = function isSearchResultResourceType(outputBlock) {\n  return outputBlock.type === \"resource\" && SearchResultResourceSchema.safeParse(outputBlock.resource).success;\n};\n// Data source inclusion outputs, query and results\nvar IncludeQueryResourceSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  mimeType: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.DATA_SOURCE_INCLUDE_QUERY),\n  text: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  uri: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"\")\n});\nvar isIncludeQueryResourceType = function isIncludeQueryResourceType(outputBlock) {\n  return outputBlock.type === \"resource\" && IncludeQueryResourceSchema.safeParse(outputBlock.resource).success;\n};\nvar WarningResourceSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  mimeType: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.WARNING),\n  warningTitle: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  text: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  warningData: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.record(zod__WEBPACK_IMPORTED_MODULE_2__.z.string(), zod__WEBPACK_IMPORTED_MODULE_2__.z.unknown()).optional(),\n  uri: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"\")\n});\nvar isWarningResourceType = function isWarningResourceType(outputBlock) {\n  return outputBlock.type === \"resource\" && WarningResourceSchema.safeParse(outputBlock.resource).success;\n};\nvar IncludeResultResourceSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  mimeType: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.DATA_SOURCE_INCLUDE_RESULT),\n  uri: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  text: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  // Document metadata\n  id: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  tags: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()),\n  ref: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  chunks: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()),\n  source: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    name: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n    provider: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional()\n  })\n});\nvar isIncludeResultResourceType = function isIncludeResultResourceType(outputBlock) {\n  return outputBlock.type === \"resource\" && IncludeResultResourceSchema.safeParse(outputBlock.resource).success;\n};\n// Websearch results.\nvar WebsearchQueryResourceSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  mimeType: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.WEBSEARCH_QUERY),\n  text: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  uri: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"\")\n});\nvar isWebsearchQueryResourceType = function isWebsearchQueryResourceType(outputBlock) {\n  return outputBlock.type === \"resource\" && WebsearchQueryResourceSchema.safeParse(outputBlock.resource).success;\n};\nvar WebsearchResultResourceSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  mimeType: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.WEBSEARCH_RESULT),\n  title: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  text: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  uri: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  reference: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n});\nvar isWebsearchResultResourceType = function isWebsearchResultResourceType(outputBlock) {\n  return outputBlock.type === \"resource\" && WebsearchResultResourceSchema.safeParse(outputBlock.resource).success;\n};\n// Browse results.\nvar BrowseResultResourceSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  mimeType: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.BROWSE_RESULT),\n  requestedUrl: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  uri: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  // Browsed url, might differ from the requested url\n  text: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  title: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional(),\n  description: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional(),\n  responseCode: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  errorMessage: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional()\n});\nvar isBrowseResultResourceType = function isBrowseResultResourceType(outputBlock) {\n  return outputBlock.type === \"resource\" && BrowseResultResourceSchema.safeParse(outputBlock.resource).success;\n};\n// RunAgent results.\nvar RunAgentQueryResourceSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  mimeType: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.RUN_AGENT_QUERY),\n  text: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  childAgentId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  uri: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"\")\n});\nvar isRunAgentQueryResourceType = function isRunAgentQueryResourceType(outputBlock) {\n  return outputBlock.type === \"resource\" && RunAgentQueryResourceSchema.safeParse(outputBlock.resource).success;\n};\nvar RunAgentResultResourceSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  mimeType: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.RUN_AGENT_RESULT),\n  conversationId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  text: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  uri: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  refs: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.record(zod__WEBPACK_IMPORTED_MODULE_2__.z.string(), zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    description: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional(),\n    href: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional(),\n    title: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n    provider: zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n  })).optional()\n});\nvar isRunAgentResultResourceType = function isRunAgentResultResourceType(outputBlock) {\n  return outputBlock.type === \"resource\" && RunAgentResultResourceSchema.safeParse(outputBlock.resource).success;\n};\n// Toolsets results.\nvar ToolsetsResultResourceSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  mimeType: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.TOOLSET_LIST_RESULT),\n  text: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  uri: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"\"),\n  id: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  description: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n});\nvar isToolsetsResultResourceType = function isToolsetsResultResourceType(outputBlock) {\n  return outputBlock.type === \"resource\" && ToolsetsResultResourceSchema.safeParse(outputBlock.resource).success;\n};\n// Extract data outputs: query and results.\nvar ExtractQueryResourceSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  mimeType: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.EXTRACT_QUERY),\n  text: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  uri: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"\")\n});\nvar isExtractQueryResourceType = function isExtractQueryResourceType(outputBlock) {\n  return outputBlock.type === \"resource\" && ExtractQueryResourceSchema.safeParse(outputBlock.resource).success;\n};\nvar ExtractResultResourceSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  mimeType: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(INTERNAL_MIME_TYPES.TOOL_OUTPUT.EXTRACT_RESULT),\n  uri: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  text: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  // File metadata\n  fileId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  title: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  contentType: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  snippet: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable()\n});\nvar isExtractResultResourceType = function isExtractResultResourceType(outputBlock) {\n  return outputBlock.type === \"resource\" && ExtractResultResourceSchema.safeParse(outputBlock.resource).success;\n};\n/**\n * Notification output types.\n */\n// Image.\nvar NotificationImageContentSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  type: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"image\"),\n  mimeType: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n});\nfunction isImageProgressOutput(output) {\n  return output !== undefined && output.type === \"image\";\n}\n// Canvas file.\nvar NotificationCanvasFileContentSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  type: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"canvas_file\"),\n  fileId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  mimeType: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  title: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  updatedAt: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n});\nfunction isCanvasFileContentOutput(output) {\n  return output !== undefined && output.type === \"canvas_file\";\n}\nvar NotificationTextContentSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  type: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"text\"),\n  text: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n});\nvar NotificationRunAgentContentSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  type: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"run_agent\"),\n  childAgentId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  conversationId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  query: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n});\nvar ProgressNotificationOutputSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.union([NotificationImageContentSchema, NotificationCanvasFileContentSchema, NotificationRunAgentContentSchema, NotificationTextContentSchema]).optional();\nvar ProgressNotificationContentSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  // Required for the MCP protocol.\n  progress: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  total: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  progressToken: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.union([/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(), /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number()]),\n  // Custom data.\n  data: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    label: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n    output: ProgressNotificationOutputSchema\n  })\n});\nvar MCPProgressNotificationSchema = /*#__PURE__*/NotificationSchema.extend({\n  method: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"notifications/progress\"),\n  params: ProgressNotificationContentSchema\n});\nfunction isMCPProgressNotificationType(notification) {\n  return MCPProgressNotificationSchema.safeParse(notification).success;\n}\n\n// Custom schema to get a string literal type and yet allow any string when parsing\nvar FlexibleEnumSchema = function FlexibleEnumSchema() {\n  return zod__WEBPACK_IMPORTED_MODULE_2__.z.custom(function (val) {\n    return typeof val === \"string\";\n  });\n};\nvar ModelProviderIdSchema = /*#__PURE__*/FlexibleEnumSchema();\nvar ModelLLMIdSchema = /*#__PURE__*/FlexibleEnumSchema();\nvar EmbeddingProviderIdSchema = /*#__PURE__*/FlexibleEnumSchema();\nvar ConnectorsAPIErrorTypeSchema = /*#__PURE__*/FlexibleEnumSchema();\nvar ConnectorsAPIErrorSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  type: ConnectorsAPIErrorTypeSchema,\n  message: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n});\nvar ModelIdSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number();\nfunction isConnectorsAPIError(obj) {\n  return typeof obj === \"object\" && obj !== null && \"message\" in obj && typeof obj.message === \"string\" && \"type\" in obj && typeof obj.type === \"string\" && ConnectorsAPIErrorSchema.safeParse(obj).success;\n}\n// Supported content types that are plain text and can be sent as file-less content fragment.\nvar supportedOtherFileFormats = {\n  \"application/msword\": [\".doc\", \".docx\"],\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\": [\".doc\", \".docx\"],\n  \"application/vnd.ms-powerpoint\": [\".ppt\", \".pptx\"],\n  \"application/vnd.openxmlformats-officedocument.presentationml.presentation\": [\".ppt\", \".pptx\"],\n  \"application/vnd.google-apps.document\": [],\n  \"application/vnd.google-apps.presentation\": [],\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\": [\".xlsx\"],\n  \"application/vnd.google-apps.spreadsheet\": [],\n  \"application/vnd.ms-excel\": [\".xls\"],\n  \"application/pdf\": [\".pdf\"],\n  \"application/vnd.dust.section.json\": [\".json\"],\n  \"text/comma-separated-values\": [\".csv\"],\n  \"text/csv\": [\".csv\"],\n  \"text/markdown\": [\".md\", \".markdown\"],\n  \"text/plain\": [\".txt\", \".log\", \".cfg\", \".conf\"],\n  \"text/tab-separated-values\": [\".tsv\"],\n  \"text/tsv\": [\".tsv\"],\n  \"text/vnd.dust.attachment.slack.thread\": [\".txt\"],\n  \"text/html\": [\".html\", \".htm\", \".xhtml\", \".xhtml+xml\"],\n  \"text/xml\": [\".xml\"],\n  \"text/calendar\": [\".ics\"],\n  \"text/css\": [\".css\"],\n  \"text/javascript\": [\".js\", \".mjs\", \".jsx\"],\n  \"text/typescript\": [\".ts\", \".tsx\"],\n  \"application/json\": [\".json\"],\n  \"application/xml\": [\".xml\"],\n  \"application/x-sh\": [\".sh\"],\n  \"text/x-sh\": [\".sh\"],\n  \"text/x-python\": [\".py\"],\n  \"text/x-python-script\": [\".py\"],\n  \"application/x-yaml\": [\".yaml\", \".yml\"],\n  \"text/yaml\": [\".yaml\", \".yml\"],\n  \"text/vnd.yaml\": [\".yaml\", \".yml\"],\n  \"text/x-c\": [\".c\", \".cc\", \".cpp\", \".cxx\", \".dic\", \".h\", \".hh\"],\n  \"text/x-csharp\": [\".cs\"],\n  \"text/x-java-source\": [\".java\"],\n  \"text/x-php\": [\".php\"],\n  \"text/x-ruby\": [\".rb\"],\n  \"text/x-sql\": [\".sql\"],\n  \"text/x-swift\": [\".swift\"],\n  \"text/x-rust\": [\".rs\"],\n  \"text/x-go\": [\".go\"],\n  \"text/x-kotlin\": [\".kt\", \".kts\"],\n  \"text/x-scala\": [\".scala\"],\n  \"text/x-groovy\": [\".groovy\"],\n  \"text/x-perl\": [\".pl\", \".pm\"],\n  \"text/x-perl-script\": [\".pl\", \".pm\"],\n  \"application/octet-stream\": []\n};\n// Supported content types for images.\nvar supportedImageFileFormats = {\n  \"image/jpeg\": [\".jpg\", \".jpeg\"],\n  \"image/png\": [\".png\"],\n  \"image/gif\": [\".gif\"],\n  \"image/webp\": [\".webp\"]\n};\nvar supportedOtherContentTypes = /*#__PURE__*/Object.keys(supportedOtherFileFormats);\nvar supportedImageContentTypes = /*#__PURE__*/Object.keys(supportedImageFileFormats);\nvar supportedFileExtensions = /*#__PURE__*/[].concat(/*#__PURE__*/Object.keys(supportedOtherFileFormats), /*#__PURE__*/Object.keys(supportedImageFileFormats));\nvar supportedUploadableContentType = /*#__PURE__*/[].concat(supportedOtherContentTypes, supportedImageContentTypes);\nvar SupportedContentFragmentTypeSchema = /*#__PURE__*/FlexibleEnumSchema();\nvar SupportedFileContentFragmentTypeSchema = /*#__PURE__*/FlexibleEnumSchema();\nfunction isSupportedFileContentType(contentType) {\n  return supportedUploadableContentType.includes(contentType);\n}\nfunction isSupportedPlainTextContentType(contentType) {\n  return supportedOtherContentTypes.includes(contentType);\n}\nfunction isSupportedImageContentType(contentType) {\n  return supportedImageContentTypes.includes(contentType);\n}\nvar UserMessageOriginSchema = /*#__PURE__*/FlexibleEnumSchema().or(zod__WEBPACK_IMPORTED_MODULE_2__.z[\"null\"]()).or(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.undefined());\nvar VisibilitySchema = /*#__PURE__*/FlexibleEnumSchema();\nvar Ok = /*#__PURE__*/function () {\n  function Ok(value) {\n    this.value = void 0;\n    this.value = value;\n  }\n  var _proto = Ok.prototype;\n  _proto.isOk = function isOk() {\n    return true;\n  };\n  _proto.isErr = function isErr() {\n    return false;\n  };\n  return Ok;\n}();\nvar Err = /*#__PURE__*/function () {\n  function Err(error) {\n    this.error = void 0;\n    this.error = error;\n  }\n  var _proto2 = Err.prototype;\n  _proto2.isOk = function isOk() {\n    return false;\n  };\n  _proto2.isErr = function isErr() {\n    return true;\n  };\n  return Err;\n}();\n// Custom codec to validate the timezone\nvar Timezone = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().refine(function (s) {\n  return moment_timezone__WEBPACK_IMPORTED_MODULE_0___default().tz.names().includes(s);\n}, {\n  message: \"Invalid timezone\"\n});\nvar ConnectorProvidersSchema = /*#__PURE__*/FlexibleEnumSchema();\nvar isConnectorProvider = function isConnectorProvider(provider) {\n  return ConnectorProvidersSchema.safeParse(provider).success;\n};\nvar EditedByUserSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  editedAt: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number().nullable(),\n  fullName: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n  imageUrl: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n  email: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n  userId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable()\n});\nvar DataSourceTypeSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  id: ModelIdSchema,\n  sId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  createdAt: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  name: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  description: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n  assistantDefaultSelected: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"boolean\"](),\n  dustAPIProjectId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  dustAPIDataSourceId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  connectorId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n  connectorProvider: /*#__PURE__*/ConnectorProvidersSchema.nullable(),\n  editedByUser: /*#__PURE__*/EditedByUserSchema.nullable().optional()\n});\nfunction isFolder(ds) {\n  // If there is no connectorProvider, it's a folder.\n  return !ds.connectorProvider;\n}\nfunction isWebsite(ds) {\n  return ds.connectorProvider === \"webcrawler\";\n}\nvar DataSourceViewCategoriesSchema = /*#__PURE__*/FlexibleEnumSchema();\nvar BlockTypeSchema = /*#__PURE__*/FlexibleEnumSchema();\nvar StatusSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"enum\"]([\"running\", \"succeeded\", \"errored\"]);\nvar BlockRunConfigSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.record(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.any());\nvar BlockStatusSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  block_type: BlockTypeSchema,\n  name: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  status: StatusSchema,\n  success_count: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  error_count: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number()\n});\nvar RunConfigSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  blocks: BlockRunConfigSchema\n});\nvar TraceTypeSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  value: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.unknown().nullable(),\n  error: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n  meta: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.unknown().nullable()\n});\nvar RunStatusSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  run: StatusSchema,\n  blocks: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(BlockStatusSchema)\n});\nvar RunTypeSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  run_id: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  created: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  run_type: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"enum\"]([\"deploy\", \"local\", \"execute\"]),\n  app_hash: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable().optional(),\n  specification_hash: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable().optional(),\n  config: RunConfigSchema,\n  status: RunStatusSchema,\n  traces: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.tuple([/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.tuple([BlockTypeSchema, /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()]), /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(TraceTypeSchema))])),\n  results: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    value: zod__WEBPACK_IMPORTED_MODULE_2__.z.unknown().nullable().optional(),\n    error: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable().optional()\n  }))).nullable().optional()\n});\nvar TokensClassificationSchema = /*#__PURE__*/FlexibleEnumSchema();\nvar GenerationTokensEventSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  type: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"generation_tokens\"),\n  created: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  configurationId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  messageId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  text: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  classification: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.union([TokensClassificationSchema, /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"enum\"]([\"opening_delimiter\", \"closing_delimiter\"])]),\n  delimiterClassification: /*#__PURE__*/TokensClassificationSchema.nullable().optional()\n});\nvar DataSourceViewKindSchema = /*#__PURE__*/FlexibleEnumSchema();\nvar DataSourceViewSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  category: DataSourceViewCategoriesSchema,\n  createdAt: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  dataSource: DataSourceTypeSchema,\n  editedByUser: /*#__PURE__*/EditedByUserSchema.nullable().optional(),\n  id: ModelIdSchema,\n  kind: DataSourceViewKindSchema,\n  parentsIn: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.string()).nullable(),\n  sId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  updatedAt: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  spaceId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n});\nvar RetrievalDocumentChunkTypeSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  offset: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  score: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number().nullable(),\n  text: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n});\nvar RetrievalDocumentTypeSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  chunks: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(RetrievalDocumentChunkTypeSchema),\n  documentId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  dataSourceView: /*#__PURE__*/DataSourceViewSchema.nullable(),\n  id: ModelIdSchema,\n  reference: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  score: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number().nullable(),\n  sourceUrl: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n  tags: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()),\n  timestamp: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number()\n});\nvar WhitelistableFeaturesSchema = /*#__PURE__*/FlexibleEnumSchema();\nvar WorkspaceSegmentationSchema = /*#__PURE__*/FlexibleEnumSchema().nullable();\nvar RoleSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"enum\"]([\"admin\", \"builder\", \"user\", \"none\"]);\nvar LightWorkspaceSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  id: ModelIdSchema,\n  sId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  name: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  role: RoleSchema,\n  segmentation: WorkspaceSegmentationSchema,\n  whiteListedProviders: /*#__PURE__*/ModelProviderIdSchema.array().nullable(),\n  defaultEmbeddingProvider: /*#__PURE__*/EmbeddingProviderIdSchema.nullable()\n});\nvar WorkspaceSchema = /*#__PURE__*/LightWorkspaceSchema.extend({\n  ssoEnforced: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"boolean\"]().optional()\n});\nvar ExtensionWorkspaceSchema = /*#__PURE__*/WorkspaceSchema.extend({\n  blacklistedDomains: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.string()).nullable()\n});\nvar UserProviderSchema = /*#__PURE__*/FlexibleEnumSchema().nullable();\nvar UserSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  sId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  id: ModelIdSchema,\n  createdAt: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  provider: UserProviderSchema,\n  username: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  email: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  firstName: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  lastName: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n  fullName: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  image: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable()\n});\nvar WebsearchResultSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  title: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  snippet: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  link: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  reference: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n});\nvar MCPActionTypeSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  id: ModelIdSchema,\n  mcpServerId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n  internalMCPServerName: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n  agentMessageId: ModelIdSchema,\n  functionCallName: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n  status: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  params: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.record(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.any()),\n  output: /*#__PURE__*/CallToolResultSchema.shape.content.nullable()\n});\nvar GlobalAgentStatusSchema = /*#__PURE__*/FlexibleEnumSchema();\nvar AgentStatusSchema = /*#__PURE__*/FlexibleEnumSchema();\nvar AgentConfigurationStatusSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.union([AgentStatusSchema, GlobalAgentStatusSchema]);\nvar AgentConfigurationScopeSchema = /*#__PURE__*/FlexibleEnumSchema();\nvar AgentConfigurationViewSchema = /*#__PURE__*/FlexibleEnumSchema();\nvar AgentUsageTypeSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  messageCount: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  conversationCount: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  userCount: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  timePeriodSec: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number()\n});\nvar AgentRecentAuthorsSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.string()).readonly();\nvar AgentModelConfigurationSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  providerId: ModelProviderIdSchema,\n  modelId: ModelLLMIdSchema,\n  temperature: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number()\n});\nvar LightAgentConfigurationSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  id: ModelIdSchema,\n  versionCreatedAt: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n  sId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  version: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  versionAuthorId: /*#__PURE__*/ModelIdSchema.nullable(),\n  instructions: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n  model: AgentModelConfigurationSchema,\n  status: AgentConfigurationStatusSchema,\n  scope: AgentConfigurationScopeSchema,\n  userFavorite: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"boolean\"](),\n  name: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  description: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  pictureUrl: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  lastAuthors: /*#__PURE__*/AgentRecentAuthorsSchema.optional(),\n  usage: /*#__PURE__*/AgentUsageTypeSchema.optional(),\n  maxStepsPerRun: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  visualizationEnabled: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"boolean\"](),\n  templateId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n  groupIds: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.string()).optional(),\n  requestedGroupIds: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()))\n});\nvar ContentFragmentContextSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  username: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional().nullable(),\n  fullName: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional().nullable(),\n  email: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional().nullable(),\n  profilePictureUrl: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional().nullable()\n});\nvar ContentNodeTypeSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.union([/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"document\"), /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"table\"), /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"folder\")]);\nvar ContentNodesViewTypeSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.union([/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"table\"), /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"document\"), /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"all\")]);\nvar ContentFragmentNodeData = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  nodeId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  nodeDataSourceViewId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  nodeType: ContentNodeTypeSchema,\n  provider: /*#__PURE__*/ConnectorProvidersSchema.nullable(),\n  spaceName: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n});\nvar BaseContentFragmentSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  type: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"content_fragment\"),\n  id: ModelIdSchema,\n  sId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  created: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  visibility: VisibilitySchema,\n  version: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  sourceUrl: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n  title: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  contentType: SupportedContentFragmentTypeSchema,\n  context: ContentFragmentContextSchema,\n  contentFragmentId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  contentFragmentVersion: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.union([/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"latest\"), /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"superseded\")])\n});\nvar FileContentFragmentSchema = /*#__PURE__*/BaseContentFragmentSchema.extend({\n  contentFragmentType: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"file\"),\n  fileId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n  snippet: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n  generatedTables: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()),\n  textUrl: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  textBytes: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number().nullable()\n});\nvar ContentNodeContentFragmentSchema = /*#__PURE__*/BaseContentFragmentSchema.extend({\n  contentFragmentType: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"content_node\"),\n  nodeId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  nodeDataSourceViewId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  nodeType: ContentNodeTypeSchema,\n  contentNodeData: ContentFragmentNodeData\n});\nvar ContentFragmentSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.union([FileContentFragmentSchema, ContentNodeContentFragmentSchema]);\nvar AgentMentionSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  configurationId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n});\nvar UserMessageContextSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  username: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  timezone: Timezone,\n  fullName: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional().nullable(),\n  email: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional().nullable(),\n  profilePictureUrl: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional().nullable(),\n  origin: UserMessageOriginSchema,\n  clientSideMCPServerIds: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.string()).optional().nullable(),\n  selectedMCPServerViewIds: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.string()).optional().nullable()\n});\nvar UserMessageSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  id: ModelIdSchema,\n  created: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  type: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"user_message\"),\n  sId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  visibility: VisibilitySchema,\n  version: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  user: /*#__PURE__*/UserSchema.nullable(),\n  mentions: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(AgentMentionSchema),\n  content: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  context: UserMessageContextSchema\n});\nvar AgentMessageStatusSchema = /*#__PURE__*/FlexibleEnumSchema();\nvar AgentMessageTypeSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  id: ModelIdSchema,\n  agentMessageId: ModelIdSchema,\n  created: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  type: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"agent_message\"),\n  sId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  visibility: VisibilitySchema,\n  version: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  parentMessageId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n  configuration: LightAgentConfigurationSchema,\n  status: AgentMessageStatusSchema,\n  actions: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(MCPActionTypeSchema),\n  content: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n  chainOfThought: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n  rawContents: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    step: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n    content: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n  })),\n  error: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    code: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n    message: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n    metadata: zod__WEBPACK_IMPORTED_MODULE_2__.z.record(zod__WEBPACK_IMPORTED_MODULE_2__.z.any()).nullable()\n  }).nullable()\n});\nvar AgentMessageFeedbackSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  messageId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  agentMessageId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  userId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  thumbDirection: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.union([/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"up\"), /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"down\")]),\n  content: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n  createdAt: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  agentConfigurationId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  agentConfigurationVersion: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  isConversationShared: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"boolean\"]()\n});\nvar ConversationVisibilitySchema = /*#__PURE__*/FlexibleEnumSchema();\nvar ConversationWithoutContentSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  id: ModelIdSchema,\n  created: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  updated: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number().optional(),\n  owner: WorkspaceSchema,\n  sId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  title: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n  visibility: ConversationVisibilitySchema,\n  groupIds: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.string()).optional(),\n  requestedGroupIds: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()))\n});\nvar ConversationSchema = /*#__PURE__*/ConversationWithoutContentSchema.extend({\n  content: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.union([/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(UserMessageSchema), /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(AgentMessageTypeSchema), /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(ContentFragmentSchema)]))\n});\nvar MCPStakeLevelSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"enum\"]([\"low\", \"high\", \"never_ask\"]).optional();\nvar MCPValidationMetadataSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  mcpServerName: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  toolName: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  agentName: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  pubsubMessageId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional(),\n  icon: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.union([MCPInternalActionIconSchema, MCPExternalActionIconSchema]).optional()\n});\nvar ToolExecutionBlockedStatusSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"enum\"]([\"blocked_authentication_required\", \"blocked_validation_required\", \"blocked_child_action_input_required\"]);\nvar ToolExecutionMetadataSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  actionId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  inputs: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.record(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.any()),\n  stake: MCPStakeLevelSchema,\n  metadata: MCPValidationMetadataSchema\n});\nvar BlockedActionExecutionSchema = /*#__PURE__*/ToolExecutionMetadataSchema.extend({\n  messageId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  conversationId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  status: ToolExecutionBlockedStatusSchema\n});\nfunction isMCPServerPersonalAuthRequiredError(error) {\n  return error.code === \"mcp_server_personal_authentication_required\" && error.metadata && \"mcpServerId\" in error.metadata;\n}\nvar CoreAPIErrorSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  message: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  code: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n});\nvar CoreAPITokenTypeSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.tuple([/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(), /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()]);\nvar APIErrorTypeSchema = /*#__PURE__*/FlexibleEnumSchema();\nvar APIErrorSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  type: APIErrorTypeSchema,\n  message: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  data_source_error: /*#__PURE__*/CoreAPIErrorSchema.optional(),\n  run_error: /*#__PURE__*/CoreAPIErrorSchema.optional(),\n  app_error: /*#__PURE__*/CoreAPIErrorSchema.optional(),\n  connectors_error: /*#__PURE__*/ConnectorsAPIErrorSchema.optional()\n});\nvar WorkspaceDomainSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  domain: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  domainAutoJoinEnabled: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"boolean\"]()\n});\nvar DustAppTypeSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  appHash: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  appId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  workspaceId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n});\nvar DustAppConfigTypeSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.record(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.unknown());\nvar DustAppRunErroredEventSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  type: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"error\"),\n  content: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    code: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n    message: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n  })\n});\nvar DustAppRunRunStatusEventSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  type: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"run_status\"),\n  content: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    status: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"enum\"]([\"running\", \"succeeded\", \"errored\"]),\n    run_id: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n  })\n});\nvar DustAppRunBlockStatusEventSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  type: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"block_status\"),\n  content: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    block_type: BlockTypeSchema,\n    name: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n    status: StatusSchema,\n    success_count: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n    error_count: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number()\n  })\n});\nvar DustAppRunBlockExecutionEventSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  type: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"block_execution\"),\n  content: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    block_type: BlockTypeSchema,\n    block_name: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n    execution: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n      value: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.unknown().nullable(),\n      error: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n      meta: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.unknown().nullable()\n    })))\n  })\n});\nvar DustAppRunFinalEventSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  type: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"final\")\n});\nvar DustAppRunTokensEventSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  type: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"tokens\"),\n  content: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    block_type: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n    block_name: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n    input_index: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n    map: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n      name: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n      iteration: zod__WEBPACK_IMPORTED_MODULE_2__.z.number()\n    }).nullable(),\n    tokens: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n      text: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n      tokens: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.string()).optional(),\n      logprobs: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.number()).optional()\n    })\n  })\n});\nvar DustAppRunReasoningTokensEventSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  type: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"reasoning_tokens\"),\n  content: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    block_type: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n    block_name: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n    input_index: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n    map: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n      name: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n      iteration: zod__WEBPACK_IMPORTED_MODULE_2__.z.number()\n    }).nullable(),\n    tokens: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n      text: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n    })\n  })\n});\nvar DustAppRunReasoningItemEventSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  type: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"reasoning_item\"),\n  content: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    block_type: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n    block_name: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n    input_index: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n    map: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n      name: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n      iteration: zod__WEBPACK_IMPORTED_MODULE_2__.z.number()\n    }).nullable(),\n    item: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.unknown()\n  })\n});\nvar DustAppRunFunctionCallEventSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  type: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"function_call\"),\n  content: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    block_type: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n    block_name: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n    input_index: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n    map: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n      name: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n      iteration: zod__WEBPACK_IMPORTED_MODULE_2__.z.number()\n    }).nullable(),\n    function_call: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n      name: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n    })\n  })\n});\nvar DustAppRunFunctionCallArgumentsTokensEventSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  type: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"function_call_arguments_tokens\"),\n  content: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    block_type: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n    block_name: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n    input_index: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n    map: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n      name: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n      iteration: zod__WEBPACK_IMPORTED_MODULE_2__.z.number()\n    }).nullable(),\n    tokens: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n      text: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n    })\n  })\n});\nvar SpaceKindSchema = /*#__PURE__*/FlexibleEnumSchema();\nvar SpaceTypeSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  createdAt: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  groupIds: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()),\n  isRestricted: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"boolean\"](),\n  kind: SpaceKindSchema,\n  name: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  sId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  updatedAt: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number()\n});\nvar DatasetSchemaEntryType = /*#__PURE__*/FlexibleEnumSchema();\nvar DatasetSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  name: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  description: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n  data: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.record(zod__WEBPACK_IMPORTED_MODULE_2__.z.any())).nullable().optional(),\n  schema: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    key: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n    type: DatasetSchemaEntryType,\n    description: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable()\n  })).nullable().optional()\n});\nvar AppTypeSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  id: ModelIdSchema,\n  sId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  name: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  description: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n  savedSpecification: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n  savedConfig: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n  savedRun: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n  dustAPIProjectId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  space: SpaceTypeSchema,\n  datasets: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(DatasetSchema).optional(),\n  coreSpecifications: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.record(zod__WEBPACK_IMPORTED_MODULE_2__.z.string()).optional()\n});\nvar AppImportTypeSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  id: /*#__PURE__*/ModelIdSchema.optional(),\n  sId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  name: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  description: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n  savedSpecification: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n  savedConfig: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n  savedRun: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n  dustAPIProjectId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  datasets: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(DatasetSchema).optional(),\n  coreSpecifications: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.record(zod__WEBPACK_IMPORTED_MODULE_2__.z.string()).optional()\n});\nvar RunAppResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  run: RunTypeSchema\n});\nvar GetDataSourcesResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  data_sources: /*#__PURE__*/DataSourceTypeSchema.array()\n});\nvar GetOrPatchAgentConfigurationResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  agentConfiguration: LightAgentConfigurationSchema\n});\nvar PatchAgentConfigurationRequestSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  userFavorite: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"boolean\"]().optional()\n});\nvar GetAgentConfigurationsResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  agentConfigurations: /*#__PURE__*/LightAgentConfigurationSchema.array()\n});\nvar CreateGenericAgentConfigurationRequestSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  name: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  description: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  instructions: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  emoji: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional(),\n  subAgentName: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional(),\n  subAgentDescription: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional(),\n  subAgentInstructions: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional(),\n  subAgentEmoji: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional()\n});\nvar CreateGenericAgentConfigurationResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  agentConfiguration: LightAgentConfigurationSchema,\n  subAgentConfiguration: /*#__PURE__*/LightAgentConfigurationSchema.optional()\n});\nvar PostContentFragmentResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  contentFragment: ContentFragmentSchema\n});\nvar CreateConversationResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  conversation: ConversationSchema,\n  message: /*#__PURE__*/UserMessageSchema.optional()\n});\nvar GetFeedbacksResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  feedbacks: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(AgentMessageFeedbackSchema)\n});\nvar PublicPostMessageFeedbackRequestBodySchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  thumbDirection: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  feedbackContent: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable().optional(),\n  isConversationShared: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"boolean\"]().optional()\n});\nvar PostMessageFeedbackResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  success: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(true)\n});\nvar PostUserMessageResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  message: UserMessageSchema\n});\nvar RetryMessageResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  message: AgentMessageTypeSchema\n});\nvar GetConversationResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  conversation: ConversationSchema\n});\nvar TokenizeResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  tokens: /*#__PURE__*/CoreAPITokenTypeSchema.array()\n});\nvar GetActiveMemberEmailsInWorkspaceResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  emails: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string())\n});\nvar GetWorkspaceVerifiedDomainsResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  verified_domains: /*#__PURE__*/WorkspaceDomainSchema.array()\n});\nvar GetWorkspaceFeatureFlagsResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  feature_flags: /*#__PURE__*/WhitelistableFeaturesSchema.array()\n});\nvar PublicPostMessagesRequestBodySchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.intersection(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  content: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().min(1),\n  mentions: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    configurationId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n  })),\n  context: /*#__PURE__*/UserMessageContextSchema.extend({\n    clientSideMCPServerIds: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.string()).optional().nullable()\n  })\n}), /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  blocking: zod__WEBPACK_IMPORTED_MODULE_2__.z[\"boolean\"]().optional(),\n  skipToolsValidation: zod__WEBPACK_IMPORTED_MODULE_2__.z[\"boolean\"]().optional()\n}).partial());\nvar PublicPostEditMessagesRequestBodySchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  content: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  mentions: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    configurationId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n  })),\n  skipToolsValidation: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"boolean\"]().optional()[\"default\"](false)\n});\nvar PublicContentFragmentWithContentSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  title: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  url: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional().nullable(),\n  content: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  contentType: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  fileId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.undefined().nullable(),\n  nodeId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.undefined().nullable(),\n  nodeDataSourceViewId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.undefined().nullable(),\n  context: /*#__PURE__*/ContentFragmentContextSchema.optional().nullable(),\n  // Undocumented for now -- allows to supersede an existing content fragment.\n  supersededContentFragmentId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional().nullable()\n});\nvar PublicContentFragmentWithFileIdSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  title: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  fileId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  url: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional().nullable(),\n  content: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.undefined().nullable(),\n  contentType: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.undefined().nullable(),\n  nodeId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.undefined().nullable(),\n  nodeDataSourceViewId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.undefined().nullable(),\n  context: /*#__PURE__*/ContentFragmentContextSchema.optional().nullable(),\n  // Undocumented for now -- allows to supersede an existing content fragment.\n  supersededContentFragmentId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional().nullable()\n});\nvar PublicContentFragmentWithContentNodeSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  title: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  nodeId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  nodeDataSourceViewId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  url: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.undefined().nullable(),\n  content: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.undefined().nullable(),\n  contentType: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.undefined().nullable(),\n  fileId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.undefined().nullable(),\n  context: /*#__PURE__*/ContentFragmentContextSchema.optional().nullable(),\n  supersededContentFragmentId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional().nullable()\n});\nvar PublicPostContentFragmentRequestBodySchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.union([PublicContentFragmentWithContentSchema, PublicContentFragmentWithFileIdSchema, PublicContentFragmentWithContentNodeSchema]);\nvar PublicPostConversationsRequestBodySchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.intersection(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  title: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable().optional(),\n  visibility: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"enum\"]([\"workspace\", \"unlisted\", \"deleted\", \"test\"]).optional()[\"default\"](\"unlisted\"),\n  depth: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number().optional(),\n  message: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.union([/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.intersection(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    content: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().min(1),\n    mentions: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n      configurationId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n    })),\n    context: UserMessageContextSchema\n  }), /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    blocking: zod__WEBPACK_IMPORTED_MODULE_2__.z[\"boolean\"]().optional()\n  }).partial()), /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.undefined()]),\n  contentFragment: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.union([PublicContentFragmentWithContentSchema, PublicContentFragmentWithFileIdSchema, PublicContentFragmentWithContentNodeSchema, /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.undefined()]),\n  contentFragments: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.union([/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.union([PublicContentFragmentWithContentSchema, PublicContentFragmentWithFileIdSchema, PublicContentFragmentWithContentNodeSchema]).array(), /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.undefined()])\n}), /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  blocking: zod__WEBPACK_IMPORTED_MODULE_2__.z[\"boolean\"]().optional(),\n  skipToolsValidation: zod__WEBPACK_IMPORTED_MODULE_2__.z[\"boolean\"]().optional()\n}).partial());\nvar PostConversationsResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  conversation: ConversationSchema,\n  message: /*#__PURE__*/UserMessageSchema.optional(),\n  contentFragment: /*#__PURE__*/ContentFragmentSchema.optional()\n});\nvar GetConversationsResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  conversations: /*#__PURE__*/ConversationWithoutContentSchema.array()\n});\nvar SearchDataSourceViewsRequestSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  dataSourceId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional(),\n  kind: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional(),\n  vaultId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional(),\n  vaultKind: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional()\n});\nvar SearchDataSourceViewsResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  data_source_views: /*#__PURE__*/DataSourceViewSchema.array()\n});\nvar ValidateMemberRequestSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  email: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n});\nvar GetAppsResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  apps: /*#__PURE__*/AppTypeSchema.array()\n});\nvar PostAppsRequestSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  apps: /*#__PURE__*/AppImportTypeSchema.array()\n});\nvar ImportAppsResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  apps: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    sId: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n    name: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n    error: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional()\n  }).array()\n});\nvar DataSourceViewResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  dataSourceView: DataSourceViewSchema\n});\nvar PatchDataSourceViewRequestSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.union([/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  parentsToAdd: zod__WEBPACK_IMPORTED_MODULE_2__.z.union([zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.string()), zod__WEBPACK_IMPORTED_MODULE_2__.z.undefined()]),\n  parentsToRemove: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.string()).optional()\n})\n// For the fields to be not optional, see:\n// https://stackoverflow.com/questions/71477015/specify-a-zod-schema-with-a-non-optional-but-possibly-undefined-field\n.transform(function (o) {\n  return {\n    parentsToAdd: o.parentsToAdd,\n    parentsToRemove: o.parentsToRemove\n  };\n}), /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  parentsIn: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string())\n})]);\nvar DataSourceSearchQuerySchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  query: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  top_k: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.coerce.number(),\n  full_text: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.coerce[\"boolean\"](),\n  target_document_tokens: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.coerce.number().optional(),\n  timestamp_gt: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.coerce.number().optional(),\n  timestamp_lt: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.coerce.number().optional(),\n  tags_in: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.string()).optional(),\n  tags_not: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.string()).optional(),\n  parents_in: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.string()).optional(),\n  parents_not: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.string()).optional()\n});\nvar FrontDataSourceDocumentSectionSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.lazy(function () {\n  return zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    prefix: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n    content: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n    sections: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(FrontDataSourceDocumentSectionSchema)\n  });\n});\nvar PostDataSourceDocumentRequestSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  timestamp: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number().nullable().optional(),\n  tags: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.string()).nullable().optional(),\n  parent_id: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable().optional(),\n  parents: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.string()).nullable().optional(),\n  source_url: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable().optional(),\n  upsert_context: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    sync_type: zod__WEBPACK_IMPORTED_MODULE_2__.z.union([zod__WEBPACK_IMPORTED_MODULE_2__.z[\"enum\"]([\"batch\", \"incremental\"]), zod__WEBPACK_IMPORTED_MODULE_2__.z.undefined()])\n  })\n  // For the fields to be not optional, see:\n  // https://stackoverflow.com/questions/71477015/specify-a-zod-schema-with-a-non-optional-but-possibly-undefined-field\n  .transform(function (o) {\n    return {\n      sync_type: o.sync_type\n    };\n  }).optional(),\n  text: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable().optional(),\n  section: /*#__PURE__*/FrontDataSourceDocumentSectionSchema.nullable().optional(),\n  light_document_output: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"boolean\"]().optional(),\n  async: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"boolean\"]().nullable().optional(),\n  mime_type: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable().optional(),\n  title: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable().optional()\n});\nvar UpsertTableRowsRequestSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  rows: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    row_id: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n    value: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.record(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.union([zod__WEBPACK_IMPORTED_MODULE_2__.z.string(), zod__WEBPACK_IMPORTED_MODULE_2__.z.number(), zod__WEBPACK_IMPORTED_MODULE_2__.z[\"boolean\"](), zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n      type: zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"datetime\"),\n      epoch: zod__WEBPACK_IMPORTED_MODULE_2__.z.number()\n    })]).nullable())\n  })),\n  truncate: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"boolean\"]().optional()\n});\nvar PostTableParentsRequestSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  parent_id: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable().optional(),\n  parents: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string())\n});\nvar UpsertTableFromCsvRequestSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  name: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  description: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  timestamp: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number().nullable().optional(),\n  tags: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.string()).nullable().optional(),\n  parentId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable().optional(),\n  parents: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.string()).nullable().optional(),\n  truncate: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"boolean\"](),\n  async: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"boolean\"]().optional(),\n  title: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  mimeType: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  sourceUrl: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable().optional(),\n  tableId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  fileId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  allowEmptySchema: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"boolean\"]().optional()\n});\nvar UpsertDatabaseTableRequestSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  table_id: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional(),\n  name: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  description: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  timestamp: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number().nullable().optional(),\n  tags: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.string()).nullable().optional(),\n  parent_id: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable().optional(),\n  parents: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.string()).nullable().optional(),\n  remote_database_table_id: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable().optional(),\n  remote_database_secret_id: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable().optional(),\n  title: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  mime_type: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable().optional(),\n  source_url: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable().optional()\n});\nvar SupportedUsageTablesSchema = /*#__PURE__*/FlexibleEnumSchema();\n// Folders\nvar CoreAPIFolderSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  data_source_id: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  folder_id: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  title: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  parents: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()),\n  timestamp: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number()\n});\nvar GetFoldersResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  folders: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(CoreAPIFolderSchema),\n  total: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number()\n});\nvar GetFolderResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  folder: CoreAPIFolderSchema\n});\nvar DeleteFolderResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  folder: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    folder_id: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n  })\n});\nvar UpsertFolderResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  folder: CoreAPIFolderSchema,\n  data_source: DataSourceTypeSchema\n});\nvar ProviderVisibilitySchema = /*#__PURE__*/FlexibleEnumSchema();\nvar UpsertDataSourceFolderRequestSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  timestamp: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  parents: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.string()).nullable().optional(),\n  parent_id: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable().optional(),\n  title: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  mime_type: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  source_url: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable().optional(),\n  provider_visibility: /*#__PURE__*/ProviderVisibilitySchema.nullable().optional()\n});\nvar DateSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().refine(function (s) {\n  return /^\\d{4}-(0[1-9]|1[0-2])(-([0-2]\\d|3[01]))?$/.test(s);\n}, \"YYYY-MM or YYYY-MM-DD\");\nvar GetWorkspaceUsageRequestSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.union([/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  start: DateSchema,\n  end: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.undefined(),\n  mode: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"month\"),\n  table: SupportedUsageTablesSchema,\n  format: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"enum\"]([\"csv\", \"json\"]).optional()[\"default\"](\"csv\")\n}), /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  start: DateSchema,\n  end: DateSchema,\n  mode: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"range\"),\n  table: SupportedUsageTablesSchema,\n  format: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"enum\"]([\"csv\", \"json\"]).optional()[\"default\"](\"csv\")\n})]);\nvar FileUploadUrlRequestSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  contentType: SupportedFileContentFragmentTypeSchema,\n  fileName: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().max(4096, \"File name must be less than 4096 characters\"),\n  fileSize: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  useCase: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.union([/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"conversation\"), /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"upsert_table\")]),\n  useCaseMetadata: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    conversationId: zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n  }).optional()\n});\nvar FileTypeStatusSchema = /*#__PURE__*/FlexibleEnumSchema();\nvar FileTypeUseCaseSchema = /*#__PURE__*/FlexibleEnumSchema();\nvar FileTypeSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  // TODO(spolu): move this to ModelIdSchema\n  id: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  sId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  contentType: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  downloadUrl: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional(),\n  fileName: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  fileSize: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  status: FileTypeStatusSchema,\n  uploadUrl: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional(),\n  publicUrl: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional(),\n  useCase: FileTypeUseCaseSchema\n});\nvar FileTypeWithUploadUrlSchema = /*#__PURE__*/FileTypeSchema.extend({\n  uploadUrl: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n});\nvar FileUploadRequestResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  file: FileTypeWithUploadUrlSchema\n});\nvar FileUploadedRequestResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  file: FileTypeSchema\n});\nvar MeResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  user: /*#__PURE__*/UserSchema.and(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    workspaces: /*#__PURE__*/WorkspaceSchema.array().or(/*#__PURE__*/ExtensionWorkspaceSchema.array())\n  }))\n});\nvar CancelMessageGenerationResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  success: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(true)\n});\nvar CancelMessageGenerationRequestSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  messageIds: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string())\n});\n// Typeguards.\nfunction isAgentMention(arg) {\n  return arg.configurationId !== undefined;\n}\nfunction assertNever(x) {\n  throw new Error((typeof x === \"object\" ? JSON.stringify(x) : x) + \" is not of type never. This should never happen.\");\n}\nfunction removeNulls(arr) {\n  return arr.filter(function (v) {\n    return v !== null && v !== undefined;\n  });\n}\nfunction getProviderFromRetrievedDocument(document) {\n  if (document.dataSourceView) {\n    if (document.dataSourceView.dataSource.connectorProvider === \"webcrawler\") {\n      return \"document\";\n    }\n    return document.dataSourceView.dataSource.connectorProvider || \"document\";\n  }\n  return \"document\";\n}\nfunction getTitleFromRetrievedDocument(document) {\n  var provider = getProviderFromRetrievedDocument(document);\n  if (provider === \"slack\") {\n    for (var _iterator = _createForOfIteratorHelperLoose(document.tags), _step; !(_step = _iterator()).done;) {\n      var t = _step.value;\n      if (t.startsWith(\"channelName:\")) {\n        return \"#\" + t.substring(12);\n      }\n    }\n  }\n  for (var _iterator2 = _createForOfIteratorHelperLoose(document.tags), _step2; !(_step2 = _iterator2()).done;) {\n    var _t = _step2.value;\n    if (_t.startsWith(\"title:\")) {\n      return _t.substring(6);\n    }\n  }\n  return document.documentId;\n}\nvar AppsCheckRequestSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  apps: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    appId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n    appHash: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n  }))\n});\nvar AppsCheckResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  apps: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    appId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n    appHash: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n    deployed: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"boolean\"]()\n  }))\n});\nvar GetSpacesResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  spaces: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(SpaceTypeSchema)\n});\nvar OAuthProviderSchema = /*#__PURE__*/FlexibleEnumSchema();\nvar InternalAllowedIconSchema = /*#__PURE__*/FlexibleEnumSchema();\nvar CustomServerIconSchema = /*#__PURE__*/FlexibleEnumSchema();\nvar MCPServerTypeSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  sId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  name: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  version: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  description: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  icon: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.union([InternalAllowedIconSchema, CustomServerIconSchema]),\n  authorization: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    provider: OAuthProviderSchema,\n    supported_use_cases: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z[\"enum\"]([\"personal_actions\", \"platform_actions\"])),\n    scope: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional()\n  }).nullable(),\n  tools: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    name: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n    description: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n    inputSchema: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.any().optional()\n  })),\n  availability: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"enum\"]([\"manual\", \"auto\", \"auto_hidden_builder\"]),\n  allowMultipleInstances: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"boolean\"](),\n  documentationUrl: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable()\n});\nvar MCPServerViewTypeSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  id: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  sId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  name: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n  description: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n  createdAt: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  updatedAt: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  spaceId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  serverType: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"enum\"]([\"remote\", \"internal\"]),\n  server: MCPServerTypeSchema,\n  oAuthUseCase: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"enum\"]([\"personal_actions\", \"platform_actions\"]).nullable(),\n  editedByUser: /*#__PURE__*/EditedByUserSchema.nullable()\n});\nvar GetMCPServerViewsResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  success: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(true),\n  serverViews: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(MCPServerViewTypeSchema)\n});\nvar GetMCPServerViewsQuerySchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  includeAuto: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"enum\"]([\"true\", \"false\"]).transform(function (val) {\n    return val === \"true\";\n  }).optional()\n});\nvar BaseSearchBodySchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  viewType: ContentNodesViewTypeSchema,\n  spaceIds: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()),\n  includeDataSources: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"boolean\"](),\n  limit: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number()\n});\nvar TextSearchBodySchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.intersection(BaseSearchBodySchema, /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  query: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  nodeIds: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.undefined().optional(),\n  searchSourceUrls: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"boolean\"]().optional()\n}));\nvar NodeIdSearchBodySchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.intersection(BaseSearchBodySchema, /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  nodeIds: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()),\n  query: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.undefined().optional()\n}));\nvar SearchRequestBodySchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.union([TextSearchBodySchema, NodeIdSearchBodySchema]);\nvar ContentNodeSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  expandable: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"boolean\"](),\n  internalId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  lastUpdatedAt: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.number().nullable(),\n  mimeType: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  // The direct parent ID of this content node\n  parentInternalId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable(),\n  // permission: ConnectorPermissionSchema,\n  preventSelection: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"boolean\"]().optional(),\n  providerVisibility: /*#__PURE__*/ProviderVisibilitySchema.nullable().optional(),\n  sourceUrl: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullable().optional(),\n  title: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  type: ContentNodeTypeSchema\n});\nvar ContentNodeWithParentSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.intersection(ContentNodeSchema, /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  parentsInternalIds: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.string()).optional(),\n  parentTitle: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional().nullable()\n}));\nvar DataSourceContentNodeSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.intersection(ContentNodeWithParentSchema, /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  dataSource: DataSourceTypeSchema,\n  dataSourceViews: /*#__PURE__*/DataSourceViewSchema.array()\n}));\nvar DataSourceViewContentNodeSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.intersection(ContentNodeWithParentSchema, /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  dataSourceView: DataSourceViewSchema\n}));\nvar SearchWarningCodeSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"truncated-query-clauses\");\nvar PostWorkspaceSearchResponseBodySchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  nodes: /*#__PURE__*/DataSourceContentNodeSchema.array(),\n  warningCode: /*#__PURE__*/SearchWarningCodeSchema.optional().nullable()\n});\nvar TOOL_RUNNING_LABEL = \"Using a tool\";\n// MCP Related.\nvar ValidateActionResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  success: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"boolean\"]()\n});\nvar ActionApprovalStateSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"enum\"]([\"approved\", \"rejected\", \"always_approved\"]);\nvar ValidateActionRequestBodySchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  actionId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  approved: ActionApprovalStateSchema\n});\nvar ClientSideMCPServerNameSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().min(5).max(30);\nvar PublicRegisterMCPRequestBodySchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  serverName: ClientSideMCPServerNameSchema\n});\nvar PublicHeartbeatMCPRequestBodySchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  serverId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n});\nvar RegisterMCPResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  expiresAt: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  serverId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n});\nvar HeartbeatMCPResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  success: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"boolean\"](),\n  expiresAt: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n});\nvar PublicPostMCPResultsRequestBodySchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  result: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.unknown(),\n  serverId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n});\nvar PostMCPRequestsRequestQuerySchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  serverId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  lastEventId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional()\n});\nvar PostMCPResultsResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  success: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"boolean\"]()\n});\nvar BlockedActionsResponseSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  blockedActions: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(BlockedActionExecutionSchema)\n});\nvar MCPViewsRequestAvailabilitySchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z[\"enum\"]([\"manual\", \"auto\"]);\nvar GetMCPViewsRequestSchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  spaceIds: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string()),\n  availabilities: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(MCPViewsRequestAvailabilitySchema)\n});\nvar PostSpaceMembersRequestBodySchema = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  userIds: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.array(/*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_2__.z.string())\n});\n\nvar logger = console;\nvar HEARTBEAT_INTERVAL_MS = 15 * 60 * 1000; // 15 minutes.\nvar RECONNECT_DELAY_MS = 5 * 1000; // 5 seconds.\n/**\n * Custom transport implementation for MCP\n * - Uses EventSource (SSE) to receive requests from Dust\n * - Uses fetch (HTTP POST) to send results back to Dust\n * - Supports workspace-scoped MCP registration only\n */\nvar DustMcpServerTransport = /*#__PURE__*/function () {\n  function DustMcpServerTransport(dustAPI, onServerIdReceived, serverName, verbose, eventSourceHeartbeat) {\n    if (serverName === void 0) {\n      serverName = \"Dust Extension\";\n    }\n    if (verbose === void 0) {\n      verbose = false;\n    }\n    if (eventSourceHeartbeat === void 0) {\n      eventSourceHeartbeat = 45000;\n    }\n    this.dustAPI = void 0;\n    this.onServerIdReceived = void 0;\n    this.serverName = void 0;\n    this.verbose = void 0;\n    this.eventSourceHeartbeat = void 0;\n    this.eventSource = null;\n    this.lastEventId = null;\n    this.heartbeatTimer = null;\n    this.serverId = null;\n    // Required by Transport interface.\n    this.onmessage = void 0;\n    this.onclose = void 0;\n    this.onerror = void 0;\n    this.sessionId = void 0;\n    this.dustAPI = dustAPI;\n    this.onServerIdReceived = onServerIdReceived;\n    this.serverName = serverName;\n    this.verbose = verbose;\n    this.eventSourceHeartbeat = eventSourceHeartbeat;\n  }\n  /**\n   * Register the MCP server with the Dust backend\n   */\n  var _proto = DustMcpServerTransport.prototype;\n  _proto.registerServer =\n  /*#__PURE__*/\n  function () {\n    var _registerServer = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var registerRes, serverId;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return this.dustAPI.registerMCPServer({\n              serverName: this.serverName\n            });\n          case 2:\n            registerRes = _context.sent;\n            if (!registerRes.isErr()) {\n              _context.next = 6;\n              break;\n            }\n            this.logError(\"Failed to register MCP server: \" + registerRes.error);\n            return _context.abrupt(\"return\", false);\n          case 6:\n            serverId = registerRes.value.serverId;\n            this.serverId = serverId;\n            // Notify the parent that the serverId has been updated.\n            this.onServerIdReceived(serverId);\n            // Setup heartbeat to keep the server registration alive.\n            this.setupHeartbeat(serverId);\n            return _context.abrupt(\"return\", true);\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, this);\n    }));\n    function registerServer() {\n      return _registerServer.apply(this, arguments);\n    }\n    return registerServer;\n  }()\n  /**\n   * Send periodic heartbeats to keep the server registration alive.\n   */\n  ;\n  _proto.setupHeartbeat = function setupHeartbeat(serverId) {\n    var _this = this;\n    // Clear any existing heartbeat timer.\n    if (this.heartbeatTimer) {\n      clearInterval(this.heartbeatTimer);\n    }\n    // Set up a new heartbeat timer (every HEARTBEAT_INTERVAL_MS).\n    this.heartbeatTimer = setInterval(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      var heartbeatRes, error;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _this.dustAPI.heartbeatMCPServer({\n              serverId: serverId\n            });\n          case 2:\n            heartbeatRes = _context2.sent;\n            if (!(heartbeatRes.isErr() || heartbeatRes.value.success === false)) {\n              _context2.next = 8;\n              break;\n            }\n            error = heartbeatRes.isErr() ? heartbeatRes.error : new Error(\"Server not registered\");\n            _this.logError(\"Failed to heartbeat MCP server: \" + error);\n            _context2.next = 8;\n            return _this.registerServer();\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    })), HEARTBEAT_INTERVAL_MS);\n  }\n  /**\n   * Start the transport and connect to the SSE endpoint\n   * This method is required by the Transport interface\n   */;\n  _proto.start =\n  /*#__PURE__*/\n  function () {\n    var _start = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n      var registered, _this$onerror;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return this.registerServer();\n          case 3:\n            registered = _context3.sent;\n            if (registered) {\n              _context3.next = 6;\n              break;\n            }\n            throw new Error(\"Failed to register MCP server\");\n          case 6:\n            _context3.next = 8;\n            return this.connectToRequestsStream();\n          case 8:\n            this.logInfo(\"MCP transport started successfully\");\n            _context3.next = 16;\n            break;\n          case 11:\n            _context3.prev = 11;\n            _context3.t0 = _context3[\"catch\"](0);\n            this.logError(\"Failed to start MCP transport:\", _context3.t0);\n            (_this$onerror = this.onerror) == null || _this$onerror.call(this, _context3.t0 instanceof Error ? _context3.t0 : new Error(String(_context3.t0)));\n            throw _context3.t0;\n          case 16:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3, this, [[0, 11]]);\n    }));\n    function start() {\n      return _start.apply(this, arguments);\n    }\n    return start;\n  }()\n  /**\n   * Connect to the SSE stream for the workspace\n   */\n  ;\n  _proto.connectToRequestsStream =\n  /*#__PURE__*/\n  function () {\n    var _connectToRequestsStream = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n      var _this2 = this;\n      var connectionResult, _connectionResult$val, url, headers;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            if (this.serverId) {\n              _context4.next = 3;\n              break;\n            }\n            this.logError(\"Server ID is not set\");\n            return _context4.abrupt(\"return\");\n          case 3:\n            // Close any existing connection.\n            if (this.eventSource) {\n              this.eventSource.close();\n              this.eventSource = null;\n            }\n            _context4.next = 6;\n            return this.dustAPI.getMCPRequestsConnectionDetails({\n              serverId: this.serverId,\n              lastEventId: this.lastEventId\n            });\n          case 6:\n            connectionResult = _context4.sent;\n            if (!connectionResult.isErr()) {\n              _context4.next = 9;\n              break;\n            }\n            throw new Error(\"Failed to get connection details: \" + connectionResult.error.message);\n          case 9:\n            _connectionResult$val = connectionResult.value, url = _connectionResult$val.url, headers = _connectionResult$val.headers;\n            this.eventSource = new event_source_polyfill__WEBPACK_IMPORTED_MODULE_1__.EventSourcePolyfill(url, {\n              headers: headers,\n              heartbeatTimeout: this.eventSourceHeartbeat\n            });\n            this.eventSource.onmessage = function (event) {\n              try {\n                if (event.data === \"done\") {\n                  // Ignore this event.\n                  return;\n                }\n                var eventData = JSON.parse(event.data);\n                // Save the eventId for reconnection purposes.\n                if (eventData.eventId) {\n                  _this2.lastEventId = eventData.eventId;\n                }\n                // The actual request is in the data property.\n                var data = eventData.data;\n                if (!data) {\n                  _this2.logError(\"No data field found in the event\");\n                  return;\n                }\n                // Forward the message to the handler.\n                if (_this2.onmessage) {\n                  _this2.onmessage(data);\n                } else {\n                  _this2.logError(\"ERROR: onmessage handler not set - MCP response won't be sent\");\n                }\n              } catch (error) {\n                _this2.logError(\"Failed to parse MCP request:\", error);\n                _this2.onerror == null || _this2.onerror(new Error(\"Failed to parse MCP request: \" + error));\n              }\n            };\n            this.eventSource.onerror = function (error) {\n              _this2.logError(\"Error in MCP EventSource connection:\", error);\n              _this2.onerror == null || _this2.onerror(new Error(\"SSE connection error: \" + error));\n              // Attempt to reconnect after a delay.\n              setTimeout(function () {\n                if (_this2.eventSource) {\n                  _this2.logInfo(\"Attempting to reconnect to SSE...\");\n                  void _this2.connectToRequestsStream()[\"catch\"](function (reconnectError) {\n                    _this2.logError(\"Failed to reconnect:\", reconnectError);\n                  });\n                }\n              }, RECONNECT_DELAY_MS); // Wait before reconnecting.\n            };\n            this.eventSource.onopen = function () {\n              _this2.logInfo(\"MCP SSE connection established\");\n            };\n            this.eventSource.addEventListener(\"close\", function () {\n              _this2.logInfo(\"MCP SSE connection closed\");\n              _this2.onclose == null || _this2.onclose();\n            });\n          case 15:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4, this);\n    }));\n    function connectToRequestsStream() {\n      return _connectToRequestsStream.apply(this, arguments);\n    }\n    return connectToRequestsStream;\n  }()\n  /**\n   * Send a message to the server\n   * This method is required by the Transport interface\n   */\n  ;\n  _proto.send =\n  /*#__PURE__*/\n  function () {\n    var _send = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(message) {\n      var postResultsRes, _this$onerror2;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            if (this.serverId) {\n              _context5.next = 3;\n              break;\n            }\n            this.logError(\"Server ID is not set\");\n            return _context5.abrupt(\"return\");\n          case 3:\n            _context5.next = 5;\n            return this.dustAPI.postMCPResults({\n              serverId: this.serverId,\n              result: message\n            });\n          case 5:\n            postResultsRes = _context5.sent;\n            if (postResultsRes.isErr()) {\n              this.logError(\"Failed to send MCP result:\", postResultsRes.error);\n              (_this$onerror2 = this.onerror) == null || _this$onerror2.call(this, new Error(\"Failed to send MCP result: \" + postResultsRes.error));\n            }\n          case 7:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5, this);\n    }));\n    function send(_x) {\n      return _send.apply(this, arguments);\n    }\n    return send;\n  }()\n  /**\n   * Close the transport and disconnect from the SSE endpoint\n   * This method is required by the Transport interface\n   */\n  ;\n  _proto.close =\n  /*#__PURE__*/\n  function () {\n    var _close = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n      var _this$onclose;\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) switch (_context6.prev = _context6.next) {\n          case 0:\n            // Clear heartbeat timer.\n            if (this.heartbeatTimer) {\n              clearInterval(this.heartbeatTimer);\n              this.heartbeatTimer = null;\n            }\n            // Close SSE connection.\n            if (this.eventSource) {\n              this.logInfo(\"Closing MCP SSE connection\");\n              this.eventSource.close();\n              this.eventSource = null;\n            }\n            // Trigger onclose callback.\n            (_this$onclose = this.onclose) == null || _this$onclose.call(this);\n          case 3:\n          case \"end\":\n            return _context6.stop();\n        }\n      }, _callee6, this);\n    }));\n    function close() {\n      return _close.apply(this, arguments);\n    }\n    return close;\n  }();\n  _proto.logError = function logError() {\n    if (this.verbose) {\n      logger.error.apply(logger, arguments);\n    }\n  };\n  _proto.logInfo = function logInfo() {\n    if (this.verbose) {\n      logger.log.apply(logger, arguments);\n    }\n  }\n  /**\n   * Get the current server ID\n   */;\n  _proto.getServerId = function getServerId() {\n    var _this$serverId;\n    return (_this$serverId = this.serverId) != null ? _this$serverId : undefined;\n  };\n  return DustMcpServerTransport;\n}();\n\n// Copied from front/hooks/useEventSource.ts\nvar DEFAULT_MAX_RECONNECT_ATTEMPTS = 10;\nvar DEFAULT_RECONNECT_DELAY = 5000;\nvar textFromResponse = /*#__PURE__*/function () {\n  var _ref3 = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(response) {\n    var reader, decoder, result, done, _yield$reader$read, value, doneReading;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!(typeof response.body === \"string\")) {\n            _context.next = 2;\n            break;\n          }\n          return _context.abrupt(\"return\", response.body);\n        case 2:\n          // Convert ReadableStream to string\n          reader = response.body.getReader();\n          decoder = new TextDecoder();\n          result = \"\";\n          _context.prev = 5;\n          done = false;\n        case 7:\n          if (done) {\n            _context.next = 17;\n            break;\n          }\n          _context.next = 10;\n          return reader.read();\n        case 10:\n          _yield$reader$read = _context.sent;\n          value = _yield$reader$read.value;\n          doneReading = _yield$reader$read.done;\n          done = doneReading;\n          if (value) {\n            result += decoder.decode(value, {\n              stream: true\n            });\n          }\n          _context.next = 7;\n          break;\n        case 17:\n          result += decoder.decode();\n        case 18:\n          _context.prev = 18;\n          reader.releaseLock();\n          return _context.finish(18);\n        case 21:\n          return _context.abrupt(\"return\", result);\n        case 22:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[5,, 18, 21]]);\n  }));\n  return function textFromResponse(_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nvar DustAPI = /*#__PURE__*/function () {\n  /**\n   * @param credentials DustAPICrededentials\n   */\n  function DustAPI(config, credentials, logger, urlOverride) {\n    this._url = void 0;\n    this._credentials = void 0;\n    this._logger = void 0;\n    this._urlOverride = void 0;\n    this._url = config.url;\n    this._credentials = credentials;\n    this._logger = logger;\n    this._urlOverride = urlOverride;\n  }\n  var _proto = DustAPI.prototype;\n  _proto.workspaceId = function workspaceId() {\n    return this._credentials.workspaceId;\n  };\n  _proto.setWorkspaceId = function setWorkspaceId(workspaceId) {\n    this._credentials.workspaceId = workspaceId;\n  };\n  _proto.apiUrl = function apiUrl() {\n    return this._urlOverride ? this._urlOverride : this._url;\n  };\n  _proto.getApiKey = /*#__PURE__*/function () {\n    var _getApiKey = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(typeof this._credentials.apiKey === \"function\")) {\n              _context2.next = 2;\n              break;\n            }\n            return _context2.abrupt(\"return\", this._credentials.apiKey());\n          case 2:\n            return _context2.abrupt(\"return\", this._credentials.apiKey);\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2, this);\n    }));\n    function getApiKey() {\n      return _getApiKey.apply(this, arguments);\n    }\n    return getApiKey;\n  }();\n  _proto.baseHeaders = /*#__PURE__*/function () {\n    var _baseHeaders = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n      var headers;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return this.getApiKey();\n          case 2:\n            _context3.t0 = _context3.sent;\n            _context3.t1 = \"Bearer \" + _context3.t0;\n            headers = {\n              Authorization: _context3.t1\n            };\n            if (this._credentials.extraHeaders) {\n              Object.assign(headers, this._credentials.extraHeaders);\n            }\n            return _context3.abrupt(\"return\", headers);\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3, this);\n    }));\n    function baseHeaders() {\n      return _baseHeaders.apply(this, arguments);\n    }\n    return baseHeaders;\n  }()\n  /**\n   * Fetches the current user's information from the API.\n   *\n   * This method sends a GET request to the `/api/v1/me` endpoint with the necessary authorization\n   * headers. It then processes the response to extract the user information.  Note that this will\n   * only work if you are using an OAuth2 token. It will always fail with a workspace API key.\n   *\n   * @returns {Promise<Result<User, Error>>} A promise that resolves to a Result object containing\n   * either the user information or an error.\n   */\n  ;\n  _proto.me =\n  /*#__PURE__*/\n  function () {\n    var _me = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n      var headers, res, r;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return this.getApiKey();\n          case 2:\n            _context4.t0 = _context4.sent;\n            _context4.t1 = \"Bearer \" + _context4.t0;\n            headers = {\n              \"Content-Type\": \"application/json\",\n              Authorization: _context4.t1\n            };\n            _context4.next = 7;\n            return this._fetchWithError(this.apiUrl() + \"/api/v1/me\", {\n              method: \"GET\",\n              headers: headers\n            });\n          case 7:\n            res = _context4.sent;\n            _context4.next = 10;\n            return this._resultFromResponse(MeResponseSchema, res);\n          case 10:\n            r = _context4.sent;\n            if (!r.isErr()) {\n              _context4.next = 13;\n              break;\n            }\n            return _context4.abrupt(\"return\", r);\n          case 13:\n            return _context4.abrupt(\"return\", new Ok(r.value.user));\n          case 14:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4, this);\n    }));\n    function me() {\n      return _me.apply(this, arguments);\n    }\n    return me;\n  }();\n  _proto.request = /*#__PURE__*/function () {\n    var _request = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(args) {\n      var _args$overrideWorkspa;\n      var url, headers, res;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            // Conveniently clean path from any leading \"/\" just in case\n            args.path = args.path.replace(/^\\/+/, \"\");\n            url = this.apiUrl() + \"/api/v1/w/\" + ((_args$overrideWorkspa = args.overrideWorkspaceId) != null ? _args$overrideWorkspa : this.workspaceId()) + \"/\" + args.path;\n            if (args.query) {\n              url += \"?\" + args.query.toString();\n            }\n            _context5.t0 = _extends;\n            _context5.t1 = {};\n            _context5.next = 7;\n            return this.baseHeaders();\n          case 7:\n            _context5.t2 = _context5.sent;\n            _context5.t3 = args.headers;\n            headers = (0, _context5.t0)(_context5.t1, _context5.t2, _context5.t3);\n            headers[\"Content-Type\"] = \"application/json\";\n            if (args.stream) {\n              headers[\"Accept\"] = \"text/event-stream\";\n            }\n            _context5.next = 14;\n            return this._fetchWithError(url, {\n              method: args.method,\n              headers: headers,\n              body: args.body ? JSON.stringify(args.body) : undefined,\n              signal: args.signal,\n              stream: args.stream\n            });\n          case 14:\n            res = _context5.sent;\n            return _context5.abrupt(\"return\", res);\n          case 16:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5, this);\n    }));\n    function request(_x2) {\n      return _request.apply(this, arguments);\n    }\n    return request;\n  }()\n  /**\n   * This functions talks directly to the Dust production API to create a run.\n   *\n   * @param app DustAppType the app to run streamed\n   * @param config DustAppConfigType the app config\n   * @param inputs any[] the app inputs\n   */\n  ;\n  _proto.runApp =\n  /*#__PURE__*/\n  function () {\n    var _runApp = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(_ref4, config, inputs, _temp) {\n      var workspaceId, appId, appHash, appSpaceId, _ref5, useWorkspaceCredentials, res, r;\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) switch (_context6.prev = _context6.next) {\n          case 0:\n            workspaceId = _ref4.workspaceId, appId = _ref4.appId, appHash = _ref4.appHash, appSpaceId = _ref4.appSpaceId;\n            _ref5 = _temp === void 0 ? {\n              useWorkspaceCredentials: false\n            } : _temp, useWorkspaceCredentials = _ref5.useWorkspaceCredentials;\n            _context6.next = 4;\n            return this.request({\n              overrideWorkspaceId: workspaceId,\n              path: \"spaces/\" + appSpaceId + \"/apps/\" + appId + \"/runs\",\n              query: new URLSearchParams({\n                use_workspace_credentials: useWorkspaceCredentials ? \"true\" : \"false\"\n              }),\n              method: \"POST\",\n              body: {\n                specification_hash: appHash,\n                config: config,\n                stream: false,\n                blocking: true,\n                inputs: inputs\n              }\n            });\n          case 4:\n            res = _context6.sent;\n            _context6.next = 7;\n            return this._resultFromResponse(RunAppResponseSchema, res);\n          case 7:\n            r = _context6.sent;\n            if (!r.isErr()) {\n              _context6.next = 10;\n              break;\n            }\n            return _context6.abrupt(\"return\", r);\n          case 10:\n            return _context6.abrupt(\"return\", new Ok(r.value.run));\n          case 11:\n          case \"end\":\n            return _context6.stop();\n        }\n      }, _callee6, this);\n    }));\n    function runApp(_x3, _x4, _x5, _x6) {\n      return _runApp.apply(this, arguments);\n    }\n    return runApp;\n  }()\n  /**\n   * This functions talks directly to the Dust production API to create a streamed run.\n   *\n   * @param app DustAppType the app to run streamed\n   * @param config DustAppConfigType the app config\n   * @param inputs any[] the app inputs\n   */\n  ;\n  _proto.runAppStreamed =\n  /*#__PURE__*/\n  function () {\n    var _runAppStreamed = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9(_ref6, config,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    inputs, _temp2) {\n      var workspaceId, appId, appHash, appSpaceId, _ref7, useWorkspaceCredentials, res, processStreamedRunResponse, _processStreamedRunResponse;\n      return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n        while (1) switch (_context9.prev = _context9.next) {\n          case 0:\n            _processStreamedRunResponse = function _processStreamedRunRe2() {\n              _processStreamedRunResponse = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8(res, logger) {\n                var text, hasRunId, rejectDustRunIdPromise, resolveDustRunIdPromise, dustRunIdPromise, pendingEvents, parser, streamEvents;\n                return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n                  while (1) switch (_context8.prev = _context8.next) {\n                    case 0:\n                      if (!(!res.ok || !res.body)) {\n                        _context8.next = 5;\n                        break;\n                      }\n                      _context8.next = 3;\n                      return textFromResponse(res);\n                    case 3:\n                      text = _context8.sent;\n                      return _context8.abrupt(\"return\", new Err({\n                        type: \"dust_api_error\",\n                        message: \"Error running streamed app: status_code=\" + res.status + \" body=\" + text\n                      }));\n                    case 5:\n                      hasRunId = false;\n                      dustRunIdPromise = new Promise(function (resolve, reject) {\n                        rejectDustRunIdPromise = reject;\n                        resolveDustRunIdPromise = resolve;\n                      });\n                      pendingEvents = [];\n                      parser = (0,eventsource_parser__WEBPACK_IMPORTED_MODULE_3__.createParser)(function (event) {\n                        if (event.type === \"event\") {\n                          if (event.data) {\n                            try {\n                              var _data$content;\n                              var data = JSON.parse(event.data);\n                              switch (data.type) {\n                                case \"error\":\n                                  {\n                                    pendingEvents.push({\n                                      type: \"error\",\n                                      content: {\n                                        code: data.content.code,\n                                        message: data.content.message\n                                      }\n                                    });\n                                    break;\n                                  }\n                                case \"run_status\":\n                                  {\n                                    pendingEvents.push({\n                                      type: data.type,\n                                      content: data.content\n                                    });\n                                    break;\n                                  }\n                                case \"block_status\":\n                                  {\n                                    pendingEvents.push({\n                                      type: data.type,\n                                      content: data.content\n                                    });\n                                    break;\n                                  }\n                                case \"block_execution\":\n                                  {\n                                    pendingEvents.push({\n                                      type: data.type,\n                                      content: data.content\n                                    });\n                                    break;\n                                  }\n                                case \"tokens\":\n                                  {\n                                    pendingEvents.push({\n                                      type: \"tokens\",\n                                      content: data.content\n                                    });\n                                    break;\n                                  }\n                                case \"reasoning_tokens\":\n                                  {\n                                    pendingEvents.push({\n                                      type: \"reasoning_tokens\",\n                                      content: data.content\n                                    });\n                                    break;\n                                  }\n                                case \"reasoning_item\":\n                                  {\n                                    pendingEvents.push({\n                                      type: \"reasoning_item\",\n                                      content: data.content\n                                    });\n                                    break;\n                                  }\n                                case \"function_call\":\n                                  {\n                                    pendingEvents.push({\n                                      type: \"function_call\",\n                                      content: data.content\n                                    });\n                                    break;\n                                  }\n                                case \"function_call_arguments_tokens\":\n                                  {\n                                    pendingEvents.push({\n                                      type: \"function_call_arguments_tokens\",\n                                      content: data.content\n                                    });\n                                    break;\n                                  }\n                                case \"final\":\n                                  {\n                                    pendingEvents.push({\n                                      type: \"final\"\n                                    });\n                                    break;\n                                  }\n                              }\n                              if ((_data$content = data.content) != null && _data$content.run_id && !hasRunId) {\n                                hasRunId = true;\n                                resolveDustRunIdPromise(data.content.run_id);\n                              }\n                            } catch (err) {\n                              logger.error({\n                                error: err\n                              }, \"Failed parsing chunk from Dust API\");\n                            }\n                          }\n                        }\n                      });\n                      streamEvents = /*#__PURE__*/function () {\n                        var _ref = _wrapAsyncGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n                          var reader, decoder, _yield$_awaitAsyncGen, value, done, _i, _pendingEvents, event;\n                          return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n                            while (1) switch (_context7.prev = _context7.next) {\n                              case 0:\n                                if (!(!res.body || typeof res.body === \"string\")) {\n                                  _context7.next = 2;\n                                  break;\n                                }\n                                throw new Error(\"Expected a stream response, but got a string or null\");\n                              case 2:\n                                reader = res.body.getReader();\n                                decoder = new TextDecoder();\n                                _context7.prev = 4;\n                              case 5:\n                                _context7.next = 7;\n                                return _awaitAsyncGenerator(reader.read());\n                              case 7:\n                                _yield$_awaitAsyncGen = _context7.sent;\n                                value = _yield$_awaitAsyncGen.value;\n                                done = _yield$_awaitAsyncGen.done;\n                                if (!value) {\n                                  _context7.next = 21;\n                                  break;\n                                }\n                                parser.feed(decoder.decode(value, {\n                                  stream: true\n                                }));\n                                _i = 0, _pendingEvents = pendingEvents;\n                              case 13:\n                                if (!(_i < _pendingEvents.length)) {\n                                  _context7.next = 20;\n                                  break;\n                                }\n                                event = _pendingEvents[_i];\n                                _context7.next = 17;\n                                return event;\n                              case 17:\n                                _i++;\n                                _context7.next = 13;\n                                break;\n                              case 20:\n                                pendingEvents = [];\n                              case 21:\n                                if (!done) {\n                                  _context7.next = 23;\n                                  break;\n                                }\n                                return _context7.abrupt(\"break\", 25);\n                              case 23:\n                                _context7.next = 5;\n                                break;\n                              case 25:\n                                if (!hasRunId) {\n                                  // Once the stream is entirely consumed, if we haven't received a run id, reject the\n                                  // promise.\n                                  setImmediate(function () {\n                                    logger.error({}, \"No run id received.\");\n                                    rejectDustRunIdPromise(new Error(\"No run id received\"));\n                                  });\n                                }\n                                _context7.next = 33;\n                                break;\n                              case 28:\n                                _context7.prev = 28;\n                                _context7.t0 = _context7[\"catch\"](4);\n                                logger.error({\n                                  error: _context7.t0,\n                                  errorStr: JSON.stringify(_context7.t0),\n                                  errorSource: \"processStreamedRunResponse\"\n                                }, \"DustAPI error: streaming chunks\");\n                                _context7.next = 33;\n                                return {\n                                  type: \"error\",\n                                  content: {\n                                    code: \"stream_error\",\n                                    message: \"Error streaming chunks\"\n                                  }\n                                };\n                              case 33:\n                              case \"end\":\n                                return _context7.stop();\n                            }\n                          }, _callee7, null, [[4, 28]]);\n                        }));\n                        return function streamEvents() {\n                          return _ref.apply(this, arguments);\n                        };\n                      }();\n                      return _context8.abrupt(\"return\", new Ok({\n                        eventStream: streamEvents(),\n                        dustRunId: dustRunIdPromise\n                      }));\n                    case 11:\n                    case \"end\":\n                      return _context8.stop();\n                  }\n                }, _callee8);\n              }));\n              return _processStreamedRunResponse.apply(this, arguments);\n            };\n            processStreamedRunResponse = function _processStreamedRunRe(_x11, _x12) {\n              return _processStreamedRunResponse.apply(this, arguments);\n            };\n            workspaceId = _ref6.workspaceId, appId = _ref6.appId, appHash = _ref6.appHash, appSpaceId = _ref6.appSpaceId;\n            _ref7 = _temp2 === void 0 ? {\n              useWorkspaceCredentials: false\n            } : _temp2, useWorkspaceCredentials = _ref7.useWorkspaceCredentials;\n            _context9.next = 6;\n            return this.request({\n              overrideWorkspaceId: workspaceId,\n              path: \"spaces/\" + appSpaceId + \"/apps/\" + appId + \"/runs\",\n              query: new URLSearchParams({\n                use_workspace_credentials: useWorkspaceCredentials ? \"true\" : \"false\"\n              }),\n              method: \"POST\",\n              body: {\n                specification_hash: appHash,\n                config: config,\n                stream: true,\n                blocking: false,\n                inputs: inputs\n              },\n              stream: true\n            });\n          case 6:\n            res = _context9.sent;\n            if (!res.isErr()) {\n              _context9.next = 9;\n              break;\n            }\n            return _context9.abrupt(\"return\", res);\n          case 9:\n            return _context9.abrupt(\"return\", processStreamedRunResponse(res.value.response, this._logger));\n          case 10:\n          case \"end\":\n            return _context9.stop();\n        }\n      }, _callee9, this);\n    }));\n    function runAppStreamed(_x7, _x8, _x9, _x10) {\n      return _runAppStreamed.apply(this, arguments);\n    }\n    return runAppStreamed;\n  }()\n  /**\n   * This actions talks to the Dust production API to retrieve the list of data sources of the\n   * current workspace.\n   */\n  ;\n  _proto.getDataSources =\n  /*#__PURE__*/\n  function () {\n    var _getDataSources = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n      var res, r;\n      return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n        while (1) switch (_context10.prev = _context10.next) {\n          case 0:\n            _context10.next = 2;\n            return this.request({\n              method: \"GET\",\n              path: \"data_sources\"\n            });\n          case 2:\n            res = _context10.sent;\n            _context10.next = 5;\n            return this._resultFromResponse(GetDataSourcesResponseSchema, res);\n          case 5:\n            r = _context10.sent;\n            if (!r.isErr()) {\n              _context10.next = 8;\n              break;\n            }\n            return _context10.abrupt(\"return\", r);\n          case 8:\n            return _context10.abrupt(\"return\", new Ok(r.value.data_sources));\n          case 9:\n          case \"end\":\n            return _context10.stop();\n        }\n      }, _callee10, this);\n    }));\n    function getDataSources() {\n      return _getDataSources.apply(this, arguments);\n    }\n    return getDataSources;\n  }();\n  _proto.getAgentConfigurations = /*#__PURE__*/function () {\n    var _getAgentConfigurations = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee11(_ref8) {\n      var view, _ref8$includes, includes, getQueryString, queryString, path, res, r;\n      return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n        while (1) switch (_context11.prev = _context11.next) {\n          case 0:\n            getQueryString = function _getQueryString() {\n              var params = new URLSearchParams();\n              if (typeof view === \"string\") {\n                params.append(\"view\", view);\n              }\n              if (includes.includes(\"authors\")) {\n                params.append(\"withAuthors\", \"true\");\n              }\n              return params.toString();\n            };\n            view = _ref8.view, _ref8$includes = _ref8.includes, includes = _ref8$includes === void 0 ? [] : _ref8$includes; // Function to generate query parameters.\n            queryString = view || includes.length > 0 ? getQueryString() : null;\n            path = queryString ? \"assistant/agent_configurations?\" + queryString : \"assistant/agent_configurations\";\n            _context11.next = 6;\n            return this.request({\n              path: path,\n              method: \"GET\"\n            });\n          case 6:\n            res = _context11.sent;\n            _context11.next = 9;\n            return this._resultFromResponse(GetAgentConfigurationsResponseSchema, res);\n          case 9:\n            r = _context11.sent;\n            if (!r.isErr()) {\n              _context11.next = 12;\n              break;\n            }\n            return _context11.abrupt(\"return\", r);\n          case 12:\n            return _context11.abrupt(\"return\", new Ok(r.value.agentConfigurations));\n          case 13:\n          case \"end\":\n            return _context11.stop();\n        }\n      }, _callee11, this);\n    }));\n    function getAgentConfigurations(_x13) {\n      return _getAgentConfigurations.apply(this, arguments);\n    }\n    return getAgentConfigurations;\n  }();\n  _proto.postContentFragment = /*#__PURE__*/function () {\n    var _postContentFragment = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee12(_ref9) {\n      var conversationId, contentFragment, res, r;\n      return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n        while (1) switch (_context12.prev = _context12.next) {\n          case 0:\n            conversationId = _ref9.conversationId, contentFragment = _ref9.contentFragment;\n            _context12.next = 3;\n            return this.request({\n              method: \"POST\",\n              path: \"assistant/conversations/\" + conversationId + \"/content_fragments\",\n              body: _extends({}, contentFragment)\n            });\n          case 3:\n            res = _context12.sent;\n            _context12.next = 6;\n            return this._resultFromResponse(PostContentFragmentResponseSchema, res);\n          case 6:\n            r = _context12.sent;\n            if (!r.isErr()) {\n              _context12.next = 9;\n              break;\n            }\n            return _context12.abrupt(\"return\", r);\n          case 9:\n            return _context12.abrupt(\"return\", new Ok(r.value.contentFragment));\n          case 10:\n          case \"end\":\n            return _context12.stop();\n        }\n      }, _callee12, this);\n    }));\n    function postContentFragment(_x14) {\n      return _postContentFragment.apply(this, arguments);\n    }\n    return postContentFragment;\n  }();\n  _proto.createGenericAgentConfiguration = /*#__PURE__*/function () {\n    var _createGenericAgentConfiguration = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee13(_ref10) {\n      var name, description, instructions, emoji, subAgentName, subAgentDescription, subAgentInstructions, subAgentEmoji, res, r;\n      return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n        while (1) switch (_context13.prev = _context13.next) {\n          case 0:\n            name = _ref10.name, description = _ref10.description, instructions = _ref10.instructions, emoji = _ref10.emoji, subAgentName = _ref10.subAgentName, subAgentDescription = _ref10.subAgentDescription, subAgentInstructions = _ref10.subAgentInstructions, subAgentEmoji = _ref10.subAgentEmoji;\n            _context13.next = 3;\n            return this.request({\n              method: \"POST\",\n              path: \"assistant/generic_agents\",\n              body: {\n                name: name,\n                description: description,\n                instructions: instructions,\n                emoji: emoji,\n                subAgentName: subAgentName,\n                subAgentDescription: subAgentDescription,\n                subAgentInstructions: subAgentInstructions,\n                subAgentEmoji: subAgentEmoji\n              }\n            });\n          case 3:\n            res = _context13.sent;\n            _context13.next = 6;\n            return this._resultFromResponse(CreateGenericAgentConfigurationResponseSchema, res);\n          case 6:\n            r = _context13.sent;\n            if (!r.isErr()) {\n              _context13.next = 9;\n              break;\n            }\n            return _context13.abrupt(\"return\", r);\n          case 9:\n            return _context13.abrupt(\"return\", new Ok(r.value));\n          case 10:\n          case \"end\":\n            return _context13.stop();\n        }\n      }, _callee13, this);\n    }));\n    function createGenericAgentConfiguration(_x15) {\n      return _createGenericAgentConfiguration.apply(this, arguments);\n    }\n    return createGenericAgentConfiguration;\n  }() // When creating a conversation with a user message, the API returns only after the user message\n  // was created (and if applicable the associated agent messages).\n  ;\n  _proto.createConversation =\n  /*#__PURE__*/\n  function () {\n    var _createConversation = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee14(_ref11) {\n      var title, visibility, depth, message, contentFragment, contentFragments, _ref11$blocking, blocking, _ref11$skipToolsValid, skipToolsValidation, params, queryParams, res;\n      return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n        while (1) switch (_context14.prev = _context14.next) {\n          case 0:\n            title = _ref11.title, visibility = _ref11.visibility, depth = _ref11.depth, message = _ref11.message, contentFragment = _ref11.contentFragment, contentFragments = _ref11.contentFragments, _ref11$blocking = _ref11.blocking, blocking = _ref11$blocking === void 0 ? false : _ref11$blocking, _ref11$skipToolsValid = _ref11.skipToolsValidation, skipToolsValidation = _ref11$skipToolsValid === void 0 ? false : _ref11$skipToolsValid, params = _ref11.params;\n            queryParams = new URLSearchParams(params);\n            _context14.next = 4;\n            return this.request({\n              method: \"POST\",\n              path: \"assistant/conversations\",\n              query: queryParams.toString() ? queryParams : undefined,\n              body: {\n                title: title,\n                visibility: visibility,\n                depth: depth,\n                message: message,\n                contentFragment: contentFragment,\n                contentFragments: contentFragments,\n                blocking: blocking,\n                skipToolsValidation: skipToolsValidation\n              }\n            });\n          case 4:\n            res = _context14.sent;\n            return _context14.abrupt(\"return\", this._resultFromResponse(CreateConversationResponseSchema, res));\n          case 6:\n          case \"end\":\n            return _context14.stop();\n        }\n      }, _callee14, this);\n    }));\n    function createConversation(_x16) {\n      return _createConversation.apply(this, arguments);\n    }\n    return createConversation;\n  }();\n  _proto.postUserMessage = /*#__PURE__*/function () {\n    var _postUserMessage = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee15(_ref12) {\n      var conversationId, message, res, r;\n      return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n        while (1) switch (_context15.prev = _context15.next) {\n          case 0:\n            conversationId = _ref12.conversationId, message = _ref12.message;\n            _context15.next = 3;\n            return this.request({\n              method: \"POST\",\n              path: \"assistant/conversations/\" + conversationId + \"/messages\",\n              body: _extends({}, message)\n            });\n          case 3:\n            res = _context15.sent;\n            _context15.next = 6;\n            return this._resultFromResponse(PostUserMessageResponseSchema, res);\n          case 6:\n            r = _context15.sent;\n            if (!r.isErr()) {\n              _context15.next = 9;\n              break;\n            }\n            return _context15.abrupt(\"return\", r);\n          case 9:\n            return _context15.abrupt(\"return\", new Ok(r.value.message));\n          case 10:\n          case \"end\":\n            return _context15.stop();\n        }\n      }, _callee15, this);\n    }));\n    function postUserMessage(_x17) {\n      return _postUserMessage.apply(this, arguments);\n    }\n    return postUserMessage;\n  }();\n  _proto.streamAgentAnswerEvents = /*#__PURE__*/function () {\n    var _streamAgentAnswerEvents = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee16(_ref13) {\n      var _options$maxReconnect, _options$reconnectDel, _options$autoReconnec;\n      var conversation, userMessageId, signal, _ref13$options, options, agentMessages, agentMessage;\n      return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n        while (1) switch (_context16.prev = _context16.next) {\n          case 0:\n            conversation = _ref13.conversation, userMessageId = _ref13.userMessageId, signal = _ref13.signal, _ref13$options = _ref13.options, options = _ref13$options === void 0 ? {\n              maxReconnectAttempts: DEFAULT_MAX_RECONNECT_ATTEMPTS,\n              reconnectDelay: DEFAULT_RECONNECT_DELAY,\n              autoReconnect: true\n            } : _ref13$options;\n            agentMessages = conversation.content.map(function (versions) {\n              var m = versions[versions.length - 1];\n              return m;\n            }).filter(function (m) {\n              return m && m.type === \"agent_message\" && m.parentMessageId === userMessageId;\n            });\n            if (!(agentMessages.length === 0)) {\n              _context16.next = 4;\n              break;\n            }\n            return _context16.abrupt(\"return\", new Err(new Error(\"Failed to retrieve agent message\")));\n          case 4:\n            agentMessage = agentMessages[0];\n            return _context16.abrupt(\"return\", this.streamAgentMessageEvents({\n              conversation: conversation,\n              agentMessage: agentMessage,\n              signal: signal,\n              options: {\n                maxReconnectAttempts: (_options$maxReconnect = options.maxReconnectAttempts) != null ? _options$maxReconnect : DEFAULT_MAX_RECONNECT_ATTEMPTS,\n                reconnectDelay: (_options$reconnectDel = options.reconnectDelay) != null ? _options$reconnectDel : DEFAULT_RECONNECT_DELAY,\n                autoReconnect: (_options$autoReconnec = options.autoReconnect) != null ? _options$autoReconnec : true\n              }\n            }));\n          case 6:\n          case \"end\":\n            return _context16.stop();\n        }\n      }, _callee16, this);\n    }));\n    function streamAgentAnswerEvents(_x18) {\n      return _streamAgentAnswerEvents.apply(this, arguments);\n    }\n    return streamAgentAnswerEvents;\n  }();\n  _proto.streamAgentMessageEvents = /*#__PURE__*/function () {\n    var _streamAgentMessageEvents = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee19(_ref14) {\n      var _this = this;\n      var conversation, agentMessage, signal, options, maxReconnectAttempts, reconnectDelay, autoReconnect, lastEventId, terminalEventTypes, createRequest, logger, reconnectAttempts, receivedTerminalEvent, streamEventsWithReconnection;\n      return _regeneratorRuntime().wrap(function _callee19$(_context20) {\n        while (1) switch (_context20.prev = _context20.next) {\n          case 0:\n            conversation = _ref14.conversation, agentMessage = _ref14.agentMessage, signal = _ref14.signal, options = _ref14.options;\n            maxReconnectAttempts = options.maxReconnectAttempts, reconnectDelay = options.reconnectDelay, autoReconnect = options.autoReconnect;\n            lastEventId = null;\n            terminalEventTypes = [\"agent_message_success\", \"agent_error\", \"agent_generation_cancelled\", \"user_message_error\"];\n            createRequest = /*#__PURE__*/function () {\n              var _ref15 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee17(lastId) {\n                var path;\n                return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n                  while (1) switch (_context17.prev = _context17.next) {\n                    case 0:\n                      path = \"assistant/conversations/\" + conversation.sId + \"/messages/\" + agentMessage.sId + \"/events\";\n                      if (lastId) {\n                        path += \"?lastEventId=\" + lastId;\n                      }\n                      return _context17.abrupt(\"return\", _this.request({\n                        method: \"GET\",\n                        path: path,\n                        signal: signal,\n                        stream: true\n                      }));\n                    case 3:\n                    case \"end\":\n                      return _context17.stop();\n                  }\n                }, _callee17);\n              }));\n              return function createRequest(_x20) {\n                return _ref15.apply(this, arguments);\n              };\n            }();\n            logger = this._logger;\n            reconnectAttempts = 0;\n            receivedTerminalEvent = false;\n            streamEventsWithReconnection = /*#__PURE__*/function () {\n              var _ref2 = _wrapAsyncGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {\n                var _loop, _ret;\n                return _regeneratorRuntime().wrap(function _callee18$(_context19) {\n                  while (1) switch (_context19.prev = _context19.next) {\n                    case 0:\n                      _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n                        var res, error, pendingEvents, parser, reader, decoder, _yield$_awaitAsyncGen2, value, done, _iterator, _step, event;\n                        return _regeneratorRuntime().wrap(function _loop$(_context18) {\n                          while (1) switch (_context18.prev = _context18.next) {\n                            case 0:\n                              if (!(signal != null && signal.aborted)) {\n                                _context18.next = 2;\n                                break;\n                              }\n                              return _context18.abrupt(\"return\", {\n                                v: void 0\n                              });\n                            case 2:\n                              _context18.next = 4;\n                              return _awaitAsyncGenerator(createRequest(lastEventId));\n                            case 4:\n                              res = _context18.sent;\n                              if (!res.isErr()) {\n                                _context18.next = 8;\n                                break;\n                              }\n                              error = res.error;\n                              throw new Error(\"Error requesting event stream: \" + error.message);\n                            case 8:\n                              if (!(!res.value.response.ok || !res.value.response.body)) {\n                                _context18.next = 10;\n                                break;\n                              }\n                              throw new Error(\"Error requesting event stream: status_code=\" + res.value.response.status);\n                            case 10:\n                              pendingEvents = [];\n                              parser = (0,eventsource_parser__WEBPACK_IMPORTED_MODULE_3__.createParser)(function (event) {\n                                if (event.type === \"event\") {\n                                  if (event.data) {\n                                    try {\n                                      var eventData = JSON.parse(event.data);\n                                      if (eventData.eventId) {\n                                        lastEventId = eventData.eventId;\n                                      }\n                                      pendingEvents.push(eventData.data);\n                                    } catch (err) {\n                                      logger.error({\n                                        error: err\n                                      }, \"Failed parsing chunk from Dust API\");\n                                    }\n                                  }\n                                }\n                              });\n                              if (!(!res.value.response.body || typeof res.value.response.body === \"string\")) {\n                                _context18.next = 14;\n                                break;\n                              }\n                              throw new Error(\"Expected a stream response, but got a string or null\");\n                            case 14:\n                              reader = res.value.response.body.getReader();\n                              decoder = new TextDecoder();\n                              _context18.prev = 16;\n                            case 17:\n                              _context18.next = 19;\n                              return _awaitAsyncGenerator(reader.read());\n                            case 19:\n                              _yield$_awaitAsyncGen2 = _context18.sent;\n                              value = _yield$_awaitAsyncGen2.value;\n                              done = _yield$_awaitAsyncGen2.done;\n                              if (!value) {\n                                _context18.next = 33;\n                                break;\n                              }\n                              parser.feed(decoder.decode(value, {\n                                stream: true\n                              }));\n                              _iterator = _createForOfIteratorHelperLoose(pendingEvents);\n                            case 25:\n                              if ((_step = _iterator()).done) {\n                                _context18.next = 32;\n                                break;\n                              }\n                              event = _step.value;\n                              _context18.next = 29;\n                              return event;\n                            case 29:\n                              if (terminalEventTypes.includes(event.type)) {\n                                receivedTerminalEvent = true;\n                              }\n                            case 30:\n                              _context18.next = 25;\n                              break;\n                            case 32:\n                              pendingEvents = [];\n                            case 33:\n                              if (!done) {\n                                _context18.next = 35;\n                                break;\n                              }\n                              return _context18.abrupt(\"break\", 37);\n                            case 35:\n                              _context18.next = 17;\n                              break;\n                            case 37:\n                              _context18.next = 43;\n                              break;\n                            case 39:\n                              _context18.prev = 39;\n                              _context18.t0 = _context18[\"catch\"](16);\n                              logger.error({\n                                error: _context18.t0\n                              }, \"Failed processing event stream\");\n                              throw new Error(\"Error processing event stream: \" + _context18.t0);\n                            case 43:\n                              _context18.prev = 43;\n                              reader.releaseLock();\n                              return _context18.finish(43);\n                            case 46:\n                              if (!(!receivedTerminalEvent && autoReconnect)) {\n                                _context18.next = 53;\n                                break;\n                              }\n                              reconnectAttempts += 1;\n                              if (!(reconnectAttempts >= maxReconnectAttempts)) {\n                                _context18.next = 50;\n                                break;\n                              }\n                              throw new Error(\"Exceeded maximum reconnection attempts\");\n                            case 50:\n                              _context18.next = 52;\n                              return _awaitAsyncGenerator(new Promise(function (resolve) {\n                                return setTimeout(resolve, reconnectDelay);\n                              }));\n                            case 52:\n                              return _context18.abrupt(\"return\", 0);\n                            case 53:\n                              return _context18.abrupt(\"return\", {\n                                v: void 0\n                              });\n                            case 54:\n                            case \"end\":\n                              return _context18.stop();\n                          }\n                        }, _loop, null, [[16, 39, 43, 46]]);\n                      });\n                    case 1:\n                      return _context19.delegateYield(_loop(), \"t0\", 3);\n                    case 3:\n                      _ret = _context19.t0;\n                      if (!(_ret === 0)) {\n                        _context19.next = 6;\n                        break;\n                      }\n                      return _context19.abrupt(\"continue\", 1);\n                    case 6:\n                      if (!_ret) {\n                        _context19.next = 8;\n                        break;\n                      }\n                      return _context19.abrupt(\"return\", _ret.v);\n                    case 8:\n                      _context19.next = 1;\n                      break;\n                    case 10:\n                    case \"end\":\n                      return _context19.stop();\n                  }\n                }, _callee18);\n              }));\n              return function streamEventsWithReconnection() {\n                return _ref2.apply(this, arguments);\n              };\n            }();\n            return _context20.abrupt(\"return\", new Ok({\n              eventStream: streamEventsWithReconnection()\n            }));\n          case 10:\n          case \"end\":\n            return _context20.stop();\n        }\n      }, _callee19, this);\n    }));\n    function streamAgentMessageEvents(_x19) {\n      return _streamAgentMessageEvents.apply(this, arguments);\n    }\n    return streamAgentMessageEvents;\n  }();\n  _proto.cancelMessageGeneration = /*#__PURE__*/function () {\n    var _cancelMessageGeneration = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee20(_ref16) {\n      var conversationId, messageIds, res, r;\n      return _regeneratorRuntime().wrap(function _callee20$(_context21) {\n        while (1) switch (_context21.prev = _context21.next) {\n          case 0:\n            conversationId = _ref16.conversationId, messageIds = _ref16.messageIds;\n            _context21.next = 3;\n            return this.request({\n              method: \"POST\",\n              path: \"assistant/conversations/\" + conversationId + \"/cancel\",\n              body: {\n                messageIds: messageIds\n              }\n            });\n          case 3:\n            res = _context21.sent;\n            _context21.next = 6;\n            return this._resultFromResponse(CancelMessageGenerationResponseSchema, res);\n          case 6:\n            r = _context21.sent;\n            if (!r.isErr()) {\n              _context21.next = 11;\n              break;\n            }\n            return _context21.abrupt(\"return\", r);\n          case 11:\n            return _context21.abrupt(\"return\", new Ok(r.value));\n          case 12:\n          case \"end\":\n            return _context21.stop();\n        }\n      }, _callee20, this);\n    }));\n    function cancelMessageGeneration(_x21) {\n      return _cancelMessageGeneration.apply(this, arguments);\n    }\n    return cancelMessageGeneration;\n  }();\n  _proto.getConversations = /*#__PURE__*/function () {\n    var _getConversations = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee21() {\n      var res, r;\n      return _regeneratorRuntime().wrap(function _callee21$(_context22) {\n        while (1) switch (_context22.prev = _context22.next) {\n          case 0:\n            _context22.next = 2;\n            return this.request({\n              method: \"GET\",\n              path: \"assistant/conversations\"\n            });\n          case 2:\n            res = _context22.sent;\n            _context22.next = 5;\n            return this._resultFromResponse(GetConversationsResponseSchema, res);\n          case 5:\n            r = _context22.sent;\n            if (!r.isErr()) {\n              _context22.next = 8;\n              break;\n            }\n            return _context22.abrupt(\"return\", r);\n          case 8:\n            return _context22.abrupt(\"return\", new Ok(r.value.conversations));\n          case 9:\n          case \"end\":\n            return _context22.stop();\n        }\n      }, _callee21, this);\n    }));\n    function getConversations() {\n      return _getConversations.apply(this, arguments);\n    }\n    return getConversations;\n  }();\n  _proto.getConversation = /*#__PURE__*/function () {\n    var _getConversation = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee22(_ref17) {\n      var conversationId, res, r;\n      return _regeneratorRuntime().wrap(function _callee22$(_context23) {\n        while (1) switch (_context23.prev = _context23.next) {\n          case 0:\n            conversationId = _ref17.conversationId;\n            _context23.next = 3;\n            return this.request({\n              method: \"GET\",\n              path: \"assistant/conversations/\" + conversationId\n            });\n          case 3:\n            res = _context23.sent;\n            _context23.next = 6;\n            return this._resultFromResponse(GetConversationResponseSchema, res);\n          case 6:\n            r = _context23.sent;\n            if (!r.isErr()) {\n              _context23.next = 9;\n              break;\n            }\n            return _context23.abrupt(\"return\", r);\n          case 9:\n            return _context23.abrupt(\"return\", new Ok(r.value.conversation));\n          case 10:\n          case \"end\":\n            return _context23.stop();\n        }\n      }, _callee22, this);\n    }));\n    function getConversation(_x22) {\n      return _getConversation.apply(this, arguments);\n    }\n    return getConversation;\n  }();\n  _proto.getConversationFeedback = /*#__PURE__*/function () {\n    var _getConversationFeedback = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee23(_ref18) {\n      var conversationId, res, r;\n      return _regeneratorRuntime().wrap(function _callee23$(_context24) {\n        while (1) switch (_context24.prev = _context24.next) {\n          case 0:\n            conversationId = _ref18.conversationId;\n            _context24.next = 3;\n            return this.request({\n              method: \"GET\",\n              path: \"assistant/conversations/\" + conversationId + \"/feedbacks\"\n            });\n          case 3:\n            res = _context24.sent;\n            _context24.next = 6;\n            return this._resultFromResponse(GetFeedbacksResponseSchema, res);\n          case 6:\n            r = _context24.sent;\n            if (!r.isErr()) {\n              _context24.next = 9;\n              break;\n            }\n            return _context24.abrupt(\"return\", r);\n          case 9:\n            return _context24.abrupt(\"return\", new Ok(r.value.feedbacks));\n          case 10:\n          case \"end\":\n            return _context24.stop();\n        }\n      }, _callee23, this);\n    }));\n    function getConversationFeedback(_x23) {\n      return _getConversationFeedback.apply(this, arguments);\n    }\n    return getConversationFeedback;\n  }();\n  _proto.postFeedback = /*#__PURE__*/function () {\n    var _postFeedback = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee24(conversationId, messageId, feedback) {\n      var res;\n      return _regeneratorRuntime().wrap(function _callee24$(_context25) {\n        while (1) switch (_context25.prev = _context25.next) {\n          case 0:\n            _context25.next = 2;\n            return this.request({\n              method: \"POST\",\n              path: \"assistant/conversations/\" + conversationId + \"/messages/\" + messageId + \"/feedbacks\",\n              body: feedback\n            });\n          case 2:\n            res = _context25.sent;\n            return _context25.abrupt(\"return\", this._resultFromResponse(PostMessageFeedbackResponseSchema, res));\n          case 4:\n          case \"end\":\n            return _context25.stop();\n        }\n      }, _callee24, this);\n    }));\n    function postFeedback(_x24, _x25, _x26) {\n      return _postFeedback.apply(this, arguments);\n    }\n    return postFeedback;\n  }();\n  _proto.deleteFeedback = /*#__PURE__*/function () {\n    var _deleteFeedback = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee25(conversationId, messageId) {\n      var res;\n      return _regeneratorRuntime().wrap(function _callee25$(_context26) {\n        while (1) switch (_context26.prev = _context26.next) {\n          case 0:\n            _context26.next = 2;\n            return this.request({\n              method: \"DELETE\",\n              path: \"assistant/conversations/\" + conversationId + \"/messages/\" + messageId + \"/feedbacks\"\n            });\n          case 2:\n            res = _context26.sent;\n            return _context26.abrupt(\"return\", this._resultFromResponse(PostMessageFeedbackResponseSchema, res));\n          case 4:\n          case \"end\":\n            return _context26.stop();\n        }\n      }, _callee25, this);\n    }));\n    function deleteFeedback(_x27, _x28) {\n      return _deleteFeedback.apply(this, arguments);\n    }\n    return deleteFeedback;\n  }();\n  _proto.tokenize = /*#__PURE__*/function () {\n    var _tokenize = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee26(text, dataSourceId) {\n      var res, r;\n      return _regeneratorRuntime().wrap(function _callee26$(_context27) {\n        while (1) switch (_context27.prev = _context27.next) {\n          case 0:\n            _context27.next = 2;\n            return this.request({\n              method: \"POST\",\n              path: \"data_sources/\" + dataSourceId + \"/tokenize\",\n              body: {\n                text: text\n              }\n            });\n          case 2:\n            res = _context27.sent;\n            _context27.next = 5;\n            return this._resultFromResponse(TokenizeResponseSchema, res);\n          case 5:\n            r = _context27.sent;\n            if (!r.isErr()) {\n              _context27.next = 8;\n              break;\n            }\n            return _context27.abrupt(\"return\", r);\n          case 8:\n            return _context27.abrupt(\"return\", new Ok(r.value.tokens));\n          case 9:\n          case \"end\":\n            return _context27.stop();\n        }\n      }, _callee26, this);\n    }));\n    function tokenize(_x29, _x30) {\n      return _tokenize.apply(this, arguments);\n    }\n    return tokenize;\n  }();\n  _proto.upsertFolder = /*#__PURE__*/function () {\n    var _upsertFolder = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee27(_ref19) {\n      var dataSourceId, folderId, timestamp, title, parentId, parents, mimeType, sourceUrl, providerVisibility, res, r;\n      return _regeneratorRuntime().wrap(function _callee27$(_context28) {\n        while (1) switch (_context28.prev = _context28.next) {\n          case 0:\n            dataSourceId = _ref19.dataSourceId, folderId = _ref19.folderId, timestamp = _ref19.timestamp, title = _ref19.title, parentId = _ref19.parentId, parents = _ref19.parents, mimeType = _ref19.mimeType, sourceUrl = _ref19.sourceUrl, providerVisibility = _ref19.providerVisibility;\n            _context28.next = 3;\n            return this.request({\n              method: \"POST\",\n              path: \"data_sources/\" + dataSourceId + \"/folders/\" + encodeURIComponent(folderId),\n              body: {\n                timestamp: Math.floor(timestamp),\n                title: title,\n                parent_id: parentId,\n                parents: parents,\n                mime_type: mimeType,\n                source_url: sourceUrl,\n                provider_visibility: providerVisibility\n              }\n            });\n          case 3:\n            res = _context28.sent;\n            _context28.next = 6;\n            return this._resultFromResponse(UpsertFolderResponseSchema, res);\n          case 6:\n            r = _context28.sent;\n            if (!r.isErr()) {\n              _context28.next = 9;\n              break;\n            }\n            return _context28.abrupt(\"return\", r);\n          case 9:\n            return _context28.abrupt(\"return\", new Ok(r.value));\n          case 10:\n          case \"end\":\n            return _context28.stop();\n        }\n      }, _callee27, this);\n    }));\n    function upsertFolder(_x31) {\n      return _upsertFolder.apply(this, arguments);\n    }\n    return upsertFolder;\n  }();\n  _proto.deleteFolder = /*#__PURE__*/function () {\n    var _deleteFolder = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee28(_ref20) {\n      var dataSourceId, folderId, res, r;\n      return _regeneratorRuntime().wrap(function _callee28$(_context29) {\n        while (1) switch (_context29.prev = _context29.next) {\n          case 0:\n            dataSourceId = _ref20.dataSourceId, folderId = _ref20.folderId;\n            _context29.next = 3;\n            return this.request({\n              method: \"DELETE\",\n              path: \"data_sources/\" + dataSourceId + \"/folders/\" + encodeURIComponent(folderId)\n            });\n          case 3:\n            res = _context29.sent;\n            _context29.next = 6;\n            return this._resultFromResponse(DeleteFolderResponseSchema, res);\n          case 6:\n            r = _context29.sent;\n            if (!r.isErr()) {\n              _context29.next = 9;\n              break;\n            }\n            return _context29.abrupt(\"return\", r);\n          case 9:\n            return _context29.abrupt(\"return\", new Ok(r.value));\n          case 10:\n          case \"end\":\n            return _context29.stop();\n        }\n      }, _callee28, this);\n    }));\n    function deleteFolder(_x32) {\n      return _deleteFolder.apply(this, arguments);\n    }\n    return deleteFolder;\n  }();\n  _proto.uploadFile = /*#__PURE__*/function () {\n    var _uploadFile = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee29(_ref21) {\n      var contentType, fileName, fileSize, useCase, useCaseMetadata, fileObject, res, fileRes, file, formData, headers, response, _errorData$error, errorData, responseData;\n      return _regeneratorRuntime().wrap(function _callee29$(_context30) {\n        while (1) switch (_context30.prev = _context30.next) {\n          case 0:\n            contentType = _ref21.contentType, fileName = _ref21.fileName, fileSize = _ref21.fileSize, useCase = _ref21.useCase, useCaseMetadata = _ref21.useCaseMetadata, fileObject = _ref21.fileObject;\n            _context30.next = 3;\n            return this.request({\n              method: \"POST\",\n              path: \"files\",\n              body: {\n                contentType: contentType,\n                fileName: fileName,\n                fileSize: fileSize,\n                useCase: useCase,\n                useCaseMetadata: useCaseMetadata\n              }\n            });\n          case 3:\n            res = _context30.sent;\n            _context30.next = 6;\n            return this._resultFromResponse(FileUploadRequestResponseSchema, res);\n          case 6:\n            fileRes = _context30.sent;\n            if (!fileRes.isErr()) {\n              _context30.next = 9;\n              break;\n            }\n            return _context30.abrupt(\"return\", fileRes);\n          case 9:\n            file = fileRes.value.file;\n            formData = new FormData();\n            formData.append(\"file\", fileObject);\n            // Upload file to the obtained URL.\n            _context30.prev = 12;\n            _context30.next = 15;\n            return this.baseHeaders();\n          case 15:\n            headers = _context30.sent;\n            _context30.next = 18;\n            return fetch(file.uploadUrl, {\n              method: \"POST\",\n              headers: headers,\n              body: formData\n            });\n          case 18:\n            response = _context30.sent;\n            if (response.ok) {\n              _context30.next = 24;\n              break;\n            }\n            _context30.next = 22;\n            return response.json()[\"catch\"](function () {\n              return {};\n            });\n          case 22:\n            errorData = _context30.sent;\n            return _context30.abrupt(\"return\", new Err(new Error((errorData == null || (_errorData$error = errorData.error) == null ? void 0 : _errorData$error.message) || \"Failed to upload file: \" + response.status)));\n          case 24:\n            _context30.next = 26;\n            return response.json();\n          case 26:\n            responseData = _context30.sent;\n            return _context30.abrupt(\"return\", new Ok(responseData.file));\n          case 30:\n            _context30.prev = 30;\n            _context30.t0 = _context30[\"catch\"](12);\n            return _context30.abrupt(\"return\", new Err(new Error(_context30.t0 instanceof Error ? _context30.t0.message : \"Unknown error\")));\n          case 33:\n          case \"end\":\n            return _context30.stop();\n        }\n      }, _callee29, this, [[12, 30]]);\n    }));\n    function uploadFile(_x33) {\n      return _uploadFile.apply(this, arguments);\n    }\n    return uploadFile;\n  }();\n  _proto.deleteFile = /*#__PURE__*/function () {\n    var _deleteFile = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee30(_ref22) {\n      var fileID, res;\n      return _regeneratorRuntime().wrap(function _callee30$(_context31) {\n        while (1) switch (_context31.prev = _context31.next) {\n          case 0:\n            fileID = _ref22.fileID;\n            _context31.next = 3;\n            return this.request({\n              method: \"DELETE\",\n              path: \"files/\" + fileID\n            });\n          case 3:\n            res = _context31.sent;\n            return _context31.abrupt(\"return\", res);\n          case 5:\n          case \"end\":\n            return _context31.stop();\n        }\n      }, _callee30, this);\n    }));\n    function deleteFile(_x34) {\n      return _deleteFile.apply(this, arguments);\n    }\n    return deleteFile;\n  }();\n  _proto.getActiveMemberEmailsInWorkspace = /*#__PURE__*/function () {\n    var _getActiveMemberEmailsInWorkspace = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee31() {\n      var res, r;\n      return _regeneratorRuntime().wrap(function _callee31$(_context32) {\n        while (1) switch (_context32.prev = _context32.next) {\n          case 0:\n            _context32.next = 2;\n            return this.request({\n              method: \"GET\",\n              path: \"members/emails\",\n              query: new URLSearchParams({\n                activeOnly: \"true\"\n              })\n            });\n          case 2:\n            res = _context32.sent;\n            _context32.next = 5;\n            return this._resultFromResponse(GetActiveMemberEmailsInWorkspaceResponseSchema, res);\n          case 5:\n            r = _context32.sent;\n            if (!r.isErr()) {\n              _context32.next = 8;\n              break;\n            }\n            return _context32.abrupt(\"return\", r);\n          case 8:\n            return _context32.abrupt(\"return\", new Ok(r.value.emails));\n          case 9:\n          case \"end\":\n            return _context32.stop();\n        }\n      }, _callee31, this);\n    }));\n    function getActiveMemberEmailsInWorkspace() {\n      return _getActiveMemberEmailsInWorkspace.apply(this, arguments);\n    }\n    return getActiveMemberEmailsInWorkspace;\n  }();\n  _proto.getWorkspaceVerifiedDomains = /*#__PURE__*/function () {\n    var _getWorkspaceVerifiedDomains = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee32() {\n      var res, r;\n      return _regeneratorRuntime().wrap(function _callee32$(_context33) {\n        while (1) switch (_context33.prev = _context33.next) {\n          case 0:\n            _context33.next = 2;\n            return this.request({\n              method: \"GET\",\n              path: \"verified_domains\"\n            });\n          case 2:\n            res = _context33.sent;\n            _context33.next = 5;\n            return this._resultFromResponse(GetWorkspaceVerifiedDomainsResponseSchema, res);\n          case 5:\n            r = _context33.sent;\n            if (!r.isErr()) {\n              _context33.next = 8;\n              break;\n            }\n            return _context33.abrupt(\"return\", r);\n          case 8:\n            return _context33.abrupt(\"return\", new Ok(r.value.verified_domains));\n          case 9:\n          case \"end\":\n            return _context33.stop();\n        }\n      }, _callee32, this);\n    }));\n    function getWorkspaceVerifiedDomains() {\n      return _getWorkspaceVerifiedDomains.apply(this, arguments);\n    }\n    return getWorkspaceVerifiedDomains;\n  }();\n  _proto.getWorkspaceFeatureFlags = /*#__PURE__*/function () {\n    var _getWorkspaceFeatureFlags = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee33() {\n      var res, r;\n      return _regeneratorRuntime().wrap(function _callee33$(_context34) {\n        while (1) switch (_context34.prev = _context34.next) {\n          case 0:\n            _context34.next = 2;\n            return this.request({\n              method: \"GET\",\n              path: \"feature_flags\"\n            });\n          case 2:\n            res = _context34.sent;\n            _context34.next = 5;\n            return this._resultFromResponse(GetWorkspaceFeatureFlagsResponseSchema, res);\n          case 5:\n            r = _context34.sent;\n            if (!r.isErr()) {\n              _context34.next = 8;\n              break;\n            }\n            return _context34.abrupt(\"return\", r);\n          case 8:\n            return _context34.abrupt(\"return\", new Ok(r.value.feature_flags));\n          case 9:\n          case \"end\":\n            return _context34.stop();\n        }\n      }, _callee33, this);\n    }));\n    function getWorkspaceFeatureFlags() {\n      return _getWorkspaceFeatureFlags.apply(this, arguments);\n    }\n    return getWorkspaceFeatureFlags;\n  }();\n  _proto.searchDataSourceViews = /*#__PURE__*/function () {\n    var _searchDataSourceViews = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee34(searchParams) {\n      var res, r;\n      return _regeneratorRuntime().wrap(function _callee34$(_context35) {\n        while (1) switch (_context35.prev = _context35.next) {\n          case 0:\n            _context35.next = 2;\n            return this.request({\n              method: \"GET\",\n              path: \"data_source_views/search\",\n              query: searchParams\n            });\n          case 2:\n            res = _context35.sent;\n            _context35.next = 5;\n            return this._resultFromResponse(SearchDataSourceViewsResponseSchema, res);\n          case 5:\n            r = _context35.sent;\n            if (!r.isErr()) {\n              _context35.next = 8;\n              break;\n            }\n            return _context35.abrupt(\"return\", r);\n          case 8:\n            return _context35.abrupt(\"return\", new Ok(r.value.data_source_views));\n          case 9:\n          case \"end\":\n            return _context35.stop();\n        }\n      }, _callee34, this);\n    }));\n    function searchDataSourceViews(_x35) {\n      return _searchDataSourceViews.apply(this, arguments);\n    }\n    return searchDataSourceViews;\n  }();\n  _proto.patchDataSourceView = /*#__PURE__*/function () {\n    var _patchDataSourceView = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee35(dataSourceView, patch) {\n      var res, r;\n      return _regeneratorRuntime().wrap(function _callee35$(_context36) {\n        while (1) switch (_context36.prev = _context36.next) {\n          case 0:\n            _context36.next = 2;\n            return this.request({\n              method: \"PATCH\",\n              path: \"spaces/\" + dataSourceView.spaceId + \"/data_source_views/\" + dataSourceView.sId,\n              body: patch\n            });\n          case 2:\n            res = _context36.sent;\n            _context36.next = 5;\n            return this._resultFromResponse(DataSourceViewResponseSchema, res);\n          case 5:\n            r = _context36.sent;\n            if (!r.isErr()) {\n              _context36.next = 8;\n              break;\n            }\n            return _context36.abrupt(\"return\", r);\n          case 8:\n            return _context36.abrupt(\"return\", new Ok(r.value.dataSourceView));\n          case 9:\n          case \"end\":\n            return _context36.stop();\n        }\n      }, _callee35, this);\n    }));\n    function patchDataSourceView(_x36, _x37) {\n      return _patchDataSourceView.apply(this, arguments);\n    }\n    return patchDataSourceView;\n  }();\n  _proto.exportApps = /*#__PURE__*/function () {\n    var _exportApps = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee36(_ref23) {\n      var appSpaceId, res, r;\n      return _regeneratorRuntime().wrap(function _callee36$(_context37) {\n        while (1) switch (_context37.prev = _context37.next) {\n          case 0:\n            appSpaceId = _ref23.appSpaceId;\n            _context37.next = 3;\n            return this.request({\n              method: \"GET\",\n              path: \"spaces/\" + appSpaceId + \"/apps/export\"\n            });\n          case 3:\n            res = _context37.sent;\n            _context37.next = 6;\n            return this._resultFromResponse(GetAppsResponseSchema, res);\n          case 6:\n            r = _context37.sent;\n            if (!r.isErr()) {\n              _context37.next = 9;\n              break;\n            }\n            return _context37.abrupt(\"return\", r);\n          case 9:\n            return _context37.abrupt(\"return\", new Ok(r.value.apps));\n          case 10:\n          case \"end\":\n            return _context37.stop();\n        }\n      }, _callee36, this);\n    }));\n    function exportApps(_x38) {\n      return _exportApps.apply(this, arguments);\n    }\n    return exportApps;\n  }();\n  _proto.checkApps = /*#__PURE__*/function () {\n    var _checkApps = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee37(apps, appSpaceId) {\n      var res, r;\n      return _regeneratorRuntime().wrap(function _callee37$(_context38) {\n        while (1) switch (_context38.prev = _context38.next) {\n          case 0:\n            _context38.next = 2;\n            return this.request({\n              method: \"POST\",\n              path: \"spaces/\" + appSpaceId + \"/apps/check\",\n              body: apps\n            });\n          case 2:\n            res = _context38.sent;\n            _context38.next = 5;\n            return this._resultFromResponse(AppsCheckResponseSchema, res);\n          case 5:\n            r = _context38.sent;\n            if (!r.isErr()) {\n              _context38.next = 8;\n              break;\n            }\n            return _context38.abrupt(\"return\", r);\n          case 8:\n            return _context38.abrupt(\"return\", new Ok(r.value.apps));\n          case 9:\n          case \"end\":\n            return _context38.stop();\n        }\n      }, _callee37, this);\n    }));\n    function checkApps(_x39, _x40) {\n      return _checkApps.apply(this, arguments);\n    }\n    return checkApps;\n  }();\n  _proto.getSpaces = /*#__PURE__*/function () {\n    var _getSpaces = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee38() {\n      var res, r;\n      return _regeneratorRuntime().wrap(function _callee38$(_context39) {\n        while (1) switch (_context39.prev = _context39.next) {\n          case 0:\n            _context39.next = 2;\n            return this.request({\n              method: \"GET\",\n              path: \"spaces\"\n            });\n          case 2:\n            res = _context39.sent;\n            _context39.next = 5;\n            return this._resultFromResponse(GetSpacesResponseSchema, res);\n          case 5:\n            r = _context39.sent;\n            if (!r.isErr()) {\n              _context39.next = 8;\n              break;\n            }\n            return _context39.abrupt(\"return\", r);\n          case 8:\n            return _context39.abrupt(\"return\", new Ok(r.value.spaces));\n          case 9:\n          case \"end\":\n            return _context39.stop();\n        }\n      }, _callee38, this);\n    }));\n    function getSpaces() {\n      return _getSpaces.apply(this, arguments);\n    }\n    return getSpaces;\n  }();\n  _proto.getMCPServerViews = /*#__PURE__*/function () {\n    var _getMCPServerViews = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee39(spaceId, includeAuto) {\n      var res, r;\n      return _regeneratorRuntime().wrap(function _callee39$(_context40) {\n        while (1) switch (_context40.prev = _context40.next) {\n          case 0:\n            if (includeAuto === void 0) {\n              includeAuto = false;\n            }\n            _context40.next = 3;\n            return this.request({\n              method: \"GET\",\n              path: \"spaces/\" + spaceId + \"/mcp_server_views\",\n              query: new URLSearchParams({\n                includeAuto: includeAuto.toString()\n              })\n            });\n          case 3:\n            res = _context40.sent;\n            _context40.next = 6;\n            return this._resultFromResponse(GetMCPServerViewsResponseSchema, res);\n          case 6:\n            r = _context40.sent;\n            if (!r.isErr()) {\n              _context40.next = 9;\n              break;\n            }\n            return _context40.abrupt(\"return\", r);\n          case 9:\n            return _context40.abrupt(\"return\", new Ok(r.value.serverViews));\n          case 10:\n          case \"end\":\n            return _context40.stop();\n        }\n      }, _callee39, this);\n    }));\n    function getMCPServerViews(_x41, _x42) {\n      return _getMCPServerViews.apply(this, arguments);\n    }\n    return getMCPServerViews;\n  }();\n  _proto.searchNodes = /*#__PURE__*/function () {\n    var _searchNodes = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee40(searchParams) {\n      var res, r;\n      return _regeneratorRuntime().wrap(function _callee40$(_context41) {\n        while (1) switch (_context41.prev = _context41.next) {\n          case 0:\n            _context41.next = 2;\n            return this.request({\n              method: \"POST\",\n              path: \"search\",\n              body: searchParams\n            });\n          case 2:\n            res = _context41.sent;\n            _context41.next = 5;\n            return this._resultFromResponse(PostWorkspaceSearchResponseBodySchema, res);\n          case 5:\n            r = _context41.sent;\n            if (!r.isErr()) {\n              _context41.next = 8;\n              break;\n            }\n            return _context41.abrupt(\"return\", r);\n          case 8:\n            return _context41.abrupt(\"return\", new Ok(r.value.nodes));\n          case 9:\n          case \"end\":\n            return _context41.stop();\n        }\n      }, _callee40, this);\n    }));\n    function searchNodes(_x43) {\n      return _searchNodes.apply(this, arguments);\n    }\n    return searchNodes;\n  }();\n  _proto.retryMessage = /*#__PURE__*/function () {\n    var _retryMessage = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee41(_ref24) {\n      var conversationId, messageId, _ref24$blockedOnly, blockedOnly, query, res, r;\n      return _regeneratorRuntime().wrap(function _callee41$(_context42) {\n        while (1) switch (_context42.prev = _context42.next) {\n          case 0:\n            conversationId = _ref24.conversationId, messageId = _ref24.messageId, _ref24$blockedOnly = _ref24.blockedOnly, blockedOnly = _ref24$blockedOnly === void 0 ? false : _ref24$blockedOnly;\n            query = blockedOnly ? new URLSearchParams({\n              blocked_only: \"true\"\n            }) : undefined;\n            _context42.next = 4;\n            return this.request({\n              method: \"POST\",\n              path: \"assistant/conversations/\" + conversationId + \"/messages/\" + messageId + \"/retry\",\n              query: query\n            });\n          case 4:\n            res = _context42.sent;\n            _context42.next = 7;\n            return this._resultFromResponse(RetryMessageResponseSchema, res);\n          case 7:\n            r = _context42.sent;\n            if (!r.isErr()) {\n              _context42.next = 10;\n              break;\n            }\n            return _context42.abrupt(\"return\", r);\n          case 10:\n            return _context42.abrupt(\"return\", new Ok(r.value.message));\n          case 11:\n          case \"end\":\n            return _context42.stop();\n        }\n      }, _callee41, this);\n    }));\n    function retryMessage(_x44) {\n      return _retryMessage.apply(this, arguments);\n    }\n    return retryMessage;\n  }();\n  _proto._fetchWithError = /*#__PURE__*/function () {\n    var _fetchWithError2 = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee42(url, _temp3) {\n      var _ref25, _ref25$method, method, _ref25$headers, headers, body, signal, _ref25$stream, stream, now, res, responseBody, response, duration, err;\n      return _regeneratorRuntime().wrap(function _callee42$(_context43) {\n        while (1) switch (_context43.prev = _context43.next) {\n          case 0:\n            _ref25 = _temp3 === void 0 ? {} : _temp3, _ref25$method = _ref25.method, method = _ref25$method === void 0 ? \"GET\" : _ref25$method, _ref25$headers = _ref25.headers, headers = _ref25$headers === void 0 ? {} : _ref25$headers, body = _ref25.body, signal = _ref25.signal, _ref25$stream = _ref25.stream, stream = _ref25$stream === void 0 ? false : _ref25$stream;\n            now = Date.now();\n            _context43.prev = 2;\n            _context43.next = 5;\n            return fetch(url, {\n              method: method,\n              headers: headers,\n              body: body,\n              signal: signal\n            });\n          case 5:\n            res = _context43.sent;\n            if (!(stream && res.body)) {\n              _context43.next = 10;\n              break;\n            }\n            _context43.t0 = res.body;\n            _context43.next = 13;\n            break;\n          case 10:\n            _context43.next = 12;\n            return res.text();\n          case 12:\n            _context43.t0 = _context43.sent;\n          case 13:\n            responseBody = _context43.t0;\n            response = {\n              status: res.status,\n              url: res.url,\n              body: responseBody,\n              ok: res.ok\n            };\n            return _context43.abrupt(\"return\", new Ok({\n              response: response,\n              duration: Date.now() - now\n            }));\n          case 18:\n            _context43.prev = 18;\n            _context43.t1 = _context43[\"catch\"](2);\n            duration = Date.now() - now;\n            err = {\n              type: \"unexpected_network_error\",\n              message: \"Unexpected network error from DustAPI: \" + _context43.t1\n            };\n            this._logger.error({\n              dustError: err,\n              url: url,\n              duration: duration,\n              connectorsError: err,\n              error: _context43.t1\n            }, \"DustAPI error\");\n            return _context43.abrupt(\"return\", new Err(err));\n          case 24:\n          case \"end\":\n            return _context43.stop();\n        }\n      }, _callee42, this, [[2, 18]]);\n    }));\n    function _fetchWithError(_x45, _x46) {\n      return _fetchWithError2.apply(this, arguments);\n    }\n    return _fetchWithError;\n  }() // MCP Related.\n  ;\n  _proto.getBlockedActions =\n  /*#__PURE__*/\n  function () {\n    var _getBlockedActions = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee43(_ref26) {\n      var conversationId, res;\n      return _regeneratorRuntime().wrap(function _callee43$(_context44) {\n        while (1) switch (_context44.prev = _context44.next) {\n          case 0:\n            conversationId = _ref26.conversationId;\n            _context44.next = 3;\n            return this.request({\n              method: \"GET\",\n              path: \"assistant/conversations/\" + conversationId + \"/actions/blocked\"\n            });\n          case 3:\n            res = _context44.sent;\n            return _context44.abrupt(\"return\", this._resultFromResponse(BlockedActionsResponseSchema, res));\n          case 5:\n          case \"end\":\n            return _context44.stop();\n        }\n      }, _callee43, this);\n    }));\n    function getBlockedActions(_x47) {\n      return _getBlockedActions.apply(this, arguments);\n    }\n    return getBlockedActions;\n  }();\n  _proto.validateAction = /*#__PURE__*/function () {\n    var _validateAction = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee44(_ref27) {\n      var conversationId, messageId, actionId, approved, res;\n      return _regeneratorRuntime().wrap(function _callee44$(_context45) {\n        while (1) switch (_context45.prev = _context45.next) {\n          case 0:\n            conversationId = _ref27.conversationId, messageId = _ref27.messageId, actionId = _ref27.actionId, approved = _ref27.approved;\n            _context45.next = 3;\n            return this.request({\n              method: \"POST\",\n              path: \"assistant/conversations/\" + conversationId + \"/messages/\" + messageId + \"/validate-action\",\n              body: {\n                actionId: actionId,\n                approved: approved\n              }\n            });\n          case 3:\n            res = _context45.sent;\n            return _context45.abrupt(\"return\", this._resultFromResponse(ValidateActionResponseSchema, res));\n          case 5:\n          case \"end\":\n            return _context45.stop();\n        }\n      }, _callee44, this);\n    }));\n    function validateAction(_x48) {\n      return _validateAction.apply(this, arguments);\n    }\n    return validateAction;\n  }();\n  _proto.registerMCPServer = /*#__PURE__*/function () {\n    var _registerMCPServer = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee45(_ref28) {\n      var serverName, body, res;\n      return _regeneratorRuntime().wrap(function _callee45$(_context46) {\n        while (1) switch (_context46.prev = _context46.next) {\n          case 0:\n            serverName = _ref28.serverName;\n            body = {\n              serverName: serverName\n            };\n            _context46.next = 4;\n            return this.request({\n              method: \"POST\",\n              path: \"mcp/register\",\n              body: body\n            });\n          case 4:\n            res = _context46.sent;\n            return _context46.abrupt(\"return\", this._resultFromResponse(RegisterMCPResponseSchema, res));\n          case 6:\n          case \"end\":\n            return _context46.stop();\n        }\n      }, _callee45, this);\n    }));\n    function registerMCPServer(_x49) {\n      return _registerMCPServer.apply(this, arguments);\n    }\n    return registerMCPServer;\n  }();\n  _proto.heartbeatMCPServer = /*#__PURE__*/function () {\n    var _heartbeatMCPServer = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee46(_ref29) {\n      var serverId, body, res;\n      return _regeneratorRuntime().wrap(function _callee46$(_context47) {\n        while (1) switch (_context47.prev = _context47.next) {\n          case 0:\n            serverId = _ref29.serverId;\n            body = {\n              serverId: serverId\n            };\n            _context47.next = 4;\n            return this.request({\n              method: \"POST\",\n              path: \"mcp/heartbeat\",\n              body: body\n            });\n          case 4:\n            res = _context47.sent;\n            return _context47.abrupt(\"return\", this._resultFromResponse(HeartbeatMCPResponseSchema, res));\n          case 6:\n          case \"end\":\n            return _context47.stop();\n        }\n      }, _callee46, this);\n    }));\n    function heartbeatMCPServer(_x50) {\n      return _heartbeatMCPServer.apply(this, arguments);\n    }\n    return heartbeatMCPServer;\n  }();\n  _proto.postMCPResults = /*#__PURE__*/function () {\n    var _postMCPResults = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee47(_ref30) {\n      var result, serverId, body, res;\n      return _regeneratorRuntime().wrap(function _callee47$(_context48) {\n        while (1) switch (_context48.prev = _context48.next) {\n          case 0:\n            result = _ref30.result, serverId = _ref30.serverId;\n            body = {\n              result: result,\n              serverId: serverId\n            };\n            _context48.next = 4;\n            return this.request({\n              method: \"POST\",\n              path: \"mcp/results\",\n              body: body\n            });\n          case 4:\n            res = _context48.sent;\n            return _context48.abrupt(\"return\", this._resultFromResponse(PostMCPResultsResponseSchema, res));\n          case 6:\n          case \"end\":\n            return _context48.stop();\n        }\n      }, _callee47, this);\n    }));\n    function postMCPResults(_x51) {\n      return _postMCPResults.apply(this, arguments);\n    }\n    return postMCPResults;\n  }();\n  _proto.getMCPRequestsConnectionDetails = /*#__PURE__*/function () {\n    var _getMCPRequestsConnectionDetails = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee48(_ref31) {\n      var serverId, lastEventId, url, params, headers;\n      return _regeneratorRuntime().wrap(function _callee48$(_context49) {\n        while (1) switch (_context49.prev = _context49.next) {\n          case 0:\n            serverId = _ref31.serverId, lastEventId = _ref31.lastEventId;\n            url = this.apiUrl() + \"/api/v1/w/\" + this.workspaceId() + \"/mcp/requests\";\n            params = new URLSearchParams(_extends({\n              serverId: serverId\n            }, lastEventId ? {\n              lastEventId: lastEventId\n            } : {}));\n            _context49.next = 5;\n            return this.baseHeaders();\n          case 5:\n            headers = _context49.sent;\n            return _context49.abrupt(\"return\", new Ok({\n              url: url + \"?\" + params.toString(),\n              headers: headers\n            }));\n          case 7:\n          case \"end\":\n            return _context49.stop();\n        }\n      }, _callee48, this);\n    }));\n    function getMCPRequestsConnectionDetails(_x52) {\n      return _getMCPRequestsConnectionDetails.apply(this, arguments);\n    }\n    return getMCPRequestsConnectionDetails;\n  }();\n  _proto._resultFromResponse = /*#__PURE__*/function () {\n    var _resultFromResponse2 = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee49(schema, res) {\n      var err, text, response, r, rErr, _err, _err2;\n      return _regeneratorRuntime().wrap(function _callee49$(_context50) {\n        while (1) switch (_context50.prev = _context50.next) {\n          case 0:\n            if (!res.isErr()) {\n              _context50.next = 2;\n              break;\n            }\n            return _context50.abrupt(\"return\", res);\n          case 2:\n            if (!(res.value.response.status === 413)) {\n              _context50.next = 6;\n              break;\n            }\n            err = {\n              type: \"content_too_large\",\n              message: \"Your request content is too large, please try again with a shorter content.\"\n            };\n            this._logger.error({\n              dustError: err,\n              status: res.value.response.status,\n              url: res.value.response.url,\n              duration: res.value.duration\n            }, \"DustAPI error\");\n            return _context50.abrupt(\"return\", new Err(err));\n          case 6:\n            _context50.next = 8;\n            return textFromResponse(res.value.response);\n          case 8:\n            text = _context50.sent;\n            _context50.prev = 9;\n            response = JSON.parse(text);\n            r = schema.safeParse(response); // This assume that safe parsing means a 200 status.\n            if (!r.success) {\n              _context50.next = 16;\n              break;\n            }\n            return _context50.abrupt(\"return\", new Ok(r.data));\n          case 16:\n            // We couldn't parse the response directly, maybe it's an error\n            rErr = APIErrorSchema.safeParse(response[\"error\"]);\n            if (!rErr.success) {\n              _context50.next = 22;\n              break;\n            }\n            // Successfully parsed an error\n            this._logger.error({\n              dustError: rErr.data,\n              status: res.value.response.status,\n              url: res.value.response.url,\n              duration: res.value.duration\n            }, \"DustAPI error\");\n            return _context50.abrupt(\"return\", new Err(rErr.data));\n          case 22:\n            // Unexpected response format (neither an error nor a valid response)\n            _err = {\n              type: \"unexpected_response_format\",\n              message: \"Unexpected response format from DustAPI calling \" + (res.value.response.url + \" : \" + r.error.message)\n            };\n            this._logger.error({\n              dustError: _err,\n              parseError: r.error.message,\n              rawText: text,\n              status: res.value.response.status,\n              url: res.value.response.url,\n              duration: res.value.duration\n            }, \"DustAPI error\");\n            return _context50.abrupt(\"return\", new Err(_err));\n          case 25:\n            _context50.next = 32;\n            break;\n          case 27:\n            _context50.prev = 27;\n            _context50.t0 = _context50[\"catch\"](9);\n            _err2 = {\n              type: \"unexpected_response_format\",\n              message: \"Fail to parse response from DustAPI calling \" + (res.value.response.url + \" : \" + _context50.t0)\n            };\n            this._logger.error({\n              dustError: _err2,\n              error: _context50.t0,\n              rawText: text,\n              status: res.value.response.status,\n              url: res.value.response.url,\n              duration: res.value.duration\n            }, \"DustAPI error\");\n            return _context50.abrupt(\"return\", new Err(_err2));\n          case 32:\n          case \"end\":\n            return _context50.stop();\n        }\n      }, _callee49, this, [[9, 27]]);\n    }));\n    function _resultFromResponse(_x53, _x54) {\n      return _resultFromResponse2.apply(this, arguments);\n    }\n    return _resultFromResponse;\n  }();\n  return DustAPI;\n}();\n\n\n//# sourceMappingURL=client.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@dust-tt/client/dist/client.esm.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@dust-tt/client/node_modules/zod/lib/index.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@dust-tt/client/node_modules/zod/lib/index.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BRAND: () => (/* binding */ BRAND),\n/* harmony export */   DIRTY: () => (/* binding */ DIRTY),\n/* harmony export */   EMPTY_PATH: () => (/* binding */ EMPTY_PATH),\n/* harmony export */   INVALID: () => (/* binding */ INVALID),\n/* harmony export */   NEVER: () => (/* binding */ NEVER),\n/* harmony export */   OK: () => (/* binding */ OK),\n/* harmony export */   ParseStatus: () => (/* binding */ ParseStatus),\n/* harmony export */   Schema: () => (/* binding */ ZodType),\n/* harmony export */   ZodAny: () => (/* binding */ ZodAny),\n/* harmony export */   ZodArray: () => (/* binding */ ZodArray),\n/* harmony export */   ZodBigInt: () => (/* binding */ ZodBigInt),\n/* harmony export */   ZodBoolean: () => (/* binding */ ZodBoolean),\n/* harmony export */   ZodBranded: () => (/* binding */ ZodBranded),\n/* harmony export */   ZodCatch: () => (/* binding */ ZodCatch),\n/* harmony export */   ZodDate: () => (/* binding */ ZodDate),\n/* harmony export */   ZodDefault: () => (/* binding */ ZodDefault),\n/* harmony export */   ZodDiscriminatedUnion: () => (/* binding */ ZodDiscriminatedUnion),\n/* harmony export */   ZodEffects: () => (/* binding */ ZodEffects),\n/* harmony export */   ZodEnum: () => (/* binding */ ZodEnum),\n/* harmony export */   ZodError: () => (/* binding */ ZodError),\n/* harmony export */   ZodFirstPartyTypeKind: () => (/* binding */ ZodFirstPartyTypeKind),\n/* harmony export */   ZodFunction: () => (/* binding */ ZodFunction),\n/* harmony export */   ZodIntersection: () => (/* binding */ ZodIntersection),\n/* harmony export */   ZodIssueCode: () => (/* binding */ ZodIssueCode),\n/* harmony export */   ZodLazy: () => (/* binding */ ZodLazy),\n/* harmony export */   ZodLiteral: () => (/* binding */ ZodLiteral),\n/* harmony export */   ZodMap: () => (/* binding */ ZodMap),\n/* harmony export */   ZodNaN: () => (/* binding */ ZodNaN),\n/* harmony export */   ZodNativeEnum: () => (/* binding */ ZodNativeEnum),\n/* harmony export */   ZodNever: () => (/* binding */ ZodNever),\n/* harmony export */   ZodNull: () => (/* binding */ ZodNull),\n/* harmony export */   ZodNullable: () => (/* binding */ ZodNullable),\n/* harmony export */   ZodNumber: () => (/* binding */ ZodNumber),\n/* harmony export */   ZodObject: () => (/* binding */ ZodObject),\n/* harmony export */   ZodOptional: () => (/* binding */ ZodOptional),\n/* harmony export */   ZodParsedType: () => (/* binding */ ZodParsedType),\n/* harmony export */   ZodPipeline: () => (/* binding */ ZodPipeline),\n/* harmony export */   ZodPromise: () => (/* binding */ ZodPromise),\n/* harmony export */   ZodReadonly: () => (/* binding */ ZodReadonly),\n/* harmony export */   ZodRecord: () => (/* binding */ ZodRecord),\n/* harmony export */   ZodSchema: () => (/* binding */ ZodType),\n/* harmony export */   ZodSet: () => (/* binding */ ZodSet),\n/* harmony export */   ZodString: () => (/* binding */ ZodString),\n/* harmony export */   ZodSymbol: () => (/* binding */ ZodSymbol),\n/* harmony export */   ZodTransformer: () => (/* binding */ ZodEffects),\n/* harmony export */   ZodTuple: () => (/* binding */ ZodTuple),\n/* harmony export */   ZodType: () => (/* binding */ ZodType),\n/* harmony export */   ZodUndefined: () => (/* binding */ ZodUndefined),\n/* harmony export */   ZodUnion: () => (/* binding */ ZodUnion),\n/* harmony export */   ZodUnknown: () => (/* binding */ ZodUnknown),\n/* harmony export */   ZodVoid: () => (/* binding */ ZodVoid),\n/* harmony export */   addIssueToContext: () => (/* binding */ addIssueToContext),\n/* harmony export */   any: () => (/* binding */ anyType),\n/* harmony export */   array: () => (/* binding */ arrayType),\n/* harmony export */   bigint: () => (/* binding */ bigIntType),\n/* harmony export */   boolean: () => (/* binding */ booleanType),\n/* harmony export */   coerce: () => (/* binding */ coerce),\n/* harmony export */   custom: () => (/* binding */ custom),\n/* harmony export */   date: () => (/* binding */ dateType),\n/* harmony export */   datetimeRegex: () => (/* binding */ datetimeRegex),\n/* harmony export */   \"default\": () => (/* binding */ z),\n/* harmony export */   defaultErrorMap: () => (/* binding */ errorMap),\n/* harmony export */   discriminatedUnion: () => (/* binding */ discriminatedUnionType),\n/* harmony export */   effect: () => (/* binding */ effectsType),\n/* harmony export */   \"enum\": () => (/* binding */ enumType),\n/* harmony export */   \"function\": () => (/* binding */ functionType),\n/* harmony export */   getErrorMap: () => (/* binding */ getErrorMap),\n/* harmony export */   getParsedType: () => (/* binding */ getParsedType),\n/* harmony export */   \"instanceof\": () => (/* binding */ instanceOfType),\n/* harmony export */   intersection: () => (/* binding */ intersectionType),\n/* harmony export */   isAborted: () => (/* binding */ isAborted),\n/* harmony export */   isAsync: () => (/* binding */ isAsync),\n/* harmony export */   isDirty: () => (/* binding */ isDirty),\n/* harmony export */   isValid: () => (/* binding */ isValid),\n/* harmony export */   late: () => (/* binding */ late),\n/* harmony export */   lazy: () => (/* binding */ lazyType),\n/* harmony export */   literal: () => (/* binding */ literalType),\n/* harmony export */   makeIssue: () => (/* binding */ makeIssue),\n/* harmony export */   map: () => (/* binding */ mapType),\n/* harmony export */   nan: () => (/* binding */ nanType),\n/* harmony export */   nativeEnum: () => (/* binding */ nativeEnumType),\n/* harmony export */   never: () => (/* binding */ neverType),\n/* harmony export */   \"null\": () => (/* binding */ nullType),\n/* harmony export */   nullable: () => (/* binding */ nullableType),\n/* harmony export */   number: () => (/* binding */ numberType),\n/* harmony export */   object: () => (/* binding */ objectType),\n/* harmony export */   objectUtil: () => (/* binding */ objectUtil),\n/* harmony export */   oboolean: () => (/* binding */ oboolean),\n/* harmony export */   onumber: () => (/* binding */ onumber),\n/* harmony export */   optional: () => (/* binding */ optionalType),\n/* harmony export */   ostring: () => (/* binding */ ostring),\n/* harmony export */   pipeline: () => (/* binding */ pipelineType),\n/* harmony export */   preprocess: () => (/* binding */ preprocessType),\n/* harmony export */   promise: () => (/* binding */ promiseType),\n/* harmony export */   quotelessJson: () => (/* binding */ quotelessJson),\n/* harmony export */   record: () => (/* binding */ recordType),\n/* harmony export */   set: () => (/* binding */ setType),\n/* harmony export */   setErrorMap: () => (/* binding */ setErrorMap),\n/* harmony export */   strictObject: () => (/* binding */ strictObjectType),\n/* harmony export */   string: () => (/* binding */ stringType),\n/* harmony export */   symbol: () => (/* binding */ symbolType),\n/* harmony export */   transformer: () => (/* binding */ effectsType),\n/* harmony export */   tuple: () => (/* binding */ tupleType),\n/* harmony export */   undefined: () => (/* binding */ undefinedType),\n/* harmony export */   union: () => (/* binding */ unionType),\n/* harmony export */   unknown: () => (/* binding */ unknownType),\n/* harmony export */   util: () => (/* binding */ util),\n/* harmony export */   \"void\": () => (/* binding */ voidType),\n/* harmony export */   z: () => (/* binding */ z)\n/* harmony export */ });\nvar util;\n(function (util) {\n    util.assertEqual = (val) => val;\n    function assertIs(_arg) { }\n    util.assertIs = assertIs;\n    function assertNever(_x) {\n        throw new Error();\n    }\n    util.assertNever = assertNever;\n    util.arrayToEnum = (items) => {\n        const obj = {};\n        for (const item of items) {\n            obj[item] = item;\n        }\n        return obj;\n    };\n    util.getValidEnumValues = (obj) => {\n        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\n        const filtered = {};\n        for (const k of validKeys) {\n            filtered[k] = obj[k];\n        }\n        return util.objectValues(filtered);\n    };\n    util.objectValues = (obj) => {\n        return util.objectKeys(obj).map(function (e) {\n            return obj[e];\n        });\n    };\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\n        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban\n        : (object) => {\n            const keys = [];\n            for (const key in object) {\n                if (Object.prototype.hasOwnProperty.call(object, key)) {\n                    keys.push(key);\n                }\n            }\n            return keys;\n        };\n    util.find = (arr, checker) => {\n        for (const item of arr) {\n            if (checker(item))\n                return item;\n        }\n        return undefined;\n    };\n    util.isInteger = typeof Number.isInteger === \"function\"\n        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban\n        : (val) => typeof val === \"number\" && isFinite(val) && Math.floor(val) === val;\n    function joinValues(array, separator = \" | \") {\n        return array\n            .map((val) => (typeof val === \"string\" ? `'${val}'` : val))\n            .join(separator);\n    }\n    util.joinValues = joinValues;\n    util.jsonStringifyReplacer = (_, value) => {\n        if (typeof value === \"bigint\") {\n            return value.toString();\n        }\n        return value;\n    };\n})(util || (util = {}));\nvar objectUtil;\n(function (objectUtil) {\n    objectUtil.mergeShapes = (first, second) => {\n        return {\n            ...first,\n            ...second, // second overwrites first\n        };\n    };\n})(objectUtil || (objectUtil = {}));\nconst ZodParsedType = util.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\",\n]);\nconst getParsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"undefined\":\n            return ZodParsedType.undefined;\n        case \"string\":\n            return ZodParsedType.string;\n        case \"number\":\n            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n        case \"boolean\":\n            return ZodParsedType.boolean;\n        case \"function\":\n            return ZodParsedType.function;\n        case \"bigint\":\n            return ZodParsedType.bigint;\n        case \"symbol\":\n            return ZodParsedType.symbol;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return ZodParsedType.array;\n            }\n            if (data === null) {\n                return ZodParsedType.null;\n            }\n            if (data.then &&\n                typeof data.then === \"function\" &&\n                data.catch &&\n                typeof data.catch === \"function\") {\n                return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n        default:\n            return ZodParsedType.unknown;\n    }\n};\n\nconst ZodIssueCode = util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n    \"not_finite\",\n]);\nconst quotelessJson = (obj) => {\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nclass ZodError extends Error {\n    get errors() {\n        return this.issues;\n    }\n    constructor(issues) {\n        super();\n        this.issues = [];\n        this.addIssue = (sub) => {\n            this.issues = [...this.issues, sub];\n        };\n        this.addIssues = (subs = []) => {\n            this.issues = [...this.issues, ...subs];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        }\n        else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper ||\n            function (issue) {\n                return issue.message;\n            };\n        const fieldErrors = { _errors: [] };\n        const processError = (error) => {\n            for (const issue of error.issues) {\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                }\n                else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                }\n                else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                }\n                else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                }\n                else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while (i < issue.path.length) {\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || { _errors: [] };\n                            // if (typeof el === \"string\") {\n                            //   curr[el] = curr[el] || { _errors: [] };\n                            // } else if (typeof el === \"number\") {\n                            //   const errorArray: any = [];\n                            //   errorArray._errors = [];\n                            //   curr[el] = curr[el] || errorArray;\n                            // }\n                        }\n                        else {\n                            curr[el] = curr[el] || { _errors: [] };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    static assert(value) {\n        if (!(value instanceof ZodError)) {\n            throw new Error(`Not a ZodError: ${value}`);\n        }\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten(mapper = (issue) => issue.message) {\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues) {\n            if (sub.path.length > 0) {\n                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\n                fieldErrors[sub.path[0]].push(mapper(sub));\n            }\n            else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return { formErrors, fieldErrors };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n}\nZodError.create = (issues) => {\n    const error = new ZodError(issues);\n    return error;\n};\n\nconst errorMap = (issue, _ctx) => {\n    let message;\n    switch (issue.code) {\n        case ZodIssueCode.invalid_type:\n            if (issue.received === ZodParsedType.undefined) {\n                message = \"Required\";\n            }\n            else {\n                message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n        case ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;\n            break;\n        case ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, \", \")}`;\n            break;\n        case ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;\n            break;\n        case ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n        case ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n        case ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n        case ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n        case ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"includes\" in issue.validation) {\n                    message = `Invalid input: must include \"${issue.validation.includes}\"`;\n                    if (typeof issue.validation.position === \"number\") {\n                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n                    }\n                }\n                else if (\"startsWith\" in issue.validation) {\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                }\n                else if (\"endsWith\" in issue.validation) {\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                }\n                else {\n                    util.assertNever(issue.validation);\n                }\n            }\n            else if (issue.validation !== \"regex\") {\n                message = `Invalid ${issue.validation}`;\n            }\n            else {\n                message = \"Invalid\";\n            }\n            break;\n        case ZodIssueCode.too_small:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${new Date(Number(issue.minimum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.too_big:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"bigint\")\n                message = `BigInt must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `smaller than or equal to`\n                        : `smaller than`} ${new Date(Number(issue.maximum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n        case ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n        case ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n        default:\n            message = _ctx.defaultError;\n            util.assertNever(issue);\n    }\n    return { message };\n};\n\nlet overrideErrorMap = errorMap;\nfunction setErrorMap(map) {\n    overrideErrorMap = map;\n}\nfunction getErrorMap() {\n    return overrideErrorMap;\n}\n\nconst makeIssue = (params) => {\n    const { data, path, errorMaps, issueData } = params;\n    const fullPath = [...path, ...(issueData.path || [])];\n    const fullIssue = {\n        ...issueData,\n        path: fullPath,\n    };\n    if (issueData.message !== undefined) {\n        return {\n            ...issueData,\n            path: fullPath,\n            message: issueData.message,\n        };\n    }\n    let errorMessage = \"\";\n    const maps = errorMaps\n        .filter((m) => !!m)\n        .slice()\n        .reverse();\n    for (const map of maps) {\n        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n    }\n    return {\n        ...issueData,\n        path: fullPath,\n        message: errorMessage,\n    };\n};\nconst EMPTY_PATH = [];\nfunction addIssueToContext(ctx, issueData) {\n    const overrideMap = getErrorMap();\n    const issue = makeIssue({\n        issueData: issueData,\n        data: ctx.data,\n        path: ctx.path,\n        errorMaps: [\n            ctx.common.contextualErrorMap, // contextual error map is first priority\n            ctx.schemaErrorMap, // then schema-bound map if available\n            overrideMap, // then global override map\n            overrideMap === errorMap ? undefined : errorMap, // then global default map\n        ].filter((x) => !!x),\n    });\n    ctx.common.issues.push(issue);\n}\nclass ParseStatus {\n    constructor() {\n        this.value = \"valid\";\n    }\n    dirty() {\n        if (this.value === \"valid\")\n            this.value = \"dirty\";\n    }\n    abort() {\n        if (this.value !== \"aborted\")\n            this.value = \"aborted\";\n    }\n    static mergeArray(status, results) {\n        const arrayValue = [];\n        for (const s of results) {\n            if (s.status === \"aborted\")\n                return INVALID;\n            if (s.status === \"dirty\")\n                status.dirty();\n            arrayValue.push(s.value);\n        }\n        return { status: status.value, value: arrayValue };\n    }\n    static async mergeObjectAsync(status, pairs) {\n        const syncPairs = [];\n        for (const pair of pairs) {\n            const key = await pair.key;\n            const value = await pair.value;\n            syncPairs.push({\n                key,\n                value,\n            });\n        }\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n    }\n    static mergeObjectSync(status, pairs) {\n        const finalObject = {};\n        for (const pair of pairs) {\n            const { key, value } = pair;\n            if (key.status === \"aborted\")\n                return INVALID;\n            if (value.status === \"aborted\")\n                return INVALID;\n            if (key.status === \"dirty\")\n                status.dirty();\n            if (value.status === \"dirty\")\n                status.dirty();\n            if (key.value !== \"__proto__\" &&\n                (typeof value.value !== \"undefined\" || pair.alwaysSet)) {\n                finalObject[key.value] = value.value;\n            }\n        }\n        return { status: status.value, value: finalObject };\n    }\n}\nconst INVALID = Object.freeze({\n    status: \"aborted\",\n});\nconst DIRTY = (value) => ({ status: \"dirty\", value });\nconst OK = (value) => ({ status: \"valid\", value });\nconst isAborted = (x) => x.status === \"aborted\";\nconst isDirty = (x) => x.status === \"dirty\";\nconst isValid = (x) => x.status === \"valid\";\nconst isAsync = (x) => typeof Promise !== \"undefined\" && x instanceof Promise;\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nvar errorUtil;\n(function (errorUtil) {\n    errorUtil.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\n    errorUtil.toString = (message) => typeof message === \"string\" ? message : message === null || message === void 0 ? void 0 : message.message;\n})(errorUtil || (errorUtil = {}));\n\nvar _ZodEnum_cache, _ZodNativeEnum_cache;\nclass ParseInputLazyPath {\n    constructor(parent, value, path, key) {\n        this._cachedPath = [];\n        this.parent = parent;\n        this.data = value;\n        this._path = path;\n        this._key = key;\n    }\n    get path() {\n        if (!this._cachedPath.length) {\n            if (this._key instanceof Array) {\n                this._cachedPath.push(...this._path, ...this._key);\n            }\n            else {\n                this._cachedPath.push(...this._path, this._key);\n            }\n        }\n        return this._cachedPath;\n    }\n}\nconst handleResult = (ctx, result) => {\n    if (isValid(result)) {\n        return { success: true, data: result.value };\n    }\n    else {\n        if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n        }\n        return {\n            success: false,\n            get error() {\n                if (this._error)\n                    return this._error;\n                const error = new ZodError(ctx.common.issues);\n                this._error = error;\n                return this._error;\n            },\n        };\n    }\n};\nfunction processCreateParams(params) {\n    if (!params)\n        return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap)\n        return { errorMap: errorMap, description };\n    const customMap = (iss, ctx) => {\n        var _a, _b;\n        const { message } = params;\n        if (iss.code === \"invalid_enum_value\") {\n            return { message: message !== null && message !== void 0 ? message : ctx.defaultError };\n        }\n        if (typeof ctx.data === \"undefined\") {\n            return { message: (_a = message !== null && message !== void 0 ? message : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError };\n        }\n        if (iss.code !== \"invalid_type\")\n            return { message: ctx.defaultError };\n        return { message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError };\n    };\n    return { errorMap: customMap, description };\n}\nclass ZodType {\n    get description() {\n        return this._def.description;\n    }\n    _getType(input) {\n        return getParsedType(input.data);\n    }\n    _getOrReturnCtx(input, ctx) {\n        return (ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: getParsedType(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent,\n        });\n    }\n    _processInputParams(input) {\n        return {\n            status: new ParseStatus(),\n            ctx: {\n                common: input.parent.common,\n                data: input.data,\n                parsedType: getParsedType(input.data),\n                schemaErrorMap: this._def.errorMap,\n                path: input.path,\n                parent: input.parent,\n            },\n        };\n    }\n    _parseSync(input) {\n        const result = this._parse(input);\n        if (isAsync(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n        }\n        return result;\n    }\n    _parseAsync(input) {\n        const result = this._parse(input);\n        return Promise.resolve(result);\n    }\n    parse(data, params) {\n        const result = this.safeParse(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    safeParse(data, params) {\n        var _a;\n        const ctx = {\n            common: {\n                issues: [],\n                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const result = this._parseSync({ data, path: ctx.path, parent: ctx });\n        return handleResult(ctx, result);\n    }\n    \"~validate\"(data) {\n        var _a, _b;\n        const ctx = {\n            common: {\n                issues: [],\n                async: !!this[\"~standard\"].async,\n            },\n            path: [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        if (!this[\"~standard\"].async) {\n            try {\n                const result = this._parseSync({ data, path: [], parent: ctx });\n                return isValid(result)\n                    ? {\n                        value: result.value,\n                    }\n                    : {\n                        issues: ctx.common.issues,\n                    };\n            }\n            catch (err) {\n                if ((_b = (_a = err === null || err === void 0 ? void 0 : err.message) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.includes(\"encountered\")) {\n                    this[\"~standard\"].async = true;\n                }\n                ctx.common = {\n                    issues: [],\n                    async: true,\n                };\n            }\n        }\n        return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid(result)\n            ? {\n                value: result.value,\n            }\n            : {\n                issues: ctx.common.issues,\n            });\n    }\n    async parseAsync(data, params) {\n        const result = await this.safeParseAsync(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    async safeParseAsync(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n                async: true,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });\n        const result = await (isAsync(maybeAsyncResult)\n            ? maybeAsyncResult\n            : Promise.resolve(maybeAsyncResult));\n        return handleResult(ctx, result);\n    }\n    refine(check, message) {\n        const getIssueProperties = (val) => {\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n                return { message };\n            }\n            else if (typeof message === \"function\") {\n                return message(val);\n            }\n            else {\n                return message;\n            }\n        };\n        return this._refinement((val, ctx) => {\n            const result = check(val);\n            const setError = () => ctx.addIssue({\n                code: ZodIssueCode.custom,\n                ...getIssueProperties(val),\n            });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then((data) => {\n                    if (!data) {\n                        setError();\n                        return false;\n                    }\n                    else {\n                        return true;\n                    }\n                });\n            }\n            if (!result) {\n                setError();\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    refinement(check, refinementData) {\n        return this._refinement((val, ctx) => {\n            if (!check(val)) {\n                ctx.addIssue(typeof refinementData === \"function\"\n                    ? refinementData(val, ctx)\n                    : refinementData);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    _refinement(refinement) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"refinement\", refinement },\n        });\n    }\n    superRefine(refinement) {\n        return this._refinement(refinement);\n    }\n    constructor(def) {\n        /** Alias of safeParseAsync */\n        this.spa = this.safeParseAsync;\n        this._def = def;\n        this.parse = this.parse.bind(this);\n        this.safeParse = this.safeParse.bind(this);\n        this.parseAsync = this.parseAsync.bind(this);\n        this.safeParseAsync = this.safeParseAsync.bind(this);\n        this.spa = this.spa.bind(this);\n        this.refine = this.refine.bind(this);\n        this.refinement = this.refinement.bind(this);\n        this.superRefine = this.superRefine.bind(this);\n        this.optional = this.optional.bind(this);\n        this.nullable = this.nullable.bind(this);\n        this.nullish = this.nullish.bind(this);\n        this.array = this.array.bind(this);\n        this.promise = this.promise.bind(this);\n        this.or = this.or.bind(this);\n        this.and = this.and.bind(this);\n        this.transform = this.transform.bind(this);\n        this.brand = this.brand.bind(this);\n        this.default = this.default.bind(this);\n        this.catch = this.catch.bind(this);\n        this.describe = this.describe.bind(this);\n        this.pipe = this.pipe.bind(this);\n        this.readonly = this.readonly.bind(this);\n        this.isNullable = this.isNullable.bind(this);\n        this.isOptional = this.isOptional.bind(this);\n        this[\"~standard\"] = {\n            version: 1,\n            vendor: \"zod\",\n            validate: (data) => this[\"~validate\"](data),\n        };\n    }\n    optional() {\n        return ZodOptional.create(this, this._def);\n    }\n    nullable() {\n        return ZodNullable.create(this, this._def);\n    }\n    nullish() {\n        return this.nullable().optional();\n    }\n    array() {\n        return ZodArray.create(this);\n    }\n    promise() {\n        return ZodPromise.create(this, this._def);\n    }\n    or(option) {\n        return ZodUnion.create([this, option], this._def);\n    }\n    and(incoming) {\n        return ZodIntersection.create(this, incoming, this._def);\n    }\n    transform(transform) {\n        return new ZodEffects({\n            ...processCreateParams(this._def),\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"transform\", transform },\n        });\n    }\n    default(def) {\n        const defaultValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodDefault({\n            ...processCreateParams(this._def),\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault,\n        });\n    }\n    brand() {\n        return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(this._def),\n        });\n    }\n    catch(def) {\n        const catchValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodCatch({\n            ...processCreateParams(this._def),\n            innerType: this,\n            catchValue: catchValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodCatch,\n        });\n    }\n    describe(description) {\n        const This = this.constructor;\n        return new This({\n            ...this._def,\n            description,\n        });\n    }\n    pipe(target) {\n        return ZodPipeline.create(this, target);\n    }\n    readonly() {\n        return ZodReadonly.create(this);\n    }\n    isOptional() {\n        return this.safeParse(undefined).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst cuid2Regex = /^[0-9a-z]+$/;\nconst ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;\n// const uuidRegex =\n//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\nconst uuidRegex = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i;\nconst nanoidRegex = /^[a-z0-9_-]{21}$/i;\nconst jwtRegex = /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/;\nconst durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\\d+Y)|(?:[-+]?\\d+[.,]\\d+Y$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:(?:[-+]?\\d+W)|(?:[-+]?\\d+[.,]\\d+W$))?(?:(?:[-+]?\\d+D)|(?:[-+]?\\d+[.,]\\d+D$))?(?:T(?=[\\d+-])(?:(?:[-+]?\\d+H)|(?:[-+]?\\d+[.,]\\d+H$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:[-+]?\\d+(?:[.,]\\d+)?S)?)??$/;\n// from https://stackoverflow.com/a/46181/1550155\n// old version: too slow, didn't support unicode\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n//old email regex\n// const emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;\n// eslint-disable-next-line\n// const emailRegex =\n//   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\n// const emailRegex =\n//   /^[a-zA-Z0-9\\.\\!\\#\\$\\%\\&\\'\\*\\+\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n// const emailRegex =\n//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i;\nconst emailRegex = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;\n// const emailRegex =\n//   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\\.[a-z0-9\\-]+)*$/i;\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\nconst _emojiRegex = `^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$`;\nlet emojiRegex;\n// faster, simpler, safer\nconst ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;\nconst ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/;\n// const ipv6Regex =\n// /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\nconst ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;\nconst ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;\n// https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript\nconst base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n// https://base64.guru/standards/base64url\nconst base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;\n// simple\n// const dateRegexSource = `\\\\d{4}-\\\\d{2}-\\\\d{2}`;\n// no leap year validation\n// const dateRegexSource = `\\\\d{4}-((0[13578]|10|12)-31|(0[13-9]|1[0-2])-30|(0[1-9]|1[0-2])-(0[1-9]|1\\\\d|2\\\\d))`;\n// with leap year validation\nconst dateRegexSource = `((\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\d|30)|(02)-(0[1-9]|1\\\\d|2[0-8])))`;\nconst dateRegex = new RegExp(`^${dateRegexSource}$`);\nfunction timeRegexSource(args) {\n    // let regex = `\\\\d{2}:\\\\d{2}:\\\\d{2}`;\n    let regex = `([01]\\\\d|2[0-3]):[0-5]\\\\d:[0-5]\\\\d`;\n    if (args.precision) {\n        regex = `${regex}\\\\.\\\\d{${args.precision}}`;\n    }\n    else if (args.precision == null) {\n        regex = `${regex}(\\\\.\\\\d+)?`;\n    }\n    return regex;\n}\nfunction timeRegex(args) {\n    return new RegExp(`^${timeRegexSource(args)}$`);\n}\n// Adapted from https://stackoverflow.com/a/3143231\nfunction datetimeRegex(args) {\n    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;\n    const opts = [];\n    opts.push(args.local ? `Z?` : `Z`);\n    if (args.offset)\n        opts.push(`([+-]\\\\d{2}:?\\\\d{2})`);\n    regex = `${regex}(${opts.join(\"|\")})`;\n    return new RegExp(`^${regex}$`);\n}\nfunction isValidIP(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nfunction isValidJWT(jwt, alg) {\n    if (!jwtRegex.test(jwt))\n        return false;\n    try {\n        const [header] = jwt.split(\".\");\n        // Convert base64url to base64\n        const base64 = header\n            .replace(/-/g, \"+\")\n            .replace(/_/g, \"/\")\n            .padEnd(header.length + ((4 - (header.length % 4)) % 4), \"=\");\n        const decoded = JSON.parse(atob(base64));\n        if (typeof decoded !== \"object\" || decoded === null)\n            return false;\n        if (!decoded.typ || !decoded.alg)\n            return false;\n        if (alg && decoded.alg !== alg)\n            return false;\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nfunction isValidCidr(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4CidrRegex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6CidrRegex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nclass ZodString extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = String(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.string) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.string,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.length < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.length > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"length\") {\n                const tooBig = input.data.length > check.value;\n                const tooSmall = input.data.length < check.value;\n                if (tooBig || tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    if (tooBig) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_big,\n                            maximum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    else if (tooSmall) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_small,\n                            minimum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"email\") {\n                if (!emailRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"email\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"emoji\") {\n                if (!emojiRegex) {\n                    emojiRegex = new RegExp(_emojiRegex, \"u\");\n                }\n                if (!emojiRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"emoji\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"uuid\") {\n                if (!uuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"uuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"nanoid\") {\n                if (!nanoidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"nanoid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid\") {\n                if (!cuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid2\") {\n                if (!cuid2Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid2\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ulid\") {\n                if (!ulidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ulid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"url\") {\n                try {\n                    new URL(input.data);\n                }\n                catch (_a) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"regex\") {\n                check.regex.lastIndex = 0;\n                const testResult = check.regex.test(input.data);\n                if (!testResult) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"regex\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"trim\") {\n                input.data = input.data.trim();\n            }\n            else if (check.kind === \"includes\") {\n                if (!input.data.includes(check.value, check.position)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { includes: check.value, position: check.position },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"toLowerCase\") {\n                input.data = input.data.toLowerCase();\n            }\n            else if (check.kind === \"toUpperCase\") {\n                input.data = input.data.toUpperCase();\n            }\n            else if (check.kind === \"startsWith\") {\n                if (!input.data.startsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { startsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"endsWith\") {\n                if (!input.data.endsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { endsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"datetime\") {\n                const regex = datetimeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"datetime\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"date\") {\n                const regex = dateRegex;\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"date\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"time\") {\n                const regex = timeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"time\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"duration\") {\n                if (!durationRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"duration\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ip\") {\n                if (!isValidIP(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ip\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"jwt\") {\n                if (!isValidJWT(input.data, check.alg)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"jwt\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cidr\") {\n                if (!isValidCidr(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cidr\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64\") {\n                if (!base64Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64url\") {\n                if (!base64urlRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _regex(regex, validation, message) {\n        return this.refinement((data) => regex.test(data), {\n            validation,\n            code: ZodIssueCode.invalid_string,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    _addCheck(check) {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    email(message) {\n        return this._addCheck({ kind: \"email\", ...errorUtil.errToObj(message) });\n    }\n    url(message) {\n        return this._addCheck({ kind: \"url\", ...errorUtil.errToObj(message) });\n    }\n    emoji(message) {\n        return this._addCheck({ kind: \"emoji\", ...errorUtil.errToObj(message) });\n    }\n    uuid(message) {\n        return this._addCheck({ kind: \"uuid\", ...errorUtil.errToObj(message) });\n    }\n    nanoid(message) {\n        return this._addCheck({ kind: \"nanoid\", ...errorUtil.errToObj(message) });\n    }\n    cuid(message) {\n        return this._addCheck({ kind: \"cuid\", ...errorUtil.errToObj(message) });\n    }\n    cuid2(message) {\n        return this._addCheck({ kind: \"cuid2\", ...errorUtil.errToObj(message) });\n    }\n    ulid(message) {\n        return this._addCheck({ kind: \"ulid\", ...errorUtil.errToObj(message) });\n    }\n    base64(message) {\n        return this._addCheck({ kind: \"base64\", ...errorUtil.errToObj(message) });\n    }\n    base64url(message) {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return this._addCheck({\n            kind: \"base64url\",\n            ...errorUtil.errToObj(message),\n        });\n    }\n    jwt(options) {\n        return this._addCheck({ kind: \"jwt\", ...errorUtil.errToObj(options) });\n    }\n    ip(options) {\n        return this._addCheck({ kind: \"ip\", ...errorUtil.errToObj(options) });\n    }\n    cidr(options) {\n        return this._addCheck({ kind: \"cidr\", ...errorUtil.errToObj(options) });\n    }\n    datetime(options) {\n        var _a, _b;\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"datetime\",\n                precision: null,\n                offset: false,\n                local: false,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"datetime\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,\n            local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    date(message) {\n        return this._addCheck({ kind: \"date\", message });\n    }\n    time(options) {\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"time\",\n                precision: null,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"time\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    duration(message) {\n        return this._addCheck({ kind: \"duration\", ...errorUtil.errToObj(message) });\n    }\n    regex(regex, message) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: regex,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    includes(value, options) {\n        return this._addCheck({\n            kind: \"includes\",\n            value: value,\n            position: options === null || options === void 0 ? void 0 : options.position,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    startsWith(value, message) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    endsWith(value, message) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    min(minLength, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    max(maxLength, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    length(len, message) {\n        return this._addCheck({\n            kind: \"length\",\n            value: len,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    /**\n     * Equivalent to `.min(1)`\n     */\n    nonempty(message) {\n        return this.min(1, errorUtil.errToObj(message));\n    }\n    trim() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"trim\" }],\n        });\n    }\n    toLowerCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toLowerCase\" }],\n        });\n    }\n    toUpperCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toUpperCase\" }],\n        });\n    }\n    get isDatetime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\n    }\n    get isDate() {\n        return !!this._def.checks.find((ch) => ch.kind === \"date\");\n    }\n    get isTime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"time\");\n    }\n    get isDuration() {\n        return !!this._def.checks.find((ch) => ch.kind === \"duration\");\n    }\n    get isEmail() {\n        return !!this._def.checks.find((ch) => ch.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((ch) => ch.kind === \"url\");\n    }\n    get isEmoji() {\n        return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n    }\n    get isNANOID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"nanoid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n    }\n    get isCUID2() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\n    }\n    get isULID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\n    }\n    get isIP() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ip\");\n    }\n    get isCIDR() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cidr\");\n    }\n    get isBase64() {\n        return !!this._def.checks.find((ch) => ch.kind === \"base64\");\n    }\n    get isBase64url() {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return !!this._def.checks.find((ch) => ch.kind === \"base64url\");\n    }\n    get minLength() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxLength() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodString.create = (params) => {\n    var _a;\n    return new ZodString({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodString,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\nfunction floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return (valInt % stepInt) / Math.pow(10, decCount);\n}\nclass ZodNumber extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n        this.step = this.multipleOf;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Number(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.number) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.number,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"int\") {\n                if (!util.isInteger(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_type,\n                        expected: \"integer\",\n                        received: \"float\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"finite\") {\n                if (!Number.isFinite(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_finite,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    int(message) {\n        return this._addCheck({\n            kind: \"int\",\n            message: errorUtil.toString(message),\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: value,\n            message: errorUtil.toString(message),\n        });\n    }\n    finite(message) {\n        return this._addCheck({\n            kind: \"finite\",\n            message: errorUtil.toString(message),\n        });\n    }\n    safe(message) {\n        return this._addCheck({\n            kind: \"min\",\n            inclusive: true,\n            value: Number.MIN_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        })._addCheck({\n            kind: \"max\",\n            inclusive: true,\n            value: Number.MAX_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n    get isInt() {\n        return !!this._def.checks.find((ch) => ch.kind === \"int\" ||\n            (ch.kind === \"multipleOf\" && util.isInteger(ch.value)));\n    }\n    get isFinite() {\n        let max = null, min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"finite\" ||\n                ch.kind === \"int\" ||\n                ch.kind === \"multipleOf\") {\n                return true;\n            }\n            else if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n            else if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return Number.isFinite(min) && Number.isFinite(max);\n    }\n}\nZodNumber.create = (params) => {\n    return new ZodNumber({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBigInt extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            try {\n                input.data = BigInt(input.data);\n            }\n            catch (_a) {\n                return this._getInvalidInput(input);\n            }\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.bigint) {\n            return this._getInvalidInput(input);\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        type: \"bigint\",\n                        minimum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        type: \"bigint\",\n                        maximum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (input.data % check.value !== BigInt(0)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _getInvalidInput(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.bigint,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodBigInt.create = (params) => {\n    var _a;\n    return new ZodBigInt({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBoolean extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Boolean(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.boolean,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodBoolean.create = (params) => {\n    return new ZodBoolean({\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDate extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = new Date(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.date) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.date,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (isNaN(input.data.getTime())) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_date,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.getTime() < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        minimum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.getTime() > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        maximum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: new Date(input.data.getTime()),\n        };\n    }\n    _addCheck(check) {\n        return new ZodDate({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    min(minDate, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    max(maxDate, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    get minDate() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min != null ? new Date(min) : null;\n    }\n    get maxDate() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max != null ? new Date(max) : null;\n    }\n}\nZodDate.create = (params) => {\n    return new ZodDate({\n        checks: [],\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        typeName: ZodFirstPartyTypeKind.ZodDate,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSymbol extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.symbol) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.symbol,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodSymbol.create = (params) => {\n    return new ZodSymbol({\n        typeName: ZodFirstPartyTypeKind.ZodSymbol,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUndefined extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.undefined,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodUndefined.create = (params) => {\n    return new ZodUndefined({\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNull extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.null,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodNull.create = (params) => {\n    return new ZodNull({\n        typeName: ZodFirstPartyTypeKind.ZodNull,\n        ...processCreateParams(params),\n    });\n};\nclass ZodAny extends ZodType {\n    constructor() {\n        super(...arguments);\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\n        this._any = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodAny.create = (params) => {\n    return new ZodAny({\n        typeName: ZodFirstPartyTypeKind.ZodAny,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnknown extends ZodType {\n    constructor() {\n        super(...arguments);\n        // required\n        this._unknown = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodUnknown.create = (params) => {\n    return new ZodUnknown({\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNever extends ZodType {\n    _parse(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.never,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n}\nZodNever.create = (params) => {\n    return new ZodNever({\n        typeName: ZodFirstPartyTypeKind.ZodNever,\n        ...processCreateParams(params),\n    });\n};\nclass ZodVoid extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.void,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodVoid.create = (params) => {\n    return new ZodVoid({\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\n        ...processCreateParams(params),\n    });\n};\nclass ZodArray extends ZodType {\n    _parse(input) {\n        const { ctx, status } = this._processInputParams(input);\n        const def = this._def;\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (def.exactLength !== null) {\n            const tooBig = ctx.data.length > def.exactLength.value;\n            const tooSmall = ctx.data.length < def.exactLength.value;\n            if (tooBig || tooSmall) {\n                addIssueToContext(ctx, {\n                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\n                    minimum: (tooSmall ? def.exactLength.value : undefined),\n                    maximum: (tooBig ? def.exactLength.value : undefined),\n                    type: \"array\",\n                    inclusive: true,\n                    exact: true,\n                    message: def.exactLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.all([...ctx.data].map((item, i) => {\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result) => {\n                return ParseStatus.mergeArray(status, result);\n            });\n        }\n        const result = [...ctx.data].map((item, i) => {\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n        });\n        return ParseStatus.mergeArray(status, result);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(minLength, message) {\n        return new ZodArray({\n            ...this._def,\n            minLength: { value: minLength, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxLength, message) {\n        return new ZodArray({\n            ...this._def,\n            maxLength: { value: maxLength, message: errorUtil.toString(message) },\n        });\n    }\n    length(len, message) {\n        return new ZodArray({\n            ...this._def,\n            exactLength: { value: len, message: errorUtil.toString(message) },\n        });\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodArray.create = (schema, params) => {\n    return new ZodArray({\n        type: schema,\n        minLength: null,\n        maxLength: null,\n        exactLength: null,\n        typeName: ZodFirstPartyTypeKind.ZodArray,\n        ...processCreateParams(params),\n    });\n};\nfunction deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n        const newShape = {};\n        for (const key in schema.shape) {\n            const fieldSchema = schema.shape[key];\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n        }\n        return new ZodObject({\n            ...schema._def,\n            shape: () => newShape,\n        });\n    }\n    else if (schema instanceof ZodArray) {\n        return new ZodArray({\n            ...schema._def,\n            type: deepPartialify(schema.element),\n        });\n    }\n    else if (schema instanceof ZodOptional) {\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodNullable) {\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodTuple) {\n        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\n    }\n    else {\n        return schema;\n    }\n}\nclass ZodObject extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._cached = null;\n        /**\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\n         */\n        this.nonstrict = this.passthrough;\n        // extend<\n        //   Augmentation extends ZodRawShape,\n        //   NewOutput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_output\"]\n        //       : k extends keyof Output\n        //       ? Output[k]\n        //       : never;\n        //   }>,\n        //   NewInput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_input\"]\n        //       : k extends keyof Input\n        //       ? Input[k]\n        //       : never;\n        //   }>\n        // >(\n        //   augmentation: Augmentation\n        // ): ZodObject<\n        //   extendShape<T, Augmentation>,\n        //   UnknownKeys,\n        //   Catchall,\n        //   NewOutput,\n        //   NewInput\n        // > {\n        //   return new ZodObject({\n        //     ...this._def,\n        //     shape: () => ({\n        //       ...this._def.shape(),\n        //       ...augmentation,\n        //     }),\n        //   }) as any;\n        // }\n        /**\n         * @deprecated Use `.extend` instead\n         *  */\n        this.augment = this.extend;\n    }\n    _getCached() {\n        if (this._cached !== null)\n            return this._cached;\n        const shape = this._def.shape();\n        const keys = util.objectKeys(shape);\n        return (this._cached = { shape, keys });\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.object) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const { status, ctx } = this._processInputParams(input);\n        const { shape, keys: shapeKeys } = this._getCached();\n        const extraKeys = [];\n        if (!(this._def.catchall instanceof ZodNever &&\n            this._def.unknownKeys === \"strip\")) {\n            for (const key in ctx.data) {\n                if (!shapeKeys.includes(key)) {\n                    extraKeys.push(key);\n                }\n            }\n        }\n        const pairs = [];\n        for (const key of shapeKeys) {\n            const keyValidator = shape[key];\n            const value = ctx.data[key];\n            pairs.push({\n                key: { status: \"valid\", value: key },\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n                for (const key of extraKeys) {\n                    pairs.push({\n                        key: { status: \"valid\", value: key },\n                        value: { status: \"valid\", value: ctx.data[key] },\n                    });\n                }\n            }\n            else if (unknownKeys === \"strict\") {\n                if (extraKeys.length > 0) {\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.unrecognized_keys,\n                        keys: extraKeys,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (unknownKeys === \"strip\") ;\n            else {\n                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n            }\n        }\n        else {\n            // run catchall validation\n            const catchall = this._def.catchall;\n            for (const key of extraKeys) {\n                const value = ctx.data[key];\n                pairs.push({\n                    key: { status: \"valid\", value: key },\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\n                    ),\n                    alwaysSet: key in ctx.data,\n                });\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.resolve()\n                .then(async () => {\n                const syncPairs = [];\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    syncPairs.push({\n                        key,\n                        value,\n                        alwaysSet: pair.alwaysSet,\n                    });\n                }\n                return syncPairs;\n            })\n                .then((syncPairs) => {\n                return ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(message) {\n        errorUtil.errToObj;\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...(message !== undefined\n                ? {\n                    errorMap: (issue, ctx) => {\n                        var _a, _b, _c, _d;\n                        const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;\n                        if (issue.code === \"unrecognized_keys\")\n                            return {\n                                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError,\n                            };\n                        return {\n                            message: defaultError,\n                        };\n                    },\n                }\n                : {}),\n        });\n    }\n    strip() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\",\n        });\n    }\n    passthrough() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\",\n        });\n    }\n    // const AugmentFactory =\n    //   <Def extends ZodObjectDef>(def: Def) =>\n    //   <Augmentation extends ZodRawShape>(\n    //     augmentation: Augmentation\n    //   ): ZodObject<\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n    //     Def[\"unknownKeys\"],\n    //     Def[\"catchall\"]\n    //   > => {\n    //     return new ZodObject({\n    //       ...def,\n    //       shape: () => ({\n    //         ...def.shape(),\n    //         ...augmentation,\n    //       }),\n    //     }) as any;\n    //   };\n    extend(augmentation) {\n        return new ZodObject({\n            ...this._def,\n            shape: () => ({\n                ...this._def.shape(),\n                ...augmentation,\n            }),\n        });\n    }\n    /**\n     * Prior to zod@1.0.12 there was a bug in the\n     * inferred type of merged objects. Please\n     * upgrade if you are experiencing issues.\n     */\n    merge(merging) {\n        const merged = new ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: () => ({\n                ...this._def.shape(),\n                ...merging._def.shape(),\n            }),\n            typeName: ZodFirstPartyTypeKind.ZodObject,\n        });\n        return merged;\n    }\n    // merge<\n    //   Incoming extends AnyZodObject,\n    //   Augmentation extends Incoming[\"shape\"],\n    //   NewOutput extends {\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_output\"]\n    //       : k extends keyof Output\n    //       ? Output[k]\n    //       : never;\n    //   },\n    //   NewInput extends {\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_input\"]\n    //       : k extends keyof Input\n    //       ? Input[k]\n    //       : never;\n    //   }\n    // >(\n    //   merging: Incoming\n    // ): ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"],\n    //   NewOutput,\n    //   NewInput\n    // > {\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    setKey(key, schema) {\n        return this.augment({ [key]: schema });\n    }\n    // merge<Incoming extends AnyZodObject>(\n    //   merging: Incoming\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n    // ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"]\n    // > {\n    //   // const mergedShape = objectUtil.mergeShapes(\n    //   //   this._def.shape(),\n    //   //   merging._def.shape()\n    //   // );\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    catchall(index) {\n        return new ZodObject({\n            ...this._def,\n            catchall: index,\n        });\n    }\n    pick(mask) {\n        const shape = {};\n        util.objectKeys(mask).forEach((key) => {\n            if (mask[key] && this.shape[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    omit(mask) {\n        const shape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (!mask[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    /**\n     * @deprecated\n     */\n    deepPartial() {\n        return deepPartialify(this);\n    }\n    partial(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            const fieldSchema = this.shape[key];\n            if (mask && !mask[key]) {\n                newShape[key] = fieldSchema;\n            }\n            else {\n                newShape[key] = fieldSchema.optional();\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    required(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (mask && !mask[key]) {\n                newShape[key] = this.shape[key];\n            }\n            else {\n                const fieldSchema = this.shape[key];\n                let newField = fieldSchema;\n                while (newField instanceof ZodOptional) {\n                    newField = newField._def.innerType;\n                }\n                newShape[key] = newField;\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    keyof() {\n        return createZodEnum(util.objectKeys(this.shape));\n    }\n}\nZodObject.create = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.strictCreate = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strict\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.lazycreate = (shape, params) => {\n    return new ZodObject({\n        shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const options = this._def.options;\n        function handleResults(results) {\n            // return first issue-free validation if it exists\n            for (const result of results) {\n                if (result.result.status === \"valid\") {\n                    return result.result;\n                }\n            }\n            for (const result of results) {\n                if (result.result.status === \"dirty\") {\n                    // add issues from dirty option\n                    ctx.common.issues.push(...result.ctx.common.issues);\n                    return result.result;\n                }\n            }\n            // return invalid\n            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return Promise.all(options.map(async (option) => {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                return {\n                    result: await option._parseAsync({\n                        data: ctx.data,\n                        path: ctx.path,\n                        parent: childCtx,\n                    }),\n                    ctx: childCtx,\n                };\n            })).then(handleResults);\n        }\n        else {\n            let dirty = undefined;\n            const issues = [];\n            for (const option of options) {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                const result = option._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: childCtx,\n                });\n                if (result.status === \"valid\") {\n                    return result;\n                }\n                else if (result.status === \"dirty\" && !dirty) {\n                    dirty = { result, ctx: childCtx };\n                }\n                if (childCtx.common.issues.length) {\n                    issues.push(childCtx.common.issues);\n                }\n            }\n            if (dirty) {\n                ctx.common.issues.push(...dirty.ctx.common.issues);\n                return dirty.result;\n            }\n            const unionErrors = issues.map((issues) => new ZodError(issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nZodUnion.create = (types, params) => {\n    return new ZodUnion({\n        options: types,\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\n        ...processCreateParams(params),\n    });\n};\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n//////////                                 //////////\n//////////      ZodDiscriminatedUnion      //////////\n//////////                                 //////////\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\nconst getDiscriminator = (type) => {\n    if (type instanceof ZodLazy) {\n        return getDiscriminator(type.schema);\n    }\n    else if (type instanceof ZodEffects) {\n        return getDiscriminator(type.innerType());\n    }\n    else if (type instanceof ZodLiteral) {\n        return [type.value];\n    }\n    else if (type instanceof ZodEnum) {\n        return type.options;\n    }\n    else if (type instanceof ZodNativeEnum) {\n        // eslint-disable-next-line ban/ban\n        return util.objectValues(type.enum);\n    }\n    else if (type instanceof ZodDefault) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else if (type instanceof ZodUndefined) {\n        return [undefined];\n    }\n    else if (type instanceof ZodNull) {\n        return [null];\n    }\n    else if (type instanceof ZodOptional) {\n        return [undefined, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodNullable) {\n        return [null, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodBranded) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodReadonly) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodCatch) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else {\n        return [];\n    }\n};\nclass ZodDiscriminatedUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const discriminator = this.discriminator;\n        const discriminatorValue = ctx.data[discriminator];\n        const option = this.optionsMap.get(discriminatorValue);\n        if (!option) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union_discriminator,\n                options: Array.from(this.optionsMap.keys()),\n                path: [discriminator],\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return option._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n        else {\n            return option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get options() {\n        return this._def.options;\n    }\n    get optionsMap() {\n        return this._def.optionsMap;\n    }\n    /**\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n     * have a different value for each object in the union.\n     * @param discriminator the name of the discriminator property\n     * @param types an array of object schemas\n     * @param params\n     */\n    static create(discriminator, options, params) {\n        // Get all the valid discriminator values\n        const optionsMap = new Map();\n        // try {\n        for (const type of options) {\n            const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n            if (!discriminatorValues.length) {\n                throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n            }\n            for (const value of discriminatorValues) {\n                if (optionsMap.has(value)) {\n                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n                }\n                optionsMap.set(value, type);\n            }\n        }\n        return new ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            optionsMap,\n            ...processCreateParams(params),\n        });\n    }\n}\nfunction mergeValues(a, b) {\n    const aType = getParsedType(a);\n    const bType = getParsedType(b);\n    if (a === b) {\n        return { valid: true, data: a };\n    }\n    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n        const bKeys = util.objectKeys(b);\n        const sharedKeys = util\n            .objectKeys(a)\n            .filter((key) => bKeys.indexOf(key) !== -1);\n        const newObj = { ...a, ...b };\n        for (const key of sharedKeys) {\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return { valid: true, data: newObj };\n    }\n    else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n        if (a.length !== b.length) {\n            return { valid: false };\n        }\n        const newArray = [];\n        for (let index = 0; index < a.length; index++) {\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return { valid: true, data: newArray };\n    }\n    else if (aType === ZodParsedType.date &&\n        bType === ZodParsedType.date &&\n        +a === +b) {\n        return { valid: true, data: a };\n    }\n    else {\n        return { valid: false };\n    }\n}\nclass ZodIntersection extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const handleParsed = (parsedLeft, parsedRight) => {\n            if (isAborted(parsedLeft) || isAborted(parsedRight)) {\n                return INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.invalid_intersection_types,\n                });\n                return INVALID;\n            }\n            if (isDirty(parsedLeft) || isDirty(parsedRight)) {\n                status.dirty();\n            }\n            return { status: status.value, value: merged.data };\n        };\n        if (ctx.common.async) {\n            return Promise.all([\n                this._def.left._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n                this._def.right._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n            ]).then(([left, right]) => handleParsed(left, right));\n        }\n        else {\n            return handleParsed(this._def.left._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }), this._def.right._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }));\n        }\n    }\n}\nZodIntersection.create = (left, right, params) => {\n    return new ZodIntersection({\n        left: left,\n        right: right,\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\n        ...processCreateParams(params),\n    });\n};\nclass ZodTuple extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (ctx.data.length < this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_small,\n                minimum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            return INVALID;\n        }\n        const rest = this._def.rest;\n        if (!rest && ctx.data.length > this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_big,\n                maximum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            status.dirty();\n        }\n        const items = [...ctx.data]\n            .map((item, itemIndex) => {\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema)\n                return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n        })\n            .filter((x) => !!x); // filter nulls\n        if (ctx.common.async) {\n            return Promise.all(items).then((results) => {\n                return ParseStatus.mergeArray(status, results);\n            });\n        }\n        else {\n            return ParseStatus.mergeArray(status, items);\n        }\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(rest) {\n        return new ZodTuple({\n            ...this._def,\n            rest,\n        });\n    }\n}\nZodTuple.create = (schemas, params) => {\n    if (!Array.isArray(schemas)) {\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    }\n    return new ZodTuple({\n        items: schemas,\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\n        rest: null,\n        ...processCreateParams(params),\n    });\n};\nclass ZodRecord extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const pairs = [];\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        for (const key in ctx.data) {\n            pairs.push({\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (ctx.common.async) {\n            return ParseStatus.mergeObjectAsync(status, pairs);\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(first, second, third) {\n        if (second instanceof ZodType) {\n            return new ZodRecord({\n                keyType: first,\n                valueType: second,\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\n                ...processCreateParams(third),\n            });\n        }\n        return new ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second),\n        });\n    }\n}\nclass ZodMap extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.map) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.map,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        const pairs = [...ctx.data.entries()].map(([key, value], index) => {\n            return {\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"])),\n            };\n        });\n        if (ctx.common.async) {\n            const finalMap = new Map();\n            return Promise.resolve().then(async () => {\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\n                        return INVALID;\n                    }\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\n                        status.dirty();\n                    }\n                    finalMap.set(key.value, value.value);\n                }\n                return { status: status.value, value: finalMap };\n            });\n        }\n        else {\n            const finalMap = new Map();\n            for (const pair of pairs) {\n                const key = pair.key;\n                const value = pair.value;\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\n                    return INVALID;\n                }\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\n                    status.dirty();\n                }\n                finalMap.set(key.value, value.value);\n            }\n            return { status: status.value, value: finalMap };\n        }\n    }\n}\nZodMap.create = (keyType, valueType, params) => {\n    return new ZodMap({\n        valueType,\n        keyType,\n        typeName: ZodFirstPartyTypeKind.ZodMap,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSet extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.set) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.set,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const def = this._def;\n        if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minSize.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxSize.message,\n                });\n                status.dirty();\n            }\n        }\n        const valueType = this._def.valueType;\n        function finalizeSet(elements) {\n            const parsedSet = new Set();\n            for (const element of elements) {\n                if (element.status === \"aborted\")\n                    return INVALID;\n                if (element.status === \"dirty\")\n                    status.dirty();\n                parsedSet.add(element.value);\n            }\n            return { status: status.value, value: parsedSet };\n        }\n        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n        if (ctx.common.async) {\n            return Promise.all(elements).then((elements) => finalizeSet(elements));\n        }\n        else {\n            return finalizeSet(elements);\n        }\n    }\n    min(minSize, message) {\n        return new ZodSet({\n            ...this._def,\n            minSize: { value: minSize, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxSize, message) {\n        return new ZodSet({\n            ...this._def,\n            maxSize: { value: maxSize, message: errorUtil.toString(message) },\n        });\n    }\n    size(size, message) {\n        return this.min(size, message).max(size, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodSet.create = (valueType, params) => {\n    return new ZodSet({\n        valueType,\n        minSize: null,\n        maxSize: null,\n        typeName: ZodFirstPartyTypeKind.ZodSet,\n        ...processCreateParams(params),\n    });\n};\nclass ZodFunction extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.validate = this.implement;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.function) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.function,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        function makeArgsIssue(args, error) {\n            return makeIssue({\n                data: args,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_arguments,\n                    argumentsError: error,\n                },\n            });\n        }\n        function makeReturnsIssue(returns, error) {\n            return makeIssue({\n                data: returns,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_return_type,\n                    returnTypeError: error,\n                },\n            });\n        }\n        const params = { errorMap: ctx.common.contextualErrorMap };\n        const fn = ctx.data;\n        if (this._def.returns instanceof ZodPromise) {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(async function (...args) {\n                const error = new ZodError([]);\n                const parsedArgs = await me._def.args\n                    .parseAsync(args, params)\n                    .catch((e) => {\n                    error.addIssue(makeArgsIssue(args, e));\n                    throw error;\n                });\n                const result = await Reflect.apply(fn, this, parsedArgs);\n                const parsedReturns = await me._def.returns._def.type\n                    .parseAsync(result, params)\n                    .catch((e) => {\n                    error.addIssue(makeReturnsIssue(result, e));\n                    throw error;\n                });\n                return parsedReturns;\n            });\n        }\n        else {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(function (...args) {\n                const parsedArgs = me._def.args.safeParse(args, params);\n                if (!parsedArgs.success) {\n                    throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);\n                }\n                const result = Reflect.apply(fn, this, parsedArgs.data);\n                const parsedReturns = me._def.returns.safeParse(result, params);\n                if (!parsedReturns.success) {\n                    throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n                }\n                return parsedReturns.data;\n            });\n        }\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args(...items) {\n        return new ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create()),\n        });\n    }\n    returns(returnType) {\n        return new ZodFunction({\n            ...this._def,\n            returns: returnType,\n        });\n    }\n    implement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    strictImplement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    static create(args, returns, params) {\n        return new ZodFunction({\n            args: (args\n                ? args\n                : ZodTuple.create([]).rest(ZodUnknown.create())),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params),\n        });\n    }\n}\nclass ZodLazy extends ZodType {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const lazySchema = this._def.getter();\n        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n    }\n}\nZodLazy.create = (getter, params) => {\n    return new ZodLazy({\n        getter: getter,\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\n        ...processCreateParams(params),\n    });\n};\nclass ZodLiteral extends ZodType {\n    _parse(input) {\n        if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_literal,\n                expected: this._def.value,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nZodLiteral.create = (value, params) => {\n    return new ZodLiteral({\n        value: value,\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\n        ...processCreateParams(params),\n    });\n};\nfunction createZodEnum(values, params) {\n    return new ZodEnum({\n        values,\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\n        ...processCreateParams(params),\n    });\n}\nclass ZodEnum extends ZodType {\n    constructor() {\n        super(...arguments);\n        _ZodEnum_cache.set(this, void 0);\n    }\n    _parse(input) {\n        if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\")) {\n            __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), \"f\");\n        }\n        if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\").has(input.data)) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Values() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    extract(values, newDef = this._def) {\n        return ZodEnum.create(values, {\n            ...this._def,\n            ...newDef,\n        });\n    }\n    exclude(values, newDef = this._def) {\n        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {\n            ...this._def,\n            ...newDef,\n        });\n    }\n}\n_ZodEnum_cache = new WeakMap();\nZodEnum.create = createZodEnum;\nclass ZodNativeEnum extends ZodType {\n    constructor() {\n        super(...arguments);\n        _ZodNativeEnum_cache.set(this, void 0);\n    }\n    _parse(input) {\n        const nativeEnumValues = util.getValidEnumValues(this._def.values);\n        const ctx = this._getOrReturnCtx(input);\n        if (ctx.parsedType !== ZodParsedType.string &&\n            ctx.parsedType !== ZodParsedType.number) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\")) {\n            __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util.getValidEnumValues(this._def.values)), \"f\");\n        }\n        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\").has(input.data)) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n}\n_ZodNativeEnum_cache = new WeakMap();\nZodNativeEnum.create = (values, params) => {\n    return new ZodNativeEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n        ...processCreateParams(params),\n    });\n};\nclass ZodPromise extends ZodType {\n    unwrap() {\n        return this._def.type;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.promise &&\n            ctx.common.async === false) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.promise,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const promisified = ctx.parsedType === ZodParsedType.promise\n            ? ctx.data\n            : Promise.resolve(ctx.data);\n        return OK(promisified.then((data) => {\n            return this._def.type.parseAsync(data, {\n                path: ctx.path,\n                errorMap: ctx.common.contextualErrorMap,\n            });\n        }));\n    }\n}\nZodPromise.create = (schema, params) => {\n    return new ZodPromise({\n        type: schema,\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\n        ...processCreateParams(params),\n    });\n};\nclass ZodEffects extends ZodType {\n    innerType() {\n        return this._def.schema;\n    }\n    sourceType() {\n        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects\n            ? this._def.schema.sourceType()\n            : this._def.schema;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const effect = this._def.effect || null;\n        const checkCtx = {\n            addIssue: (arg) => {\n                addIssueToContext(ctx, arg);\n                if (arg.fatal) {\n                    status.abort();\n                }\n                else {\n                    status.dirty();\n                }\n            },\n            get path() {\n                return ctx.path;\n            },\n        };\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n        if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data, checkCtx);\n            if (ctx.common.async) {\n                return Promise.resolve(processed).then(async (processed) => {\n                    if (status.value === \"aborted\")\n                        return INVALID;\n                    const result = await this._def.schema._parseAsync({\n                        data: processed,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                    if (result.status === \"aborted\")\n                        return INVALID;\n                    if (result.status === \"dirty\")\n                        return DIRTY(result.value);\n                    if (status.value === \"dirty\")\n                        return DIRTY(result.value);\n                    return result;\n                });\n            }\n            else {\n                if (status.value === \"aborted\")\n                    return INVALID;\n                const result = this._def.schema._parseSync({\n                    data: processed,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (result.status === \"aborted\")\n                    return INVALID;\n                if (result.status === \"dirty\")\n                    return DIRTY(result.value);\n                if (status.value === \"dirty\")\n                    return DIRTY(result.value);\n                return result;\n            }\n        }\n        if (effect.type === \"refinement\") {\n            const executeRefinement = (acc) => {\n                const result = effect.refinement(acc, checkCtx);\n                if (ctx.common.async) {\n                    return Promise.resolve(result);\n                }\n                if (result instanceof Promise) {\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return acc;\n            };\n            if (ctx.common.async === false) {\n                const inner = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inner.status === \"aborted\")\n                    return INVALID;\n                if (inner.status === \"dirty\")\n                    status.dirty();\n                // return value is ignored\n                executeRefinement(inner.value);\n                return { status: status.value, value: inner.value };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((inner) => {\n                    if (inner.status === \"aborted\")\n                        return INVALID;\n                    if (inner.status === \"dirty\")\n                        status.dirty();\n                    return executeRefinement(inner.value).then(() => {\n                        return { status: status.value, value: inner.value };\n                    });\n                });\n            }\n        }\n        if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n                const base = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (!isValid(base))\n                    return base;\n                const result = effect.transform(base.value, checkCtx);\n                if (result instanceof Promise) {\n                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n                }\n                return { status: status.value, value: result };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((base) => {\n                    if (!isValid(base))\n                        return base;\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));\n                });\n            }\n        }\n        util.assertNever(effect);\n    }\n}\nZodEffects.create = (schema, effect, params) => {\n    return new ZodEffects({\n        schema,\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        effect,\n        ...processCreateParams(params),\n    });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params) => {\n    return new ZodEffects({\n        schema,\n        effect: { type: \"preprocess\", transform: preprocess },\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        ...processCreateParams(params),\n    });\n};\nclass ZodOptional extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.undefined) {\n            return OK(undefined);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodOptional.create = (type, params) => {\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNullable extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.null) {\n            return OK(null);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodNullable.create = (type, params) => {\n    return new ZodNullable({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDefault extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        let data = ctx.data;\n        if (ctx.parsedType === ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n        }\n        return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nZodDefault.create = (type, params) => {\n    return new ZodDefault({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodDefault,\n        defaultValue: typeof params.default === \"function\"\n            ? params.default\n            : () => params.default,\n        ...processCreateParams(params),\n    });\n};\nclass ZodCatch extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        // newCtx is used to not collect issues from inner types in ctx\n        const newCtx = {\n            ...ctx,\n            common: {\n                ...ctx.common,\n                issues: [],\n            },\n        };\n        const result = this._def.innerType._parse({\n            data: newCtx.data,\n            path: newCtx.path,\n            parent: {\n                ...newCtx,\n            },\n        });\n        if (isAsync(result)) {\n            return result.then((result) => {\n                return {\n                    status: \"valid\",\n                    value: result.status === \"valid\"\n                        ? result.value\n                        : this._def.catchValue({\n                            get error() {\n                                return new ZodError(newCtx.common.issues);\n                            },\n                            input: newCtx.data,\n                        }),\n                };\n            });\n        }\n        else {\n            return {\n                status: \"valid\",\n                value: result.status === \"valid\"\n                    ? result.value\n                    : this._def.catchValue({\n                        get error() {\n                            return new ZodError(newCtx.common.issues);\n                        },\n                        input: newCtx.data,\n                    }),\n            };\n        }\n    }\n    removeCatch() {\n        return this._def.innerType;\n    }\n}\nZodCatch.create = (type, params) => {\n    return new ZodCatch({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodCatch,\n        catchValue: typeof params.catch === \"function\" ? params.catch : () => params.catch,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNaN extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.nan,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n}\nZodNaN.create = (params) => {\n    return new ZodNaN({\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\n        ...processCreateParams(params),\n    });\n};\nconst BRAND = Symbol(\"zod_brand\");\nclass ZodBranded extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nclass ZodPipeline extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.common.async) {\n            const handleAsync = async () => {\n                const inResult = await this._def.in._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inResult.status === \"aborted\")\n                    return INVALID;\n                if (inResult.status === \"dirty\") {\n                    status.dirty();\n                    return DIRTY(inResult.value);\n                }\n                else {\n                    return this._def.out._parseAsync({\n                        data: inResult.value,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                }\n            };\n            return handleAsync();\n        }\n        else {\n            const inResult = this._def.in._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n            if (inResult.status === \"aborted\")\n                return INVALID;\n            if (inResult.status === \"dirty\") {\n                status.dirty();\n                return {\n                    status: \"dirty\",\n                    value: inResult.value,\n                };\n            }\n            else {\n                return this._def.out._parseSync({\n                    data: inResult.value,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n    }\n    static create(a, b) {\n        return new ZodPipeline({\n            in: a,\n            out: b,\n            typeName: ZodFirstPartyTypeKind.ZodPipeline,\n        });\n    }\n}\nclass ZodReadonly extends ZodType {\n    _parse(input) {\n        const result = this._def.innerType._parse(input);\n        const freeze = (data) => {\n            if (isValid(data)) {\n                data.value = Object.freeze(data.value);\n            }\n            return data;\n        };\n        return isAsync(result)\n            ? result.then((data) => freeze(data))\n            : freeze(result);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodReadonly.create = (type, params) => {\n    return new ZodReadonly({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodReadonly,\n        ...processCreateParams(params),\n    });\n};\n////////////////////////////////////////\n////////////////////////////////////////\n//////////                    //////////\n//////////      z.custom      //////////\n//////////                    //////////\n////////////////////////////////////////\n////////////////////////////////////////\nfunction cleanParams(params, data) {\n    const p = typeof params === \"function\"\n        ? params(data)\n        : typeof params === \"string\"\n            ? { message: params }\n            : params;\n    const p2 = typeof p === \"string\" ? { message: p } : p;\n    return p2;\n}\nfunction custom(check, _params = {}, \n/**\n * @deprecated\n *\n * Pass `fatal` into the params object instead:\n *\n * ```ts\n * z.string().custom((val) => val.length > 5, { fatal: false })\n * ```\n *\n */\nfatal) {\n    if (check)\n        return ZodAny.create().superRefine((data, ctx) => {\n            var _a, _b;\n            const r = check(data);\n            if (r instanceof Promise) {\n                return r.then((r) => {\n                    var _a, _b;\n                    if (!r) {\n                        const params = cleanParams(_params, data);\n                        const _fatal = (_b = (_a = params.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n                        ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n                    }\n                });\n            }\n            if (!r) {\n                const params = cleanParams(_params, data);\n                const _fatal = (_b = (_a = params.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n                ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n            }\n            return;\n        });\n    return ZodAny.create();\n}\nconst late = {\n    object: ZodObject.lazycreate,\n};\nvar ZodFirstPartyTypeKind;\n(function (ZodFirstPartyTypeKind) {\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\n    ZodFirstPartyTypeKind[\"ZodSymbol\"] = \"ZodSymbol\";\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\n    ZodFirstPartyTypeKind[\"ZodCatch\"] = \"ZodCatch\";\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\n    ZodFirstPartyTypeKind[\"ZodPipeline\"] = \"ZodPipeline\";\n    ZodFirstPartyTypeKind[\"ZodReadonly\"] = \"ZodReadonly\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\nconst instanceOfType = (\n// const instanceOfType = <T extends new (...args: any[]) => any>(\ncls, params = {\n    message: `Input not instance of ${cls.name}`,\n}) => custom((data) => data instanceof cls, params);\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst symbolType = ZodSymbol.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst pipelineType = ZodPipeline.create;\nconst ostring = () => stringType().optional();\nconst onumber = () => numberType().optional();\nconst oboolean = () => booleanType().optional();\nconst coerce = {\n    string: ((arg) => ZodString.create({ ...arg, coerce: true })),\n    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),\n    boolean: ((arg) => ZodBoolean.create({\n        ...arg,\n        coerce: true,\n    })),\n    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),\n    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),\n};\nconst NEVER = INVALID;\n\nvar z = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    defaultErrorMap: errorMap,\n    setErrorMap: setErrorMap,\n    getErrorMap: getErrorMap,\n    makeIssue: makeIssue,\n    EMPTY_PATH: EMPTY_PATH,\n    addIssueToContext: addIssueToContext,\n    ParseStatus: ParseStatus,\n    INVALID: INVALID,\n    DIRTY: DIRTY,\n    OK: OK,\n    isAborted: isAborted,\n    isDirty: isDirty,\n    isValid: isValid,\n    isAsync: isAsync,\n    get util () { return util; },\n    get objectUtil () { return objectUtil; },\n    ZodParsedType: ZodParsedType,\n    getParsedType: getParsedType,\n    ZodType: ZodType,\n    datetimeRegex: datetimeRegex,\n    ZodString: ZodString,\n    ZodNumber: ZodNumber,\n    ZodBigInt: ZodBigInt,\n    ZodBoolean: ZodBoolean,\n    ZodDate: ZodDate,\n    ZodSymbol: ZodSymbol,\n    ZodUndefined: ZodUndefined,\n    ZodNull: ZodNull,\n    ZodAny: ZodAny,\n    ZodUnknown: ZodUnknown,\n    ZodNever: ZodNever,\n    ZodVoid: ZodVoid,\n    ZodArray: ZodArray,\n    ZodObject: ZodObject,\n    ZodUnion: ZodUnion,\n    ZodDiscriminatedUnion: ZodDiscriminatedUnion,\n    ZodIntersection: ZodIntersection,\n    ZodTuple: ZodTuple,\n    ZodRecord: ZodRecord,\n    ZodMap: ZodMap,\n    ZodSet: ZodSet,\n    ZodFunction: ZodFunction,\n    ZodLazy: ZodLazy,\n    ZodLiteral: ZodLiteral,\n    ZodEnum: ZodEnum,\n    ZodNativeEnum: ZodNativeEnum,\n    ZodPromise: ZodPromise,\n    ZodEffects: ZodEffects,\n    ZodTransformer: ZodEffects,\n    ZodOptional: ZodOptional,\n    ZodNullable: ZodNullable,\n    ZodDefault: ZodDefault,\n    ZodCatch: ZodCatch,\n    ZodNaN: ZodNaN,\n    BRAND: BRAND,\n    ZodBranded: ZodBranded,\n    ZodPipeline: ZodPipeline,\n    ZodReadonly: ZodReadonly,\n    custom: custom,\n    Schema: ZodType,\n    ZodSchema: ZodType,\n    late: late,\n    get ZodFirstPartyTypeKind () { return ZodFirstPartyTypeKind; },\n    coerce: coerce,\n    any: anyType,\n    array: arrayType,\n    bigint: bigIntType,\n    boolean: booleanType,\n    date: dateType,\n    discriminatedUnion: discriminatedUnionType,\n    effect: effectsType,\n    'enum': enumType,\n    'function': functionType,\n    'instanceof': instanceOfType,\n    intersection: intersectionType,\n    lazy: lazyType,\n    literal: literalType,\n    map: mapType,\n    nan: nanType,\n    nativeEnum: nativeEnumType,\n    never: neverType,\n    'null': nullType,\n    nullable: nullableType,\n    number: numberType,\n    object: objectType,\n    oboolean: oboolean,\n    onumber: onumber,\n    optional: optionalType,\n    ostring: ostring,\n    pipeline: pipelineType,\n    preprocess: preprocessType,\n    promise: promiseType,\n    record: recordType,\n    set: setType,\n    strictObject: strictObjectType,\n    string: stringType,\n    symbol: symbolType,\n    transformer: effectsType,\n    tuple: tupleType,\n    'undefined': undefinedType,\n    union: unionType,\n    unknown: unknownType,\n    'void': voidType,\n    NEVER: NEVER,\n    ZodIssueCode: ZodIssueCode,\n    quotelessJson: quotelessJson,\n    ZodError: ZodError\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@dust-tt/client/node_modules/zod/lib/index.mjs\n");

/***/ })

};
;